Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> range definitions
Private Const RNG_def_show = "defs_pupils_show"
Private Const RNG_def_sort = "defs_pupils_sort"
Private Const RNG_def_sort_def = "defs_pupils_def_sort"
Private Const RNG_def_lock = "defs_lock_protected"
' >>> initialization
Private Sub Workbook_Open()
    GBL_started = False
    GBL_suspend_checks = False
    GBL_new_year_on = False
    GBL_screen_width = GetScreenWidth()
    GBL_screen_height = GetScreenHeight()
InitialProgress "0%"
    vars_ensure_load
    ControlPupils.ensure_load
    ControlClasses.ensure_load
    ControlGrades.ensure_load
    GBL_quit_next = False
    GBL_file_is_latest = 0
    initIntegrityChecks
InitialProgress "10%"
    initVerCheckHttp
    UpdatesReset
    UpdatesOff
    MarkAsYearEnd ' ***#***
    GBL_filter_save = "***"
    GBL_auto_lock = 0
    SetProtection False
InitialProgress "20%"
    PanelHelp.InitComments
InitialProgress "30%"
    ControlPupils.PUB_no_sort = True
    InitializeDefs
InitialProgress "40%"
    Range(GRN_ppl_name_last).Worksheet.Activate
    Range(GRN_ppl_name_last).Activate
    If Trim(Range(RNG_def_sort_def).Text) <> "" Then ControlPupils.PupilSort.Text = Trim(Range(RNG_def_sort_def).Text)
    FilterPupils "", "", ""
InitialProgress "50%"
    If Range(RNG_def_sort) = CN_yes Then PupilsSort Trim(ControlPupils.PupilSort.Text)
InitialProgress "60%"
    ControlPupils.hide
    ControlPupils.PUB_no_sort = False
    ResetChanges
InitialProgress "70%"
    TrimKidInfoCells
InitialProgress "80%"
    VerifyImgDir
InitialProgress "82%"
    SetFileVerInfo
InitialProgress "84%"
    SetDeployment
InitialProgress "86%"
    SetCurrentUser
InitialProgress "90%"
    UpdatesOn
InitialProgress "92%"
    Application.WindowState = xlMaximized
InitialProgress "94%"
    If Range(RNG_def_show) = CN_yes Then sheet1.Activate
InitialProgress "96%"
    GoToCorner
InitialProgress "98%"
    Application.CellDragAndDrop = False
InitialProgress "100%"
    ControlDefs.InitAttSync
InitialProgress ""
    If Range(GRN_def_cloud_status) = CN_yes And Range(GRN_def_ver_check_init) = CN_yes Then
        PanelInfo.Show vbModeless
        PanelVersion.DoVerCheck
        If PanelInfo.Visible Then
            PanelInfo.hide
            PanelInfo.Show vbModal
        End If
    Else
        PanelInfo.Show vbModal
    End If
End Sub
' >>> termination
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Application.CellDragAndDrop = True
    GBL_quit_next = True
    If GBL_Is_saved Then
        If Range(GRN_def_cloud_status) = CN_yes And Range(GRN_def_cloud_mark_exit) = CN_yes Then
            PanelVersion.ShowMsg "", "המתן לסגירת קובץ ..."
            ExitCloudVer
            PanelVersion.ShowMsg "", ""
        End If
    End If
End Sub
' >>> activation
Private Sub workbook_activate()
    If Not GBL_started Then
        ThisWorkbook.Saved = True
        GBL_Is_saved = True
        GBL_do_lock = False
        GBL_do_sync = False
        GBL_do_ver = False
    End If
    GBL_started = True
    If GBL_do_lock Then AutoLock
    If GBL_do_sync Then DoAutoSync
    If GBL_do_ver Then DoVersionCheck
    ActivateScheduledTimer
End Sub
' >>> termination
Private Sub Workbook_Deactivate()
    DeactivateScheduledTimer
    Application.OnKey "{DEL}"
    HideAllPanels
End Sub
' >>> pre-save maintenance
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    UpdatesOff
    SetProtection False
    ControlChanges.FilterReset
    ControlEvents.FilterReset
    ControlExpenses.FilterReset
    ControlWait.FilterReset
    ControlStaff.FilterReset
    If Not GBL_Is_saved Then Range(GRN_def_data_ver).Value = Range(GRN_def_data_ver).Value + 1
' ***    If SpecialSave(SaveAsUI) Then Cancel = True
    UpdatesOn
    CheckUnallowedMerges
    If Cancel = False Then
        If Not GBL_Is_saved Or DialogSave.OptionForce.Value Then
            SaveCloudVersion DialogSave.OptionForce.Value
            ThisWorkbook.Saved = True
            GBL_Is_saved = True
        End If
    End If
    If GBL_quit_next Then
        If Range(GRN_def_cloud_status) = CN_yes And Range(GRN_def_cloud_mark_exit) = CN_yes Then ExitCloudVer
    End If
End Sub
' >>> reset updates when sheets change
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    UpdatesReset
    GBL_Is_saved = False
End Sub
' >>> maintenance to do every movement between sheets
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    ScheduledTimerTick
    CheckUnallowedMerges
End Sub
' >>> prevent "Cut" command & check auto lock
Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
    Dim tx As String
    Dim hd As Boolean
' prevent "cut"
    If Application.CutCopyMode = xlCut Then
        If Range(GRN_def_development) = CN_no Then
            tx = "אסור להשתמש בגזור/הדבק !" + vbCr + vbCr + "במקום זאת, השתמש בהעתק/הדבק," + vbCr + "ואז מחק את המקור."
            AskReset
            Call AskDialog(tx, "o")
            Application.CutCopyMode = False
        End If
    End If
' check if selection contain hidden cells
    hd = False
    If GBL_suspend_checks = False And Target.Columns.count < 999 Then
        If Target.count > 1 Then
            If Target.count <> Target.SpecialCells(xlCellTypeVisible).count Then
                PanelSelect.Show
                SheetFocus
                hd = True
            End If
        End If
    End If
    If Not hd And PanelSelect.Visible Then PanelSelect.hide
' fix delicate buttons state based on (PanelSelect) status
    ControlPupils.PupilsClearKid.Enabled = Not PanelSelect.Visible
    ControlEvents.BT_del.Enabled = (Not PanelSelect.Visible And Target.Areas.count = 1)
    ControlWait.WAIT_del.Enabled = (Not PanelSelect.Visible And Target.Areas.count = 1)
    ControlExpenses.BT_del.Enabled = (Not PanelSelect.Visible And Target.Areas.count = 1)
    ControlChanges.BT_del.Enabled = (Not PanelSelect.Visible And Target.Areas.count = 1)
    ControlStaff.BT_del.Enabled = (Not PanelSelect.Visible And Target.Areas.count = 1)
' auto lock & version check
    InitAutoLock
    InitVersionCheck
' ensure vars are OK
    EnsureVarsOK
End Sub
' >>> special save based on excel version
Function SpecialSave(SaveAsUI As Boolean) As Boolean
    Dim fname
    SpecialSave = True
    fname = ActiveWorkbook.FullName
    If SaveAsUI Then
        fname = Application.GetSaveAsFilename(FileFilter:="Excel Binary Macro Enabled (*.xlsb), *.xlsb", InitialFileName:=fname)
        If fname = False Then Exit Function
    End If
    fname = Mid(fname, 1, InStrRev(fname, ".") - 1)
    Application.DisplayAlerts = False
'    If VerCheck() Then
'        Application.ActiveWorkbook.SaveAs Filename:=fname & "_ex2016_v2", FileFormat:=52, CreateBackup:=False
'        Application.ActiveWorkbook.SaveAs Filename:=fname & "_ex2016_v1", FileFormat:=50, CreateBackup:=False
'        GBL_Is_saved = True
'    Else
        If Right(fname, 5) <> ".xlsb" Then fname = fname & ".xlsb"
        Application.ActiveWorkbook.SaveAs fileName:=fname, CreateBackup:=False
'        GBL_Is_saved = True
'    End If
    Application.DisplayAlerts = True
End Function
' >>> go to proper corner of current sheet
Private Sub GoToCorner()
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet1" Then PupilsFirst
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet2" Then ClassCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet3" Then GradeCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet4" Then ControlDefs.GoToCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet7" Then ControlEvents.GoToCorner
'    If ActiveWorkbook.ActiveSheet.CodeName = "sheet8" Then ControlStaff.GoToCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet9" Then ControlChanges.GoToCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet91" Then ControlExpenses.GoToCorner
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet92" Then ControlWait.GoToCorner
End Sub
' >>> fix missing word object library
Private Sub FixReference()
    Dim guid As String, xref As Variant, i As Long
    guid = "{00020905-0000-0000-C000-000000000046}"
    On Error Resume Next
' Remove word reference
    For i = ThisWorkbook.VBProject.References.count To 1 Step -1
        Set xref = ThisWorkbook.VBProject.References.Item(i)
        If xref.guid = guid Then ThisWorkbook.VBProject.References.Remove xref
    Next i
' Add the word reference
    ThisWorkbook.VBProject.References.AddFromGuid guid:=guid, Major:=1, Minor:=0
    On Error GoTo 0
End Sub
' >>> trim cells (kid's name & class)
Private Sub TrimKidInfoCells()
    Dim rng As Range
    Dim row As Range
    Dim cl As Range
    Set rng = Range(GRN_ppl_all_data)
    For Each row In rng.Rows
        Set cl = Intersect(row, Range(GRN_ppl_name_last).EntireColumn)
        If cl.Text <> "" Then cl.Value = Trim(cl.Text)
        Set cl = Intersect(row, Range(GRN_ppl_name_first).EntireColumn)
        If cl.Text <> "" Then cl.Value = Trim(cl.Text)
    Next
End Sub
' >>> ensure that the image directory exists
Private Sub VerifyImgDir()
    Dim dr As String
    dr = Trim(Range(GRN_def_img_dir).Text)
    If dr <> "" Then
        If Len(dir(dr, vbDirectory)) = 0 Then
            On Error GoTo 0
            MkDir dr
        End If
    End If
End Sub
' >>> set deployment status
Private Sub SetDeployment()
    Dim file As String
    Dim fno As Integer
    file = Range(GRN_def_img_dir) & "/deploy.txt"
    fno = FreeFile
    GBL_deployment = ""
    If FileExists(file) Then
        Open file For Input As #fno
            GBL_deployment = Application.Clean(Trim(Input$(LOF(fno), fno)))
        Close #fno
    End If
    ControlDefs.MultiPage1.Pages("Page4").Enabled = (GBL_deployment <> "")
End Sub
' >>> set current user
Private Sub SetCurrentUser()
    Dim file As String
    Dim fno As Integer
    file = Range(GRN_def_img_dir) & "/user.txt"
    fno = FreeFile
    GBL_current_user = ""
    If FileExists(file) Then
        Open file For Input As #fno
            GBL_current_user = Application.Clean(Trim(Input$(LOF(fno), fno)))
        Close #fno
    Else
        GBL_current_user = "{" & Environ$("computername") & " / " & Environ$("username") & "}"
    End If
End Sub
' >>> show initial progress
Private Sub InitialProgress(txt As String)
    If txt <> "" Then
        PanelVersion.ShowMsg "", "טוען סקריפטים " + txt
        PanelVersion.Repaint
    Else
        PanelVersion.hide
    End If
End Sub
' >>> ensure that system vars are OK and issue a warning if not
Private Sub EnsureVarsOK()
    If GBL_int_ppl = "" Or GBL_int_cls = "" Or GBL_int_grd = "" Then
        PanelVersion.ShowMsg "תקלת סקריפטים - מומלץ לשמור את הקובץ, לצאת, ולטעון שוב.", ""
        GBL_started = True
        GBL_new_year_on = False
        GBL_suspend_checks = False
        GBL_screen_width = GetScreenWidth()
        GBL_screen_height = GetScreenHeight()
        GBL_quit_next = False
        GBL_file_is_latest = 0
        GBL_filter_save = "***"
        initIntegrityChecks
        SetFileVerInfo
        SetDeployment
        SetCurrentUser
        Range(GRN_def_development) = "לא" ' locks everything
        ControlDefs.InitAttSync
    End If
End Sub


Attribute VB_Name = "sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    PupilShowPanels
End Sub
' >>> follow changes in class assignments
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim ar As Range, cl As Range, tmp As Range
    Dim sht As Worksheet
    If PupilsCheckIntegrity() Then Exit Sub
    Set sht = SheetFix("sheet1")
    UpdatesOff
    If TestIn(Target, Range(GRN_ppl_all_data)) Then CheckPupilCells Target
    FollowClassChanges Target
    If TestIn(Target, Range(GRN_ppl_all_data)) Then
        For Each ar In Target.Areas ' loop all range areas
            Set tmp = Intersect(Range(GRN_ppl_all_data), ar)
            If Not (tmp Is Nothing) Then ' loop all rows in area
                For Each cl In tmp.Rows
                    CheckPupilRecord cl.Cells(1)
                Next
            End If
        Next
        If PanelProblems.Visible Then PanelProblems.ShowPupilProblems Target
        GBL_att_changed = True
        GBL_att_synced = 0
    End If
    If Not (sht Is Nothing) Then sht.Activate
    UpdatesOn
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    If ControlPupils.Visible Then ControlPupils.hide
'    If PanelClassStats.Visible Then PanelClassStats.hide
'    If PanelProblems.Visible Then PanelProblems.hide
'    If PanelAssist.Visible Then PanelAssist.hide
'    If PanelPhotos.Visible Then PanelPhotos.hide
    Application.OnKey "{DEL}"
End Sub
' >>> make sure control panel is on
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    PupilShowPanels
' show pupil's problems
    If PanelProblems.Visible Then PanelProblems.ShowPupilProblems Target
' show class assist panel when on classes
    If Target.count = 1 And TestIn(Target, Range(GRN_ppl_cls_data)) Then
        PupilsAssist Target
    Else
        If GBL_started And PanelAssist.Visible Then PanelAssist.hide
    End If
' show pupil's photo when on kid first name
    If Target.count = 1 And TestIn(Target, Range(GRN_ppl_name_first).EntireColumn) Then
        PanelPhotos.ShowKid Target
    Else
        If GBL_started And PanelPhotos.Visible Then PanelPhotos.hide
    End If
' disable {DEL} key when on name or class columns
    If Target.count = 1 And (TestIn(Target, Range(GRN_ppl_name_last).EntireColumn) Or TestIn(Target, Range(GRN_ppl_name_first).EntireColumn) Or TestIn(Target, Range(GRN_ppl_grade).EntireColumn)) Then
        Application.OnKey "{DEL}", ""
    Else
        Application.OnKey "{DEL}"
    End If
End Sub
' >>> Check Integrity of pupils sheet and fix if necessary
Private Function PupilsCheckIntegrity() As Boolean
    PupilsCheckIntegrity = False
    If GBL_int_ppl <> Range(GRN_ppl_edge).Address Then
        PupilsCheckIntegrity = UndoIntegrityChanges
    End If
End Function


Attribute VB_Name = "sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> range definitions
Private Const RNG_data = "class_data"
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    ControlClasses.Show (vbModeless)
    SheetFocus
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlClasses.hide
End Sub
' >>> make sure control panel is on
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not ControlClasses.Visible Then
        ControlClasses.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> do when values change in classes sheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sht As Worksheet
    If ClassCheckIntegrity() Then Exit Sub
    Set sht = SheetFix("sheet2")
    If TestIn(Target, Range(RNG_data)) Then
        UpdatesOff
        SortClasses ' sort class items
        Application.Calculate
        RebuildClasses Target ' fix classes names
        BuildClassMenus ' fix class menus
        UpdatesOn
        GBL_att_changed = True
        GBL_att_synced = 0
    End If
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> Check Integrity of class sheet and fix if necessary
Private Function ClassCheckIntegrity() As Boolean
    ClassCheckIntegrity = False
    If GBL_int_cls <> Range(GRN_cls_edge).Address Then
        ClassCheckIntegrity = UndoIntegrityChanges
    End If
End Function


Attribute VB_Name = "sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> range definitions
Private Const RNG_data = "grade_data"
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    If Not GBL_new_year_on Then
        ControlGrades.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlGrades.hide
End Sub
' >>> make sure control panel is on
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not ControlGrades.Visible Then
        ControlGrades.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> do when values change in grades sheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sht As Worksheet
    If GradeCheckIntegrity() Then Exit Sub
    Set sht = SheetFix("sheet3")
    If TestIn(Target, Range(RNG_data)) Then
        UpdatesOff
        Application.Calculate
        RebuildGrades Target ' fix full grade names
        MakeGradeMenu ' calc new grade & level menus
        UpdatesOn
    End If
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> Check Integrity of grades sheet and fix if necessary
Private Function GradeCheckIntegrity() As Boolean
    GradeCheckIntegrity = False
    If GBL_int_grd <> Range(GRN_grd_edge).Address Then
        GradeCheckIntegrity = UndoIntegrityChanges
    End If
End Function


Attribute VB_Name = "sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Attribute VB_Name = "sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> range definitions

' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    EnsurePanel
End Sub
' >>> handle changes in worksheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim cl As Range, rng As Range
    Dim sht As Worksheet
    Set sht = SheetFix("sheet7")
    UpdatesOff
    Set rng = Intersect(Target.EntireRow, Range(GRN_event_id))
    If Not (rng Is Nothing) Then
        For Each cl In rng
            If IsEmpty(cl) Then
                If Not RecIsEmpty(cl) Then
                    AddNewRec cl
                    SortRecords Target
                End If
            End If
        Next
    End If
    ValidateKidInfo Target
    UpdatesOn
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlEvents.hide
End Sub
' >>> ensure control panel is up
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    EnsurePanel
End Sub
' >>> ensure panel and focus are set
Private Sub EnsurePanel()
    If Not GBL_new_year_on Then
        If Not ControlEvents.Visible Then
            ControlEvents.Show (vbModeless)
            SheetFocus
        End If
    End If
End Sub
' >>> check if a record is empty
Private Function RecIsEmpty(cl As Range) As Boolean
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(GRN_event_data))
    RecIsEmpty = True
    If Not (rng Is Nothing) Then
        RecIsEmpty = (rng.count - rng.SpecialCells(xlCellTypeBlanks).count < 1)
    End If
End Function
' >>> add a new record when a user doesn't use the "new" button
Private Sub AddNewRec(cl As Range)
    Dim rng As Range
    cl = GetUniqueID()
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_date))
    cl = Format(Now(), "yyyy/MM/dd")
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_time))
    cl = Format(Now(), "hh:mm")
    Set rng = Range(GRN_event_id).Cells(1).Offset(Range(GRN_event_id).count - 1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromLeftOrAbove
End Sub
' >>> sort records and return to proper active cell
Private Sub SortRecords(rng As Range)
    Dim cl As Range
    Dim x As String
    Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_event_id))
    x = ""
    If rng.count = 1 And Not (cl Is Nothing) Then x = Trim(cl.Value)
    Range(GRN_event_data).sort key1:=Range(GRN_event_id), order1:=xlAscending
    ControlEvents.CB_sort.ListIndex = -1
    If x <> "" Then
        Set cl = Range(GRN_event_id).Find(x, lookat:=xlWhole)
        Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
        cl.Select
    End If
End Sub
' >>> validate name/grade of a kid
Sub ValidateKidInfo(trg As Range)
    Dim cl As Range, rng As Range, rn2 As Range
    Dim typ As String
    Set rng = Intersect(trg, Range(GRN_event_validate))
    If Not (rng Is Nothing) Then
        Set rng = Intersect(trg.EntireRow, Range(GRN_event_name_grade))
        For Each cl In rng.Rows
            Set rn2 = Intersect(cl.EntireRow, Range(GRN_event_type))
            typ = Trim(rn2.Value)
            FixKidInfo cl, (typ = "תלמיד")
        Next
    End If
End Sub


Attribute VB_Name = "sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    ControlStaff.Show (vbModeless)
    SheetFocus
End Sub
' >>> follow changes in class assignments
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim cl As Range, rng As Range
    Dim sht As Worksheet
    Set sht = SheetFix("sheet8")
    UpdatesOff
    If TestIn(Target, Range(GRN_stf_phones)) Then CheckStaffCells Target
    Set rng = Intersect(Target.EntireRow, Range(GRN_stf_year))
    If Not (rng Is Nothing) Then
        For Each cl In rng
            If IsEmpty(cl) Then
                If Not RecIsEmpty(cl) Then
                    AddNewRec cl
                    SortRecords Target
                End If
            End If
        Next
    End If
    UpdatesOn
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlStaff.hide
End Sub
' >>> make sure control panel is on
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not ControlStaff.Visible Then
        ControlStaff.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> check if a record is empty
Private Function RecIsEmpty(cl As Range) As Boolean
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(GRN_stf_data))
    RecIsEmpty = True
    If Not (rng Is Nothing) Then
        RecIsEmpty = (rng.count - rng.SpecialCells(xlCellTypeBlanks).count < 1)
    End If
End Function
' >>> add a new record when a user doesn't use the "new" button
Private Sub AddNewRec(cl As Range)
    Dim rng As Range
    cl = CStr(CDbl(Format(Date, "yyyy")) - 0.5)
    Set rng = Range(GRN_stf_year).Cells(1).Offset(Range(GRN_stf_year).count - 1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromLeftOrAbove
End Sub
' >>> sort records and return to proper active cell
Private Sub SortRecords(rng As Range)
    Dim cl As Range
    Dim x As String
    x = CStr(CDbl(Format(Date, "yyyy")) - 0.5)
    Range(GRN_stf_data).sort key1:=Range(GRN_stf_job), order1:=xlAscending
    Range(GRN_stf_data).sort key1:=Range(GRN_stf_year), order1:=xlDescending, key2:=Range(GRN_stf_type), order2:=xlDescending, key3:=Range(GRN_stf_class), order3:=xlAscending
    ControlStaff.CB_sort.ListIndex = -1
    Set cl = Range(GRN_stf_year).Find(x, lookat:=xlWhole)
    Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
    cl.EntireRow.Cells(1) = Format(Date, "yyyy")
    cl.Select
End Sub
' >>> check changes in cells
Private Sub CheckStaffCells(rng As Range)
    Dim cl As Range, ar As Range, tmp As Range, c As Integer
    Set tmp = Intersect(Range(GRN_stf_phones), rng)
    For Each ar In tmp
        If Not (ar Is Nothing) Then
            For Each cl In ar
                If TestIn(cl, Range(GRN_stf_phones)) Then ' check phones
                    c = RangeCheckPhones(cl)
                End If
            Next
        End If
    Next
End Sub


Attribute VB_Name = "sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> range definitions
Private Const RNG_alw_dbl = "defs_class_allow_dbl"
Private Const RNG_no_prt = "defs_no_part"
Private Const RNG_lock = "defs_lock_protected"
Private Const RNG_tabs = "defs_hide_sensitive"
Private Const RNG_panels = "defs_hide_dangerous"
Private Const RNG_saved_alw_dbl = "defs_save_allow_dbl"
Private Const RNG_saved_no_prt = "defs_save_no_part"
Private Const RNG_pnl_pupil = "defs_win_pupil_pos"
Private Const RNG_pnl_class = "defs_win_class_pos"
Private Const RNG_pnl_grade = "defs_win_grade_pos"
Private Const RNG_pnl_miscs = "defs_win_misc_pos"
Private Const RNG_pnl_stats = "defs_win_cls_stats"
Private Const RNG_pnl_probs = "defs_win_problems"
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    If Not GBL_new_year_on Then
        ControlDefs.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> handle changes in worksheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sht As Worksheet
    Dim txt As String
    Set sht = SheetFix("sheet4")
    If TestIn(Target, Range(RNG_lock)) Then ControlDefs.DefsCheckLock.Value = (Range(RNG_lock) = CN_yes)
    If TestIn(Target, Range(RNG_tabs)) Then ControlDefs.DefsCheckTabs.Value = (Range(RNG_tabs) = CN_yes)
    If TestIn(Target, Range(RNG_panels)) Then ControlDefs.DefsCheckPages.Value = (Range(RNG_panels) = CN_yes)
    If TestIn(Target, Range(GRN_def_development)) Then
        ControlDefs.DefsCheckLock.Value = (Range(GRN_def_development) = CN_no)
        ControlDefs.DefsCheckTabs.Value = (Range(GRN_def_development) = CN_no)
        ControlDefs.DefsCheckPages.Value = (Range(GRN_def_development) = CN_no)
    End If
    UpdatesOff
    If TestIn(Target, Range(RNG_alw_dbl)) Or TestIn(Target, Range(RNG_no_prt)) Then BuildClassMenus
    If TestIn(Target, Range(RNG_pnl_pupil)) Then ResetPanelPos ControlPupils, Range(RNG_pnl_pupil).Text
    If TestIn(Target, Range(RNG_pnl_class)) Then ResetPanelPos ControlClasses, Range(RNG_pnl_class).Text
    If TestIn(Target, Range(RNG_pnl_grade)) Then ResetPanelPos ControlGrades, Range(RNG_pnl_grade).Text
    If TestIn(Target, Range(RNG_pnl_stats)) Then ResetPanelPos PanelClassStats, Range(RNG_pnl_stats).Text
    If TestIn(Target, Range(RNG_pnl_probs)) Then ResetPanelPos PanelProblems, Range(RNG_pnl_probs).Text
    If TestIn(Target, Range(RNG_pnl_miscs)) Then
        ResetPanelPos ControlDefs, Range(RNG_pnl_miscs).Text
        ResetPanelPos ControlEvents, Range(RNG_pnl_miscs).Text
        ResetPanelPos ControlStaff, Range(RNG_pnl_miscs).Text
        ResetPanelPos ControlChanges, Range(RNG_pnl_miscs).Text
        ResetPanelPos ControlExpenses, Range(RNG_pnl_miscs).Text
        ResetPanelPos ControlWait, Range(RNG_pnl_miscs).Text
    End If
    If TestIn(Target, Range(GRN_def_auto_lock)) Then
        If Range(GRN_def_auto_lock) < 0 Then Range(GRN_def_auto_lock) = ""
        If Range(GRN_def_auto_lock) > 59 Then Range(GRN_def_auto_lock) = "59"
    End If
    If TestIn(Target, Range(GRN_def_assist_ppl_cls)) Then ResetPanelPos PanelAssist, Range(GRN_def_assist_ppl_cls).Text
    If TestIn(Target, Range(GRN_def_auto_sync)) Then
        ControlDefs.DefsAttAuto.Enabled = (Range(GRN_def_auto_sync) > 0)
        InitAutoSync
    End If
    If TestIn(Target, Range(GRN_def_year_end)) Then ' clicked year end
        If ControlPupils.SaveVersion.Enabled Then ' year is still open
            If Range(GRN_def_year_end) = CN_yes Then ' chosen yes to end year
                AskReset
                txt = "האם להעביר את הקובץ למצב סוף שנה ?"
                If AskDialog(txt, "yn") = "y" Then
                    AskReset
                    txt = "מצב זה אינו הפיך, האם אתה בטוח ?"
                    If AskDialog(txt, "yn") = "y" Then
                        MarkAsYearEnd
' ***#***
                        PanelVersion.ShowMsg "", "הקובץ הועבר למצב סוף שנה !"
                    End If
                End If
                AskReset
            End If
            If ControlPupils.SaveVersion.Enabled Then Range(GRN_def_year_end) = CN_no
        Else ' year is already closed
            Range(GRN_def_year_end) = CN_yes
            PanelVersion.ShowMsg "", "לא ניתן לבטל מצב סוף שנה !"
        End If
    End If
    If ControlDefs.DefsAttAuto.Enabled = False Then ControlDefs.DefsAttAuto.Value = False
    FixPhotoBox Target
    UpdatesOn
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> reset a panel position
Private Sub ResetPanelPos(ctl As Object, pos As String)
    Dim x As Long, y As Long
    If InStr(pos, ",") > 0 Then
        ctl.Left = GetPositionX(ctl, pos)
        ctl.Top = GetPositionY(ctl, pos)
    End If
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlDefs.hide
End Sub
' >>> ensure control panel is up
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not ControlDefs.Visible Then
        ControlDefs.Show (vbModeless)
        SheetFocus
    End If
End Sub
' >>> check and fix photo box position & size
Private Sub FixPhotoBox(Target As Range)
    Dim x As Integer
    If TestIn(Target, Range(GRN_def_img_pos)) Then ResetPanelPos PanelPhotos, Range(GRN_def_img_pos).Text
    If TestIn(Target, Range(GRN_def_img_size)) Then
        x = CInt(Range(GRN_def_img_size).Text)
        If x < 80 Then x = 80
        If x > 250 Then x = 250
        UpdatesOff
        Range(GRN_def_img_size) = CStr(x)
        UpdatesOn
        PanelPhotos.Width = x + 6
        PanelPhotos.Height = x + 20
        PanelPhotos.KidPhoto.Width = x
        PanelPhotos.KidPhoto.Height = x
    End If
End Sub


Attribute VB_Name = "sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Attribute VB_Name = "sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    EnsurePanel
End Sub
' >>> handle changes in worksheet
Private Sub Worksheet_Change(ByVal Target As Range)
' stub
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlChanges.hide
End Sub
' >>> ensure control panel is up
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    EnsurePanel
End Sub
' >>> ensure panel and focus are set
Private Sub EnsurePanel()
    If Not GBL_new_year_on Then
        If Not ControlChanges.Visible Then
            ControlChanges.Show (vbModeless)
            SheetFocus
        End If
    End If
End Sub


Attribute VB_Name = "sheet92"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
' >>> variables

' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    EnsurePanel
End Sub
' >>> handle changes in worksheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim cl As Range, rng As Range
    Dim sht As Worksheet
    Set sht = SheetFix("sheet92")
    UpdatesOff
    Set rng = Intersect(Target.EntireRow, Range(GRN_wait_id))
    If Not (rng Is Nothing) Then
        For Each cl In rng
            If IsEmpty(cl) Then
                If Not RecIsEmpty(cl) Then
                    AddNewRec cl
                    SortRecords Target
                End If
            End If
        Next
    End If
    ValidateKidInfo Target
    ControlWait.CalcKid
    FixFormulas
    UpdatesOn
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlWait.hide
End Sub
' >>> ensure control panel is up and prevent going into restricted area
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    EnsurePanel
    If TestIn(Range(GRN_wait_restricted), Target) Then
        Cells(Target.row, Range(GRN_wait_name_first).Column).Select
    End If
    ControlWait.CalcKid
End Sub
' >>> ensure panel and focus are set
Private Sub EnsurePanel()
    If Not GBL_new_year_on Then
        If Not ControlWait.Visible Then
            ControlWait.Show (vbModeless)
            SheetFocus
        End If
    End If
End Sub
' >>> check if a record is empty
Private Function RecIsEmpty(cl As Range) As Boolean
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(GRN_wait_data))
    RecIsEmpty = True
    If Not (rng Is Nothing) Then
        RecIsEmpty = (rng.count - rng.SpecialCells(xlCellTypeBlanks).count <= 1)
    End If
End Function
' >>> add a new record when a user doesn't use the "new" button
Private Sub AddNewRec(cl As Range)
    Dim rng As Range
    cl = GetUniqueID()
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_date))
    cl = Format(Now(), "yyyy/MM/dd")
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_time))
    cl = Format(Now(), "hh:mm")
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_name_first))
    Set rng = Range(GRN_wait_id).Cells(1).Offset(Range(GRN_wait_id).count - 1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromLeftOrAbove
End Sub
' >>> sort records and return to proper active cell
Private Sub SortRecords(rng As Range)
    Dim cl As Range
    Dim x As String
    Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_wait_id))
    x = ""
    If rng.count = 1 And Not (cl Is Nothing) Then x = Trim(cl.Value)
    Range(GRN_wait_data).sort key1:=Range(GRN_wait_id), order1:=xlAscending
    If x <> "" Then
        Set cl = Range(GRN_wait_id).Find(x, lookat:=xlWhole)
        Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
        cl.Select
    End If
End Sub
' >>> copy proper formulas to cells
Sub FixFormulas()
    Dim rng As Range
    Set rng = Range(GRN_wait_formulas)
    If rng.count <> rng.SpecialCells(xlCellTypeFormulas).count Then
        rng.Formula = rng.Cells(1).Formula
    End If
End Sub
' >>> validate name/grade of a kid
Sub ValidateKidInfo(trg As Range)
    Dim cl As Range, rng As Range
    Set rng = Intersect(trg, Range(GRN_wait_name_grade))
    If Not (rng Is Nothing) Then
        Set rng = Intersect(trg.EntireRow, Range(GRN_wait_name_grade))
        For Each cl In rng.Rows
            FixKidInfo cl, True
        Next
    End If
End Sub


Attribute VB_Name = "sheet91"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' >>> do when worksheet receive focus
Private Sub worksheet_activate()
    EnsurePanel
End Sub
' >>> handle changes in worksheet
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim cl As Range, rng As Range
    Dim sht As Worksheet
    Set sht = SheetFix("sheet91")
    UpdatesOff
    Set rng = Intersect(Target.EntireRow, Range(GRN_payment_id))
    If Not (rng Is Nothing) Then
        For Each cl In rng
            If IsEmpty(cl) Then
                If Not RecIsEmpty(cl) Then
                    AddNewRec cl
                    SortRecords Target
                End If
            End If
        Next
    End If
    UpdatesOn
    If Not (sht Is Nothing) Then sht.Activate
End Sub
' >>> do when worksheet loses focus
Private Sub Worksheet_Deactivate()
    HideAllPanels
'    ControlExpenses.hide
End Sub
' >>> ensure control panel is up
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    EnsurePanel
End Sub
' >>> ensure panel and focus are set
Private Sub EnsurePanel()
    If Not GBL_new_year_on Then
        If Not ControlExpenses.Visible Then
            ControlExpenses.Show (vbModeless)
            SheetFocus
        End If
    End If
End Sub
' >>> check if a record is empty
Private Function RecIsEmpty(cl As Range) As Boolean
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(GRN_payment_data))
    RecIsEmpty = True
    If Not (rng Is Nothing) Then
        RecIsEmpty = (rng.count - rng.SpecialCells(xlCellTypeBlanks).count < 1)
    End If
End Function
' >>> add a new record when a user doesn't use the "new" button
Private Sub AddNewRec(cl As Range)
    Dim rng As Range
    cl = GetUniqueID()
    Set rng = Range(GRN_payment_id).Cells(1).Offset(Range(GRN_payment_id).count - 1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromLeftOrAbove
End Sub
' >>> sort records and return to proper active cell
Private Sub SortRecords(rng As Range)
    Dim cl As Range
    Dim x As String
    Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_payment_id))
    x = ""
    If rng.count = 1 And Not (cl Is Nothing) Then x = Trim(cl.Value)
    Range(GRN_payment_data).sort key1:=Range(GRN_payment_id), order1:=xlAscending
    ControlExpenses.CB_sort.ListIndex = -1
    If x <> "" Then
        Set cl = Range(GRN_payment_id).Find(x, lookat:=xlWhole)
        Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
        cl.Select
    End If
End Sub


Attribute VB_Name = "ModuleMisc"
Option Explicit
' >>> return empty string ("") when value is zero (0)
Function NoZero(v As Variant)
    If v = 0 Then v = ""
    NoZero = v
End Function
' >>> return a formatted "num / num" string
Function FormatDblVal(v1 As Variant, v2 As Variant) As String
    Dim x As String
    x = IIf(NoZero(v1) = "", "-", CStr(v1))
    x = x + " / " + IIf(NoZero(v2) = "", "-", CStr(v2))
    If x = "- / -" Then x = ""
    FormatDblVal = x
End Function
' >>> return zero (0) when value is an empty string ("")
Function Zero(v As Variant)
    If v = "" Then v = 0
    Zero = v
End Function
' >>> check if a value exists in cell range
Function FindVal(rng As Range, fnd As String) As Boolean
    FindVal = True
    If rng.Find(what:=fnd, lookat:=xlWhole, SearchOrder:=xlByColumns, MatchCase:=True, matchbyte:=True) Is Nothing Then FindVal = False
End Function
' >>> change a value in a cell range
Sub ChangeVal(rng As Range, src As String, trg As String)
    rng.Replace what:=src, Replacement:=trg, lookat:=xlWhole, SearchOrder:=xlByColumns, MatchCase:=True, matchbyte:=True
End Sub
' >>> reset updates stack
Sub UpdatesReset()
    GBL_update_stack = 0
    UpdatesOn
End Sub
' >>> turn updates, events & calcs on
Sub UpdatesOn()
    If GBL_update_stack > 0 Then GBL_update_stack = GBL_update_stack - 1
    If GBL_update_stack < 1 Then
        Application.Calculation = xlCalculationAutomatic
        Application.ScreenUpdating = True
        Application.EnableEvents = True
    End If
End Sub
' >>> turn updates, events & calcs off
Sub UpdatesOff()
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    GBL_update_stack = GBL_update_stack + 1
End Sub
' >>> shift focus to shown column
Sub ShiftColumnFocus(rng As Range)
    Dim cl As Range
    Set cl = Intersect(Range(rng.Address).EntireColumn, ActiveCell.EntireRow)
    cl.Select
    Set cl = Intersect(Range(rng.Address).Cells(1).EntireColumn, ActiveCell.EntireRow)
    cl.Select
End Sub
' >>> test if any cell in a multy area range intersect with another range
Function TestIn(tst As Range, rng As Range) As Boolean
    Dim ar As Range, cl As Range
    TestIn = False
    For Each ar In tst.Areas
        Set cl = Intersect(rng, ar)
        If Not (cl Is Nothing) Then TestIn = True
    Next
End Function
' >>> validate an ID number
Function IsValidIdNo(ByVal id As String) As Boolean
    Dim b As Integer, i As Integer, s As Integer, n As Integer
    IsValidIdNo = False
    If Len(id) = 0 Then IsValidIdNo = True
    If Len(id) = 9 Then
        b = Int(Right(id, 1))
        s = 0
        For i = 1 To 8
            n = Int(Mid(id, i, 1)) * (2 - (i Mod 2))
            s = s + n
            If n > 9 Then s = s - 9
        Next
        n = str(10 - Int(Right(str(s), 1)))
        If n = 10 Then n = 0
        If b = n Then IsValidIdNo = True
    End If
End Function
' >>> validate a phone number
Function IsValidPhone(ByVal phone As String) As Boolean
    Dim pre As String, num As String
    IsValidPhone = False
    If phone = "" Then IsValidPhone = True
    If InStr(phone, "-") > 1 Then
        pre = Left(phone, InStr(phone, "-") - 1)
        num = Mid(phone, InStr(phone, "-") + 1)
        If Len(num) = 7 Then
            If Len(pre) > 1 And Len(pre) < 4 Then
                If Left(pre, 1) = "0" Then
                    If IsNumeric(pre) And IsNumeric(num) Then IsValidPhone = True
                End If
            End If
        End If
    End If
End Function
' >>> trim last [n] segments of a string
Function TrimStr(s As String, n As Integer)
    TrimStr = Trim(s)
    Do While n > 0
        TrimStr = Trim(Left(TrimStr, InStrRev(TrimStr, " ")))
        n = n - 1
    Loop
End Function
' >>> convert a string to an integer
Function ConvInt(x As String, n As Integer) As Integer
    ConvInt = n
    If IsNumeric(x) Then ConvInt = CInt(x)
End Function
' >>> convert a string to a long integer
Function ConvLong(x As String, n As Integer) As Long
    ConvLong = n
    If IsNumeric(x) Then ConvLong = CLng(x)
End Function
' >>> delete content and color format of a range
Sub CleanRange(rng As Range)
    rng.ClearContents
    rng.Interior.ColorIndex = xlNone
    rng.Font.ColorIndex = xlAutomatic
End Sub
' >>> get value at ranges intersection as string
Function InterVal(r1 As Range, r2 As Range) As String
    Dim rng As Range
    Dim res As String
    Set rng = Intersect(r1, r2)
    res = "err"
    If Not IsError(rng) Then res = rng.Value2
    InterVal = res
End Function
' >>> convert a range to a string array
Public Function RangeToStrArr(rng As Range) As String()
    Dim arr() As String
    Dim cl As Range
    Dim ind As Integer
    ind = 0
    For Each cl In rng
        If Trim(cl) <> "" Then ind = ind + 1
    Next
    If ind > 0 Then
        ReDim arr(ind - 1)
        ind = 0
        For Each cl In rng
            If Trim(cl) <> "" Then
                arr(ind) = Trim(cl)
                ind = ind + 1
            End If
        Next
    End If
    RangeToStrArr = arr
End Function
' >>> create a unique array of strings from a range
Public Function MakeUniqueArray(rng As Range) As String()
    Dim cnt As Integer, ind As Integer
    Dim arr() As String, txt As String
    Dim ex As Boolean
    Dim cl As Range
    cnt = -1
    For Each cl In rng
        txt = Trim(cl.Value)
        If txt <> "" Then
            ex = False
            For ind = 0 To cnt
                If arr(ind) = txt Then
                    ex = True
                    Exit For
                End If
            Next ind
            If Not ex Then
                cnt = cnt + 1
                ReDim Preserve arr(cnt)
                arr(cnt) = txt
            End If
        End If
    Next
    SortStrArray arr, "a"
    MakeUniqueArray = arr
End Function
' >>> sort a string array
Public Sub SortStrArray(arr() As String, ord As String)
    Dim i As Integer, e As Boolean
    Dim x As String
    If Not IsStringArrayEmpty(arr) Then
        e = True
        Do While e
            e = False
            For i = 0 To UBound(arr) - 1
                If ord = "d" Then
                    If arr(i) < arr(i + 1) Then
                        x = arr(i)
                        arr(i) = arr(i + 1)
                        arr(i + 1) = x
                        e = True
                    End If
                Else
                    If arr(i) > arr(i + 1) Then
                        x = arr(i)
                        arr(i) = arr(i + 1)
                        arr(i + 1) = x
                        e = True
                    End If
                End If
            Next i
        Loop
    End If
End Sub
' >>> check if an array of strings is empty
Public Function IsStringArrayEmpty(arr() As String) As Boolean
    IsStringArrayEmpty = (Len(Join(arr)) < 1)
End Function
' >>> returns a "yyyy-yy" proper school year based on current date
Public Function GetSchoolYear() As String
    Dim m As Integer, y As Integer, z As Integer
    y = year(Now())
    m = Month(Now())
    If m < 8 Then y = y - 1
    z = y - 2000 + 1
    GetSchoolYear = CStr(y) + "-" + CStr(z)
End Function
' >>> returns a unique ID string
Public Function GetUniqueID() As String
    Dim y As Integer, m As Integer, d As Integer
    Dim n As Long, x As String
    y = year(Now()) - 2000
    m = Month(Now()) - 1
    d = day(Now()) - 1
    n = 100 * Timer()
    x = Hex(n)
    x = Right("000000" + x, 6)
    n = 400 * y + 32 * m + d
    x = Hex(n) + x
    GetUniqueID = x
End Function
' >>> checks for existence of any of the substrings in a string
Public Function InstrAny(str As String, sbs As String, Optional spl As String = " ") As Boolean
    Dim arr() As String, i As Integer
    InstrAny = False
    arr = Split(sbs, spl)
    For i = LBound(arr) To UBound(arr)
        If InStr(str, arr(i)) > 0 Then InstrAny = True
    Next i
End Function
' >>> checks for existence of all of the substrings in a string
Public Function InstrAll(str As String, sbs As String, Optional spl As String = " ") As Boolean
    Dim arr() As String, i As Integer
    InstrAll = False
    If sbs <> "" Then
        InstrAll = True
        arr = Split(sbs, spl)
        For i = LBound(arr) To UBound(arr)
            If InStr(str, arr(i)) = 0 Then InstrAll = False
        Next i
    End If
End Function
' >>> returns char position which isn't in [chars]
'       str     = string to search in
'       chars   = characters to search for
'       [pos]   = position to start looking from
'       returns unrecognized char position or string length + 1 if all good
Public Function NotInStr(str As String, chars As String, Optional pos As Long = 1) As Long
    Dim arr() As String, i As Long, j As Long, q As Boolean
    i = pos
    Do While i <= Len(str)
        q = False
        j = 1
        Do While j <= Len(chars) And Not q
            If Mid(str, i, 1) = Mid(chars, j, 1) Then q = True
            j = j + 1
        Loop
        If Not q Then Exit Do
        i = i + 1
    Loop
    NotInStr = i
End Function
' >>> returns last occurence of a substring in string
'       str     = string to search in
'       sbs     = substring to search for
'       [pos]   = position to start looking from
'       returns position or 0 if not found
Public Function InLastStr(str As String, sbs As String, Optional pos As Long = 1) As Long
    Dim p As Long
    InLastStr = 0
    p = InStr(pos, str, sbs)
    Do While p > 0
        InLastStr = p
        p = InStr(InLastStr + 1, str, sbs)
    Loop
End Function
' >>> count number of occurrences of substring withing string
Public Function StringCountSubstrings(str, sbs) As Integer
    Dim c As Integer, p As Integer
    c = 0
    p = 1
    Do While p > 0
        p = InStr(p, str, sbs)
        If p > 0 Then
            c = c + 1
            p = p + 1
        End If
    Loop
    StringCountSubstrings = c
End Function
' >>> return focus to the worksheet
Public Sub SheetFocus()
    If Not GBL_new_year_on Then
        If VerCheck Then
            AppActivate ThisWorkbook.Application.Caption
        Else
            AppActivate ThisWorkbook.Application
        End If
    End If
End Sub
' >>> determine if current excel workbook has focus
Function IsFocus() As Boolean
    IsFocus = (ThisWorkbook.FullName = ActiveWorkbook.FullName)
End Function
' >>> reference a worksheet by its codename
Function GetSheetByCodename(ByVal cd As String) As Worksheet
    Dim wb As Workbook
    Dim i As Long
    Set GetSheetByCodename = Nothing
    Set wb = ThisWorkbook
    For i = 1 To wb.Worksheets.count
        If wb.Worksheets(i).CodeName = cd Then
            Set GetSheetByCodename = wb.Worksheets(i)
            Exit Function
        End If
    Next i
End Function
' >>> return sheet (nm) if it's different than current
Public Function SheetFix(cd As String) As Worksheet
    Set SheetFix = Nothing
    If ActiveSheet.CodeName <> cd Then
        Set SheetFix = ActiveSheet
        GetSheetByCodename(cd).Activate
    End If
End Function
' >>> remove all none alphanumeric characters from a string
Public Function StrClean(str As String) As String
    Dim i As Integer
    StrClean = ""
    For i = 1 To Len(str)
        If InStr("אבגדהוזחטיכלמנסעפצקרשת0123456789ךםןףץ ", Mid(str, i, 1)) > 0 Then StrClean = StrClean + Mid(str, i, 1)
    Next i
End Function
' >>> remove all none numeric characters from a string
Public Function StrCleanNum(str As String) As String
    Dim i As Integer
    StrCleanNum = ""
    For i = 1 To Len(str)
        If InStr("0123456789", Mid(str, i, 1)) > 0 Then StrCleanNum = StrCleanNum + Mid(str, i, 1)
    Next i
End Function
' >>> checks if excel version is 2013 or greater
Public Function VerCheck() As Boolean
    VerCheck = False
    If Application.Version >= 14 Then VerCheck = True
End Function
' >>> set current work file version info
Public Sub SetFileVerInfo()
    Dim yy As Integer, mm As Integer, dd As Integer
    Dim file As String
    Dim p As Integer
    GBL_file_date = ""
    GBL_file_ver = ""
    file = ThisWorkbook.name
    p = InStr(file, " 20")
    If p > 0 Then
        GBL_file_date = Mid(file, p + 1, 10)
        yy = ConvInt(Left(GBL_file_date, 4), -1)
        mm = ConvInt(Mid(GBL_file_date, 6, 2), -1)
        dd = ConvInt(Right(GBL_file_date, 2), -1)
        If yy > 2000 And yy < 2100 And mm > 0 And mm < 13 And dd > 0 And dd < 32 Then
            p = InStr(p + 10, file, " v")
            If p > 0 Then
                GBL_file_ver = Mid(file, p + 2, 99) + "."
                GBL_file_ver = Left(GBL_file_ver, NotInStr(GBL_file_ver, "0123456789") - 1)
            End If
        Else
            GBL_file_date = ""
        End If
    End If
End Sub
' >>> check for the existence of a specific key in a collection
Public Function keyExists(coll As Collection, key As String) As Boolean
    On Error Resume Next: keyExists = IsObject(coll(key)) Or True
End Function
' >>> returns a string with kids who's class assignment has changed this week
Public Function GetAssChangedThisWeek() As String
    Dim rng As Range, row As Range, res As String
    Dim c_dt As Integer, c_gr As Integer, c_kd As Integer
    Dim v_dt As String, v_gr As String, v_kd As String
    Dim frd As String, dy As Integer, xx As String
    dy = Weekday(Now(), vbFriday)
    dy = IIf(dy = 1, 0, 8 - dy) - 7
    frd = Format(DateAdd("d", dy, Now()), "yyyy/mm/dd")
    c_dt = Range(GRN_cng_date).Column
    c_gr = Range(GRN_cng_grade).Column
    c_kd = Range(GRN_cng_kid).Column
    Set rng = Range(GRN_cng_body).Rows
    res = ""
    For Each row In rng
        v_dt = row.EntireRow.Cells(1, c_dt).Text
        v_dt = Right(v_dt, 4) & "/" & Mid(v_dt, 4, 2) & "/" & Left(v_dt, 2)
        v_gr = row.EntireRow.Cells(1, c_gr).Text
        v_kd = row.EntireRow.Cells(1, c_kd).Text
        If v_dt >= frd Then
            xx = "{" & v_gr & " - " & v_kd & "}"
            If InStr(res, xx) < 1 Then res = res + xx
        End If
    Next
    GetAssChangedThisWeek = res
End Function
' >>> get kids data by filter type
'       a = all kids
'       s = only kids in shachaf
'       f = only filtered kids
'       c = only kids who's class assignment has changed this week
Public Function GetKidsDataByFilter(typ As String) As String()
    Dim rng As Range, row As Range, str() As String, kid As String
    Dim w_cng As String, hdd As Boolean, cng As Boolean, use As Boolean
    Dim c_hrs As Integer, c_id As Integer, c_grd As Integer, c_lst As Integer, c_fst As Integer, c_gnd As Integer, c_dbr As Integer, c_age As Integer, c_kph As Integer, c_mnm As Integer, c_fnm As Integer, c_mph As Integer, c_fph As Integer, c_cl1 As Integer, c_cl2 As Integer, c_cl3 As Integer, c_cl4 As Integer
    Dim v_hrs As String, v_id As String, v_grd As String, v_lst As String, v_fst As String, v_gnd As String, v_dbr As String, v_age As String, v_kph As String, v_mnm As String, v_fnm As String, v_mph As String, v_fph As String, v_cl1 As String, v_cl2 As String, v_cl3 As String, v_cl4 As String
    Dim ind As Integer, places As String, hours As String
    ind = 0
' define columns cell position
    c_hrs = Range(GRN_ppl_hours).Column
    c_id = Range(GRN_ppl_id).Column
    c_grd = Range(GRN_ppl_grd_data).Column
    c_lst = Range(GRN_ppl_name_last).Column
    c_fst = Range(GRN_ppl_name_first).Column
    c_gnd = Range(GRN_ppl_gender).Column
    c_dbr = Range(GRN_ppl_birth_date).Column
    c_age = Range(GRN_ppl_kid_age).Column
    c_kph = Range(GRN_ppl_kid_phone).Column
    c_mnm = Range(GRN_ppl_mom_nm).Column
    c_fnm = Range(GRN_ppl_dad_nm).Column
    c_mph = Range(GRN_ppl_mom_phm).Column
    c_fph = Range(GRN_ppl_dad_phm).Column
    c_cl1 = Range(GRN_ppl_class_1).Column
    c_cl2 = Range(GRN_ppl_class_2).Column
    c_cl3 = Range(GRN_ppl_class_3).Column
    c_cl4 = Range(GRN_ppl_class_4).Column
' get changed kids
    w_cng = IIf(typ = "c", GetAssChangedThisWeek(), "")
' get places string
    places = GetClassPlacesArray()
    hours = GetClassHoursArray()
' loop all kids
    Set rng = Range(GRN_ppl_all_data).Rows
    For Each row In rng
        hdd = row.Hidden
        v_hrs = CStr(row.EntireRow.Cells(1, c_hrs).Value)
        v_grd = row.EntireRow.Cells(1, c_grd).Value
        v_lst = row.EntireRow.Cells(1, c_lst).Value
        v_fst = row.EntireRow.Cells(1, c_fst).Value
        cng = (InStr(w_cng, v_grd & " - " & v_lst & " " & v_fst) > 0)
        use = (typ = "a")
        If typ = "s" And v_hrs > "0" Then use = True
        If typ = "f" And Not hdd Then use = True
        If typ = "c" And cng And v_hrs > "0" Then use = True
        If v_grd = "" Or v_fst = "" Or v_lst = "" Then use = False
        If use Then
            v_id = row.EntireRow.Cells(1, c_id).Value
            v_gnd = row.EntireRow.Cells(1, c_gnd).Value
            v_dbr = Format(row.EntireRow.Cells(1, c_dbr).Value, "dd/mm/yyyy")
            v_age = row.EntireRow.Cells(1, c_age).Value
            If v_age <> "" Then v_age = CStr(Round(v_age, 1))
            v_kph = row.EntireRow.Cells(1, c_kph).Value
            v_mnm = row.EntireRow.Cells(1, c_mnm).Value
            If InStr(v_mnm, " ") > 0 Then v_mnm = Trim(Left(v_mnm, InStr(v_mnm, " ")))
            v_fnm = row.EntireRow.Cells(1, c_fnm).Value
            If InStr(v_fnm, " ") > 0 Then v_fnm = Trim(Left(v_fnm, InStr(v_fnm, " ")))
            v_mph = row.EntireRow.Cells(1, c_mph).Value
            v_fph = row.EntireRow.Cells(1, c_fph).Value
            v_cl1 = GetRawClassName(row.EntireRow.Cells(1, c_cl1).Value)
            v_cl2 = GetRawClassName(row.EntireRow.Cells(1, c_cl2).Value)
            v_cl3 = GetRawClassName(row.EntireRow.Cells(1, c_cl3).Value)
            v_cl4 = GetRawClassName(row.EntireRow.Cells(1, c_cl4).Value)
            kid = AddFieldToString("id", v_id)
            kid = kid & AddFieldToString("grade", v_grd)
            kid = kid & AddFieldToString("last", v_lst)
            kid = kid & AddFieldToString("first", v_fst)
            kid = kid & AddFieldToString("name", v_fst & " " & v_lst)
            kid = kid & AddFieldToString("gender", v_gnd)
            kid = kid & AddFieldToString("birth", v_dbr)
            kid = kid & AddFieldToString("age", v_age)
            kid = kid & AddFieldToString("kid_phone", v_kph)
            kid = kid & AddFieldToString("mother_name", v_mnm)
            kid = kid & AddFieldToString("mother_phone", v_mph)
            kid = kid & AddFieldToString("father_name", v_fnm)
            kid = kid & AddFieldToString("father_phone", v_fph)
            kid = kid & AddFieldToString("class_1", v_cl1)
            kid = kid & AddFieldToString("class_2", v_cl2)
            kid = kid & AddFieldToString("class_3", v_cl3)
            kid = kid & AddFieldToString("class_4", v_cl4)
            kid = kid & AddFieldToString("room_1", GetFieldFromString(places, v_cl1))
            kid = kid & AddFieldToString("room_2", GetFieldFromString(places, v_cl2))
            kid = kid & AddFieldToString("room_3", GetFieldFromString(places, v_cl3))
            kid = kid & AddFieldToString("room_4", GetFieldFromString(places, v_cl4))
            kid = kid & AddFieldToString("len_1", GetFieldFromString(hours, v_cl1))
            kid = kid & AddFieldToString("len_2", GetFieldFromString(hours, v_cl2))
            kid = kid & AddFieldToString("len_3", GetFieldFromString(hours, v_cl3))
            kid = kid & AddFieldToString("len_4", GetFieldFromString(hours, v_cl4))
            ReDim Preserve str(ind)
            str(ind) = kid
            ind = ind + 1
        End If
    Next
    GetKidsDataByFilter = str
End Function
' >>> add a field into a data string
Public Function AddFieldToString(f As String, v As String) As String
    AddFieldToString = "{" & f & ":" & Replace(Replace(v, "{", "(|"), "}", "|)") & "}"
End Function
' >>> get a field from a data string
Public Function GetFieldFromString(s As String, f As String) As String
    Dim p As Long
    GetFieldFromString = ""
    p = InStr(s, "{" & f & ":")
    If p > 0 Then
        GetFieldFromString = Mid(s, p + Len(f) + 2, Len(s))
        GetFieldFromString = Left(GetFieldFromString, InStr(GetFieldFromString, "}") - 1)
        GetFieldFromString = Replace(GetFieldFromString, "(|", "{")
        GetFieldFromString = Replace(GetFieldFromString, "|)", "}")
    End If
End Function
' >>> trim hours and grades off a class name
Public Function GetRawClassName(nm As String) As String
    Dim no As String
    no = Range(GRN_def_no_participation).Text
    GetRawClassName = nm
    If nm <> no Then GetRawClassName = TrimStr(nm, 2)
End Function
' >>> get grades part of a class name
Public Function GetGradesPart(nm As String) As String
    Dim x As String
    x = GetRawClassName(nm)
    x = Trim(Replace(nm, x, ""))
    If x <> "" Then x = Trim(Left(x, InStr(x & " ", " ") - 1))
    GetGradesPart = x
End Function
' >>> returns a data string with class_#=place for all classes
Public Function GetClassPlacesArray() As String
    Dim rng As Range, row As Range
    Dim res As String, cls As String, plc As String
    Dim i As Integer, x As String
    Set rng = Range(GRN_cls_all_data).Rows
    res = ""
    For Each row In rng
        cls = Trim(row.EntireRow.Cells(1, Range(GRN_cls_all_classes).Column).Text)
        plc = Trim(row.EntireRow.Cells(1, Range(GRN_cls_room).Column).Text)
        For i = 1 To 4
            x = Trim(row.EntireRow.Cells(1, Range(GRN_cls_room & "_" & CStr(i)).Column).Value)
            If x = "" Then x = plc
            res = res & AddFieldToString(cls, x)
        Next i
    Next
    GetClassPlacesArray = res
End Function
' >>> returns a data string with class_#=hour-len for all classes
Public Function GetClassHoursArray() As String
    Dim rng As Range, row As Range
    Dim res As String, cls As String, hrs As String
    Dim i As Integer, x As String
    Set rng = Range(GRN_cls_all_data).Rows
    res = ""
    For Each row In rng
        cls = Trim(row.EntireRow.Cells(1, Range(GRN_cls_all_classes).Column).Text)
        hrs = Trim(row.EntireRow.Cells(1, Range(GRN_cls_length).Column).Text)
        For i = 1 To 4
            x = Trim(row.EntireRow.Cells(1, Range(GRN_cls_length & "_" & CStr(i)).Column).Value)
            If x = "" Then x = hrs
            res = res & AddFieldToString(cls, x)
        Next i
    Next
    GetClassHoursArray = res
End Function
' >>> get hebrew school year for a gregorian year (range 2020-2050)
Public Function GetHebrewYear(yr As Integer)
    Dim years
    years = Array("תש""ף", "תשפ""א", "תשפ""ב", "תשפ""ג", "תשפ""ד", "תשפ""ה", "תשפ""ו", "תשפ""ז", "תשפ""ח", "תשפ""ט", "תש""ץ", "תשצ""א", "תשצ""ב", "תשצ""ג", "תשצ""ד", "תשצ""ה", "תשצ""ו", "תשצ""ז", "תשצ""ח", "תשצ""ט", "ת""ת", "תת""א", "תת""ב", "תת""ג", "תת""ד", "תת""ה", "תת""ו", "תת""ז", "תת""ח", "תת""ט", "תת""י", "תתי""א")
    GetHebrewYear = "????"
    If yr > 2019 Or yr < 2051 Then GetHebrewYear = years(yr - 2019)
End Function
' >>> go to the bottom of a range
Public Sub GoToListBottom(rng As Range)
    Dim i As Integer
    i = rng.Rows.count
    While (i > 1 And Trim(rng.Cells(i)) = "")
        i = i - 1
    Wend
    rng.Cells(i).Activate
    SheetFocus
End Sub
' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
' >>> make a range of values string into a proper values delimited string
Public Function RStrToVals(rvl As String) As String
    Dim n1 As Integer, n2 As Integer, nn As Integer
    Dim arr() As String, xx As String
    Dim val As Variant
    RStrToVals = ""
    arr = Split(rvl, ",")
    For Each val In arr
        If InStr(val, "-") > 0 Then
            n1 = CInt(Left(val, InStr(val, "-") - 1))
            n2 = CInt(Mid(val, InStr(val, "-") + 1, 99))
            For nn = n1 To n2
                xx = ",[" + CStr(nn) + "]"
                If InStr(RStrToVals, xx) = 0 Then RStrToVals = RStrToVals + xx
            Next nn
        Else
            xx = ",[" + val + "]"
            If InStr(RStrToVals, xx) = 0 Then RStrToVals = RStrToVals + xx
        End If
    Next
End Function
' >>> return the "from" or "to" part of a value range
Public Function StrRngToVal(val As String, prt As String, Optional lbd As Integer = 0, Optional ubd As Integer = 100) As Integer
    Dim p As Integer, f As String, t As String
    p = InStr(val, "-")
    If p > 0 Then
        f = Trim(Left(val, p - 1))
        If f = "" Then f = lbd
        t = Trim(Mid(val, p + 1, Len(val)))
        If t = "" Then t = ubd
    Else
        f = val
        t = val
    End If
    StrRngToVal = IIf(prt = "t", ConvInt(t, 0), ConvInt(f, 0))
End Function
' >>> ensure that the backup directory exists
Public Sub MakeBackupFolder(fld As String)
    Dim dr As String
    If fld <> "" Then
        dr = ActiveWorkbook.path + "/" + fld
        If dr <> "" Then
            If Len(dir(dr, vbDirectory)) = 0 Then
                On Error GoTo 0
                MkDir dr
            End If
        End If
    End If
End Sub
' >>> build a pasport photo file name from an ID
Public Function MakePasportPhoto(x As String) As String
    Dim id As String, fl As String
    id = Trim(x)
    If Len(id) < 9 Then id = "000000000" & id
    If Len(id) > 9 Then id = Right(id, 9)
    fl = Trim(Range(GRN_def_img_dir))
    If Right(fl, 1) <> "\" Then fl = fl & "\"
    fl = fl & id & ".jpg"
    MakePasportPhoto = fl
End Function
' >>> init integrity checks
Public Sub initIntegrityChecks()
    Dim rng As Range
    Set rng = Range(GRN_ppl_edge)
    GBL_int_ppl = rng.Address
    Set rng = Range(GRN_cls_edge)
    GBL_int_cls = rng.Address
    Set rng = Range(GRN_grd_edge)
    GBL_int_grd = rng.Address
End Sub
' >>> undo integrity changes if not in developement mode
Public Function UndoIntegrityChanges() As Boolean
    UndoIntegrityChanges = False
    If Range(GRN_def_development) = CN_no Then
        MsgBox "אסור להוסיף/למחוק פה עמודות/שורות - הפעולה תבוטל"
        UpdatesOff
        Application.Undo
        UpdatesOn
        UndoIntegrityChanges = True
    Else
        initIntegrityChecks
    End If
End Function
' >>> hide all panels
Public Sub HideAllPanels()
    Dim cnt As Object
    If Not GBL_new_year_on Then
        For Each cnt In VBA.UserForms
            If cnt.Visible Then cnt.hide
        Next
    End If
End Sub
' >>> check if there are merged cells on forbbiden ranges
Public Sub CheckUnallowedMerges()
    Dim rng As Range
    Set rng = Range(GRN_ppl_all_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_cls_all_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_grd_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_event_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_wait_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_payment_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_stf_data)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
    Set rng = Range(GRN_cng_body)
    If IsNull(rng.MergeCells) Then CancelMergedArea GetMergedAddress(rng)
End Sub
' >>> get merged address in a range
Public Function GetMergedAddress(rng As Range) As Range
    Dim row As Range, cll As Range, adr As String
    Set GetMergedAddress = Nothing
    For Each row In rng
        For Each cll In row
            If cll.MergeCells Then
                Set GetMergedAddress = cll
                Exit Function
            End If
        Next
    Next
End Function
' >>> cancel a merged area and show message
Public Function CancelMergedArea(rng As Range)
    Dim txt As String
    If Not rng Is Nothing Then
        If rng.MergeCells Then
            txt = Split(rng.Address(False, False, xlA1, True), "]")(1)
            PanelVersion.ShowMsg "מיזוג תאים במקום אסור בוטל !!!", txt
            rng.UnMerge
        End If
    End If
End Function
' >>> copy none adjacent formulas
Public Function CopyNJFormulas(src As Range, trg As Range)
    Dim rng As Range
    Dim c As Integer, i As Integer
    c = src.Areas.count
    For i = 1 To c
        Set rng = src.Areas.Item(i)
        rng.Copy ' copy formulas
        trg.Areas.Item(i).PasteSpecial xlPasteFormulas
    Next i
End Function


Attribute VB_Name = "ModuleGrades"
Option Explicit
' >>> range definitions
Private Const MN_grade = "menu_grade"
Private Const MN_level = "menu_level"
Private Const RNG_data = "grade_data"
Private Const RNG_levels = "grade_levels"
Private Const RNG_pupil_grades = "pupils_grade"
' >>> fix any changes in grade items and propagate to pupils table
Sub RebuildGrades(Target As Range)
    Dim ar As Range, cl As Range, tmp As Range
    Dim lv As String
    On Error Resume Next
    AskReset
    For Each ar In Target.Areas ' loop all range areas
        Set tmp = Intersect(Range(RNG_data), ar)
        If Not (tmp Is Nothing) Then ' loop all rows in classes range
            For Each cl In tmp.Rows
                lv = Cells(cl.row, Range(RNG_levels).Column) ' get grade level
                RebuildGrade 1, cl.row, lv ' fix grade #1
                RebuildGrade 2, cl.row, lv ' fix grade #2
                RebuildGrade 3, cl.row, lv ' fix grade #3
                RebuildGrade 4, cl.row, lv ' fix grade #4
                RebuildGrade 5, cl.row, lv ' fix grade #5
            Next
        End If
    Next
    AskReset
End Sub
' >>> fix a specific class item and propagate to pupils table
Function RebuildGrade(no As Integer, rw As Integer, lv As String)
    Dim nm_old As String, nm_new As String
    Dim name As String
    Dim cl As Range
    Dim non As Boolean
    nm_new = ""
    Select Case no
        Case 1
            Set cl = Range(Cells(rw, Range(GRN_grd_full & "1").Column).Address)
            name = Trim(Cells(rw, Range(GRN_grd_name & "1").Column))
        Case 2
            Set cl = Range(Cells(rw, Range(GRN_grd_full & "2").Column).Address)
            name = Trim(Cells(rw, Range(GRN_grd_name & "2").Column))
        Case 3
            Set cl = Range(Cells(rw, Range(GRN_grd_full & "3").Column).Address)
            name = Trim(Cells(rw, Range(GRN_grd_name & "3").Column))
        Case 4
            Set cl = Range(Cells(rw, Range(GRN_grd_full & "4").Column).Address)
            name = Trim(Cells(rw, Range(GRN_grd_name & "4").Column))
        Case 5
            Set cl = Range(Cells(rw, Range(GRN_grd_full & "5").Column).Address)
            name = Trim(Cells(rw, Range(GRN_grd_name & "5").Column))
    End Select
    If lv <> "" And name <> "" Then
        nm_new = Trim(lv) + " " + Trim(name)
    End If
    nm_old = Trim(cl.Cells(1))
    If nm_old <> nm_new Then
        If AskPrevRes() <> "s" Then non = RenameGrade(nm_old, nm_new)
        cl.Cells(1) = nm_new
    End If
End Function
' >>> rename a grade name in pupils sheet
Function RenameGrade(src As String, trg As String) As Boolean
    Dim tx As String, act As String
    RenameGrade = False
    If src <> "" Then
        If FindVal(Range(RNG_pupil_grades).EntireColumn, src) Then
            If Range("defs_grade_ren_ask") = CN_no Then act = "y" Else act = "n"
            If trg <> "" Then ' replace
                tx = "האם לשנות את כל המופעים של" + vbCr + "[" + src + "]" + vbCr + "לערך" + vbCr + "[" + trg + "]"
            Else ' delete
                tx = "האם למחוק את כל המופעים של" + vbCr + "[" + src + "]" + vbCr + "מטבלת התלמידים"
            End If
            If act = "n" Then
                act = AskDialog(tx)
            End If
            If act = "y" Then
                ChangeVal Range(RNG_pupil_grades).EntireColumn, src, trg
                RenameGrade = True
            End If
        End If
    End If
End Function
' >>> rebuild the grade menu
Sub MakeGradeMenu()
    Dim cl As Range, cnm As Range
    Dim rng_g As Range, rng_l As Range
    Dim idx_g As Integer, idx_l As Integer
    Dim ref_g As String, ref_l As String
' get original menu ranges and trim to sheet ref only
    ref_g = ThisWorkbook.Names.Item(MN_grade).RefersTo
    ref_g = Left(ref_g, InStr(ref_g, "!"))
    ref_l = ThisWorkbook.Names.Item(MN_level).RefersTo
    ref_l = Left(ref_l, InStr(ref_l, "!"))
' get and clear old menu ranges
    Set rng_g = Range(MN_grade).Cells(1)
    Set rng_l = Range(MN_level).Cells(1)
    Range(MN_grade).ClearContents
    Range(MN_level).ClearContents
' set list position
    idx_g = 0
    idx_l = 0
' loop levels
    For Each cl In Range(RNG_levels)
        If cl.Text <> "" Then
' add level item to levels menu
            rng_l.Offset(idx_l) = cl.Text
            idx_l = idx_l + 1
' handle 1st grade name
            Set cnm = Intersect(Range(GRN_grd_name & "1").EntireColumn, cl.EntireRow)
            If cnm <> "" Then
                rng_l.Offset(idx_l) = "   " + cl.Text + " " + cnm.Text ' add level menu item
                idx_l = idx_l + 1
                rng_g.Offset(idx_g) = cl.Text + " " + cnm.Text ' add grade menu item
                idx_g = idx_g + 1
            End If
' handle 2nd grade name
            Set cnm = Intersect(Range(GRN_grd_name & "2").EntireColumn, cl.EntireRow)
            If cnm <> "" Then
                rng_l.Offset(idx_l) = "   " + cl.Text + " " + cnm.Text ' add level menu item
                idx_l = idx_l + 1
                rng_g.Offset(idx_g) = cl.Text + " " + cnm.Text ' add grade menu item
                idx_g = idx_g + 1
            End If
' handle 3rd grade name
            Set cnm = Intersect(Range(GRN_grd_name & "3").EntireColumn, cl.EntireRow)
            If cnm <> "" Then
                rng_l.Offset(idx_l) = "   " + cl.Text + " " + cnm.Text ' add level menu item
                idx_l = idx_l + 1
                rng_g.Offset(idx_g) = cl.Text + " " + cnm.Text ' add grade menu item
                idx_g = idx_g + 1
            End If
' handle 4th grade name
            Set cnm = Intersect(Range(GRN_grd_name & "4").EntireColumn, cl.EntireRow)
            If cnm <> "" Then
                rng_l.Offset(idx_l) = "   " + cl.Text + " " + cnm.Text ' add level menu item
                idx_l = idx_l + 1
                rng_g.Offset(idx_g) = cl.Text + " " + cnm.Text ' add grade menu item
                idx_g = idx_g + 1
            End If
' handle 5th grade name
            Set cnm = Intersect(Range(GRN_grd_name & "5").EntireColumn, cl.EntireRow)
            If cnm <> "" Then
                rng_l.Offset(idx_l) = "   " + cl.Text + " " + cnm.Text ' add level menu item
                idx_l = idx_l + 1
                rng_g.Offset(idx_g) = cl.Text + " " + cnm.Text ' add grade menu item
                idx_g = idx_g + 1
            End If
        End If
    Next
' set new menu ranges
    ref_g = ref_g + Range(MN_grade).Cells(1).Address + ":" + rng_g.Offset(idx_g - 1).Address
    ThisWorkbook.Names.Item(MN_grade).RefersTo = ref_g
    ref_l = ref_l + Range(MN_level).Cells(1).Address + ":" + rng_l.Offset(idx_l - 1).Address
    ThisWorkbook.Names.Item(MN_level).RefersTo = ref_l
' reset drop boxes
    ControlGrades.GradeNewName.RowSource = MN_grade
End Sub
' >>> check if 6th graders exist in pupils table
Public Function Any6thGraders() As Boolean
    Dim rng As Range, cl As Range
    Set rng = Range(GRN_ppl_grd_data)
    Any6thGraders = False
    For Each cl In rng
        If Left(Trim(cl.Value), 2) = "ו'" Then
            Any6thGraders = True
            Exit For
        End If
    Next
End Function
' >>> delete all 6th graders from pupils table
Sub Del6thGraders()
    Dim rng As Range, cl As Range, kds As Range
    Set rng = Range(GRN_ppl_grd_data)
    Set kds = Nothing
    For Each cl In rng
        If Left(Trim(cl.Value), 2) = "ו'" Then
            If kds Is Nothing Then
                Set kds = cl
            Else
                Set kds = Union(kds, cl)
            End If
        End If
    Next
    Set rng = Intersect(kds.EntireRow, Range(GRN_ppl_clear))
    If Not (rng Is Nothing) Then
        UpdatesOff
        CleanRange rng
        UpdatesOn
    End If
End Sub
' >>> delete all 6th grade names from grades table
Sub Del6thGrade()
    Dim rng As Range, cl As Range
    For Each cl In Range(GRN_grd_levels)
        If cl.Value = "ו'" Then
            Set rng = cl.EntireRow
            Set cl = Intersect(rng, Range(GRN_grd_name & "1").EntireColumn)
            cl.Value = ""
            Set cl = Intersect(rng, Range(GRN_grd_name & "2").EntireColumn)
            cl.Value = ""
            Set cl = Intersect(rng, Range(GRN_grd_name & "3").EntireColumn)
            cl.Value = ""
            Set cl = Intersect(rng, Range(GRN_grd_name & "4").EntireColumn)
            cl.Value = ""
            Set cl = Intersect(rng, Range(GRN_grd_name & "5").EntireColumn)
            cl.Value = ""
        End If
    Next
End Sub
' >>> move all pupils one grade level up
Sub MoveGradesUp()
    Dim i As Integer, n As Integer
    Dim row As Range
    n = Range(GRN_grd_levels).count
    UpdatesOff
    For i = n To 2 Step -1
        Set row = Range(GRN_grd_levels).Cells(i - 1).EntireRow
        MoveSingleGrade row, Range(GRN_grd_name & "1").EntireColumn, Range(GRN_grd_full & "1").EntireColumn
        MoveSingleGrade row, Range(GRN_grd_name & "2").EntireColumn, Range(GRN_grd_full & "2").EntireColumn
        MoveSingleGrade row, Range(GRN_grd_name & "3").EntireColumn, Range(GRN_grd_full & "3").EntireColumn
        MoveSingleGrade row, Range(GRN_grd_name & "4").EntireColumn, Range(GRN_grd_full & "4").EntireColumn
        MoveSingleGrade row, Range(GRN_grd_name & "5").EntireColumn, Range(GRN_grd_full & "5").EntireColumn
    Next i
    UpdatesOn
    MakeGradeMenu
End Sub
' >>> move a single grade up
Sub MoveSingleGrade(row As Range, name As Range, full As Range)
    Dim lvc As String, lvn As String
    Dim nmc As String
    Dim flc As String, fln As String
    Dim cl_nc As Range, cl_fc As Range
    Dim cl_nn As Range, cl_fn As Range
    Dim nxt As Range, cl As Range
    Set nxt = row.Offset(1, 0).EntireRow
    Set cl = Intersect(row, Range(GRN_grd_levels))
    Set cl_nc = Intersect(row, name)
    Set cl_fc = Intersect(row, full)
    Set cl_nn = Intersect(nxt, name)
    Set cl_fn = Intersect(nxt, full)
    Set cl = Intersect(nxt, Range(GRN_grd_levels))
    lvc = Trim(cl.Value)
    lvn = Trim(cl.Value)
    nmc = Trim(cl_nc.Value)
    If lvc <> "" And lvn <> "" And nmc <> "" Then
        flc = Trim(cl_fc.Value)
        fln = lvn + " " + nmc
        ChangeVal Range(RNG_pupil_grades).EntireColumn, flc, fln
        cl_nn.Value = nmc
        cl_nc.Value = ""
        cl_fn.Value = fln
        cl_fc.Value = ""
    End If
End Sub
' >>> move cursor to top right
Sub GradeCorner()
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet3" Then
        Cells(1, 2).Select
        Cells(1, 1).Select
    End If
End Sub


Attribute VB_Name = "ModulePupils"
Option Explicit
' >>> range definitions
Private Const RNG_save = "pupils_filter_save"
Private Const RNG_data = "pupils_data"
Private Const RNG_name_l = "pupils_name_last"
Private Const RNG_name_f = "pupils_name_first"
Private Const RNG_grade = "pupils_grade"
Private Const RNG_cls_1 = "pupils_class_1"
Private Const RNG_cls_2 = "pupils_class_2"
Private Const RNG_cls_3 = "pupils_class_3"
Private Const RNG_cls_4 = "pupils_class_4"
Private Const RNG_alt_1 = "pupils_alt_class_1"
Private Const RNG_alt_2 = "pupils_alt_class_2"
Private Const RNG_alt_3 = "pupils_alt_class_3"
Private Const RNG_alt_4 = "pupils_alt_class_4"
Private Const RNG_empty = "pupils_empty"
Private Const RNG_family = "pupils_family"
Private Const RNG_kid = "pupils_kid_number"
Private Const RNG_city = "pupils_city"
Private Const RNG_add = "pupils_address"
Private Const RNG_prob = "pupils_problems"
Private Const RNG_bday = "pupils_col_bday"
Private Const RNG_dad = "pupils_dad"
Private Const RNG_mom = "pupils_mom"
Private Const RNG_pay_typ = "pupils_pay_type"
Private Const RNG_inv = "pupils_invoice"
Sub FilterPupils(name As String, grade As String, Class As String)
    Dim cl As Range
    Dim save As String
    Dim row As Integer
    Dim hide As Boolean
    Dim cnt As Integer
    On Error Resume Next
    UpdatesOff
    save = name + grade + Class ' ignore if same filter as last
    If GBL_filter_save <> save Then
        cnt = 0
        For Each cl In Range(RNG_data).Rows ' loop rows
            hide = False
            row = cl.row
            hide = filt_name(hide, name, row, Range(RNG_name_l).Column, Range(RNG_name_f).Column)
            hide = filt_grade(hide, grade, row, Range(RNG_grade).Column)
            hide = filt_class(hide, Class, row, Range(RNG_cls_1).Column, Range(RNG_cls_2).Column, Range(RNG_cls_3).Column, Range(RNG_cls_4).Column)
            hide = filt_last(hide, row)
            cl.EntireRow.Hidden = hide
            If IsVisiblePupil(cl) Then cnt = cnt + 1
        Next
        ControlPupils.LabelCount.Caption = IIf(cnt > 0, CStr(cnt), "")
    End If
    Range("pupils_filter_class").Value = Class ' added to color filtered results
    GBL_filter_save = save ' save current filter
    UpdatesOn
End Sub
' >>> return true for a non-hidden line which is also not empty
Private Function IsVisiblePupil(row As Range) As Boolean
    Dim cl As Range
    IsVisiblePupil = False
    If Not row.Hidden Then
        Set cl = Intersect(row.EntireRow, Range(GRN_ppl_empty).EntireColumn)
        If cl.Value = 1 Then
            IsVisiblePupil = True
        End If
    End If
End Function
' >>> test name filter and return (true) if matched
Private Function filt_name(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer) As Boolean
    Dim n1 As String, n2 As String, v1 As String, v2 As String
    Dim x As String, z As String
    Dim sp As Integer, rs As Boolean
    filt_name = hide
    If InStr("!#MFSYRPEOTXIABC", Left(UCase(Trim(fl)), 1)) = 0 Then
        If fl <> "" Then
            v1 = Trim(Cells(rw, c1).Text)
            v2 = Trim(Cells(rw, c2).Text)
            v1 = StrClean(v1)
            v2 = StrClean(v2)
            x = fl & "|"
            sp = InStr(x, "|")
            rs = True
            While sp > 0
                z = Trim(Left(x, sp - 1))
                x = Trim(Mid(x, sp + 1))
                If z <> "" Then
                    If Not filt_name_sng(z, v1, v2) Then rs = False
                End If
                sp = InStr(x, "|")
            Wend
            If rs Then filt_name = True
        End If
    Else
        If fl <> "" Then filt_name = filt_special(hide, Trim(fl), rw)
    End If
End Function
' >>> test (single kid) name filter and return (true) if matched
Private Function filt_name_sng(fl, v1, v2) As Boolean
    Dim sp As Integer, n1 As String, n2 As String
    filt_name_sng = False
    sp = InStr(fl, " ")
    If sp > 0 Then ' 2 substrings in filter
        n1 = Trim(Left(fl, sp))
        n2 = Trim(Mid(fl, sp + 1))
    Else ' 1 substring in filter
        n1 = fl
        n2 = ""
    End If
    n1 = StrClean(n1)
    n2 = StrClean(n2)
    If n2 <> "" Then ' check to do if 2 substrings
        If (InStr(v1, n1) = 0 Or InStr(v2, n2) = 0) And (InStr(v2, n1) = 0 Or InStr(v1, n2) = 0) And InStr(v1, n1 + " " + n2) = 0 And InStr(v2, n1 + " " + n2) = 0 Then filt_name_sng = True
    Else ' check to do if 1 substring
        If InStr(v1, n1) = 0 And InStr(v2, n1) = 0 Then filt_name_sng = True
    End If
End Function
' >>> test for special filters
Private Function filt_special(hide As Boolean, fl As String, rw As Integer) As Boolean
    Dim cl As Range, ng As Boolean, gr As String, x As String, q As Boolean
    filt_special = hide
    ng = False
    fl = UCase(Trim(fl))
    If Left(fl, 1) = "!" Then
        fl = Mid(fl, 2, Len(fl))
        ng = True
    End If
    Select Case fl
        Case "#" ' show only active pupils
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_hours).EntireColumn)
            If cl.Value = 0 Then filt_special = True
        Case "M" ' show male pupils
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_gender).EntireColumn)
            If cl.Value <> CN_male Then filt_special = True
        Case "F" ' show female pupils
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_gender).EntireColumn)
            If cl.Value <> CN_female Then filt_special = True
        Case "S" ' show pupils with sensitivities
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_sens).EntireColumn)
            If Trim(cl.Value) = "" Then filt_special = True
        Case "Y" ' show pupils with year-current remarks
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_rem_curr).EntireColumn)
            If Trim(cl.Value) = "" Then filt_special = True
        Case "R" ' show pupils with registration remarks
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_rem_init).EntireColumn)
            If Trim(cl.Value) = "" Then filt_special = True
        Case "P" ' show pupils with pasport photo
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_id).EntireColumn)
            x = MakePasportPhoto(Trim(cl.Value))
            If dir(x) = "" Then filt_special = True
        Case "E" ' show pupils with exit school permit
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_prm_exit).EntireColumn)
            If Trim(cl.Value) <> "כן" Then filt_special = True
        Case "O" ' show pupils with photography permit
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_prm_photo).EntireColumn)
            If Trim(cl.Value) <> "כן" Then filt_special = True
        Case "T" ' show pupils with takanon
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_prm_takanon).EntireColumn)
            If Left(Trim(cl.Value), 2) <> "כן" Then filt_special = True
        Case "X" ' show pupils with class mismatch
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_grade).EntireColumn)
            gr = Left(cl.Value, 1)
            q = False
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_class_1).EntireColumn)
            x = GetGradesPart(cl.Value)
            If x <> "" And InStr(x, gr) < 1 Then q = True
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_class_2).EntireColumn)
            x = GetGradesPart(cl.Value)
            If x <> "" And InStr(x, gr) < 1 Then q = True
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_class_3).EntireColumn)
            x = GetGradesPart(cl.Value)
            If x <> "" And InStr(x, gr) < 1 Then q = True
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_class_4).EntireColumn)
            x = GetGradesPart(cl.Value)
            If x <> "" And InStr(x, gr) < 1 Then q = True
            If Not q Then filt_special = True
        Case "I" ' show only kid with issues (problems)
            Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_marks).EntireColumn)
            If cl.Value = "" Then filt_special = True
        Case Else ' show only kid with specific problems
            If InStr("ABC", UCase(Left(fl, 1))) > 0 Then
                Set cl = Intersect(Cells(rw, 1).EntireRow, Range(GRN_ppl_marks).EntireColumn)
                If InStr(cl.Value, UCase(fl)) = 0 Then filt_special = True
            End If
    End Select
    If ng Then filt_special = Not filt_special ' negate filter
End Function
' >>> test grade filter and return (true) if matched
Private Function filt_grade(hide As Boolean, fl As String, rw As Integer, cl As Integer) As Boolean
    filt_grade = hide
    If fl <> "" Then
        If Left(Cells(rw, cl).Text, Len(fl)) <> fl Then filt_grade = True
    End If
End Function
' >>> test class filter and return (true) if matched
Private Function filt_class(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer, c3 As Integer, c4 As Integer) As Boolean
    Dim p As Integer, z1 As String, z2 As String
    Dim r1 As Boolean, r2 As Boolean
    filt_class = hide
    If fl <> "" Then
        If InStr(fl, "&") > 0 Or InStr(fl, "|") > 0 Then
            p = InStr(fl, "&")
            If p > 0 Then
                z1 = Trim(Left(fl, p - 1))
                z2 = Trim(Mid(fl, p + 1, Len(fl)))
                r1 = filt_class_sub(hide, z1, rw, c1, c2, c3, c4)
                r2 = filt_class_sub(hide, z2, rw, c1, c2, c3, c4)
                If r1 = True Or r2 = True Then filt_class = True
            Else
                p = InStr(fl, "|")
                If p > 0 Then
                    z1 = Trim(Left(fl, p - 1))
                    z2 = Trim(Mid(fl, p + 1, Len(fl)))
                    r1 = filt_class_sub(hide, z1, rw, c1, c2, c3, c4)
                    r2 = filt_class_sub(hide, z2, rw, c1, c2, c3, c4)
                    If r1 = True And r2 = True Then filt_class = True
                End If
            End If
        Else
            filt_class = filt_class_sub(hide, fl, rw, c1, c2, c3, c4)
        End If
    End If
End Function
' >>> test class filter and return (true) if matched (sub check)
Private Function filt_class_sub(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer, c3 As Integer, c4 As Integer) As Boolean
    Dim x As String, z As String
    filt_class_sub = hide
    If fl <> "" Then
        z = fl
        x = Trim(Right(z, 2))
        If x = "1" Or x = "2" Or x = "3" Or x = "4" Then
            z = Trim(Left(fl, Len(fl) - 2))
                If Range(GRN_def_ppl_filt_sec) = CN_yes Then
                    Select Case x
                    Case "1"
                        If InStr(Cells(rw, c1).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_1).Column).Text, z) = 0 Then filt_class_sub = True
                    Case "2"
                        If InStr(Cells(rw, c2).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_2).Column).Text, z) = 0 Then filt_class_sub = True
                    Case "3"
                        If InStr(Cells(rw, c3).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_3).Column).Text, z) = 0 Then filt_class_sub = True
                    Case "4"
                        If InStr(Cells(rw, c4).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_4).Column).Text, z) = 0 Then filt_class_sub = True
                    End Select
                Else
                    Select Case x
                    Case "1"
                        If InStr(Cells(rw, c1).Text, z) = 0 Then filt_class_sub = True
                    Case "2"
                        If InStr(Cells(rw, c2).Text, z) = 0 Then filt_class_sub = True
                    Case "3"
                        If InStr(Cells(rw, c3).Text, z) = 0 Then filt_class_sub = True
                    Case "4"
                        If InStr(Cells(rw, c4).Text, z) = 0 Then filt_class_sub = True
                    End Select
                End If
        Else
            If Range(GRN_def_ppl_filt_sec) = CN_yes Then
                If InStr(Cells(rw, c1).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_1).Column).Text, z) = 0 And InStr(Cells(rw, c2).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_2).Column).Text, z) = 0 And InStr(Cells(rw, c3).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_3).Column).Text, z) = 0 And InStr(Cells(rw, c4).Text, z) = 0 And InStr(Cells(rw, Range(RNG_alt_4).Column).Text, z) = 0 Then filt_class_sub = True
            Else
                If InStr(Cells(rw, c1).Text, z) = 0 And InStr(Cells(rw, c2).Text, z) = 0 And InStr(Cells(rw, c3).Text, z) = 0 And InStr(Cells(rw, c4).Text, z) = 0 Then filt_class_sub = True
            End If
        End If
    End If
End Function
' >>> test for last line and make sure it's not hidden
Private Function filt_last(hide As Boolean, rw As Integer)
    filt_last = hide
    If Range(GRN_ppl_last_line).row = rw Then filt_last = False
End Function
' >>> activate user sort
Sub PupilsSort(sort As String)
    Dim pos As String, grp As String
    If InStr(sort, "(") Then sort = Trim(Left(sort, InStr(sort, "(") - 1))
    If sort <> "" Then
        grp = ""
        pos = GetCurrentKidLine()
        Select Case sort
            Case "תלמיד"
                Range(RNG_data).sort key1:=Range(RNG_grade), order1:=xlAscending, key2:=Range(RNG_name_l), order2:=xlAscending, key3:=Range(RNG_name_f), order3:=xlAscending
            Case "משפחה"
                Range(RNG_data).sort key1:=Range(RNG_empty), order1:=xlDescending, key2:=Range(RNG_family), order2:=xlAscending, key3:=Range(RNG_kid), order3:=xlAscending
                grp = "g"
            Case "יום הולדת"
                Range(RNG_data).sort key1:=Range(RNG_bday), order1:=xlAscending, key2:=Range(RNG_grade), order2:=xlAscending, key3:=Range(RNG_name_l), order3:=xlAscending
                grp = "b"
            Case "כתובת"
                Range(RNG_data).sort key1:=Range(RNG_city), order1:=xlAscending, key2:=Range(RNG_add), order2:=xlAscending
            Case "שם תלמיד בלבד"
                Range(RNG_data).sort key1:=Range(RNG_name_l), order1:=xlAscending, key2:=Range(RNG_name_f), order2:=xlAscending
            Case "חוג ראשון"
                Range(RNG_data).sort key1:=Range(RNG_cls_1), order1:=xlAscending
            Case "חוג שני"
                Range(RNG_data).sort key1:=Range(RNG_cls_2), order1:=xlAscending
            Case "חוג שלישי"
                Range(RNG_data).sort key1:=Range(RNG_cls_3), order1:=xlAscending
            Case "חוג רביעי"
                Range(RNG_data).sort key1:=Range(RNG_cls_4), order1:=xlAscending
            Case "בעיות"
                Range(RNG_data).sort key1:=Range(RNG_prob), order1:=xlAscending, key2:=Range(RNG_family), order2:=xlAscending, key3:=Range(RNG_kid), order3:=xlAscending
                Range(RNG_data).Cells(1, ActiveCell.Column).Select
            Case "שם האב"
                Range(RNG_data).sort key1:=Range(RNG_dad), order1:=xlAscending
            Case "שם האם"
                Range(RNG_data).sort key1:=Range(RNG_mom), order1:=xlAscending
            Case "סוג תשלום"
                Range(RNG_data).sort key1:=Range(RNG_pay_typ), order1:=xlAscending, key2:=Range(RNG_inv), order2:=xlAscending
            Case "מס' מנוי אקספו"
                Range(RNG_data).sort key1:=Range(RNG_inv), order1:=xlAscending
                grp = "g"
        End Select
        Range(GRN_ppl_layout).Value = grp
        If sort <> "בעיות" Then GoToKidLine pos
    End If
End Sub
' >>> get kid info as line position
Private Function GetCurrentKidLine()
    Dim cl As Range
    Dim pos As String
    pos = ""
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet1" Then
        Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_ppl_all_data).EntireColumn)
        If Not (cl Is Nothing) Then
            Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_ppl_name_last).EntireColumn)
            pos = "[" + Trim(cl.Value) + "]"
            Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_ppl_name_first).EntireColumn)
            pos = pos + ",[" + Trim(cl.Value) + "]"
            Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_ppl_grd_data).EntireColumn)
            pos = pos + ",[" + Trim(cl.Value) + "]"
        End If
    End If
    GetCurrentKidLine = pos
End Function
' >>> goto line based on kid info
Private Sub GoToKidLine(ByVal pos As String)
    Dim rng As Range, cl As Range
    Dim arr() As String
    If pos <> "" Then
        pos = Mid(pos, 2, Len(pos) - 2)
        arr = Split(pos, "],[")
        For Each rng In Range(GRN_ppl_all_data).Rows
            Set cl = Intersect(rng, Range(GRN_ppl_name_last).EntireColumn)
            If Trim(cl.Value) = arr(0) Then
                Set cl = Intersect(rng, Range(GRN_ppl_name_first).EntireColumn)
                If Trim(cl.Value) = arr(1) Then
                    Set cl = Intersect(rng, Range(GRN_ppl_grd_data).EntireColumn)
                    If Trim(cl.Value) = arr(2) Then
                        Set cl = Intersect(rng, ActiveCell.EntireColumn)
                        cl.Select
                        Exit For
                    End If
                End If
            End If
        Next
    End If
End Sub
' >>> fix focus when it's on an empty row
Sub PupilsfixFocus()
    Dim cl As Range
    Set cl = Intersect(ActiveCell.EntireRow, Range(RNG_empty).EntireColumn)
    If cl.Value = 0 Or cl.EntireRow.Hidden Then PupilsFirst
    SheetFocus
End Sub
' >>> shift focus to the first pupil
Sub PupilsFirst()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet1" Then
        Set cl = Intersect(Range(RNG_data).Cells(1).Offset(-1).EntireRow, Range(RNG_name_l).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1).Select
    End If
End Sub
' >>> follow changes in pupil's class assignments
Sub FollowClassChanges(rng As Range)
    Dim ar As Range, cl As Range, tm1 As Range, tm2 As Range
    Dim c1 As String, c2 As String
    If TestIn(rng, Range(GRN_ppl_cls_data)) Then
        For Each ar In rng.Areas ' loop all range areas
            Set tm1 = Intersect(Range(GRN_ppl_cls_data), ar)
            If Not (tm1 Is Nothing) Then ' loop all rows in relevant range
                For Each cl In tm1.Rows
                    FollowClassChangeX 1, cl.EntireRow
                    FollowClassChangeX 2, cl.EntireRow
                    FollowClassChangeX 3, cl.EntireRow
                    FollowClassChangeX 4, cl.EntireRow
                Next
            End If
        Next
    End If
End Sub
' >>> handle one class change follow-up
Sub FollowClassChangeX(no As Integer, line As Range)
    Dim c1 As String, c2 As String
    Dim rng As Range, hr As String
    Set rng = Intersect(line, Range(GRN_ppl_cls_data)).Offset(0, no - 1)
    c1 = rng.Cells(1).Text
    Set rng = Intersect(line, Range(GRN_ppl_cls_save)).Offset(0, no - 1)
    c2 = rng.Cells(1).Text
    If c1 <> c2 Then
        hr = "שעה " + Trim(str(no))
        FollowChanges line, c2, c1, hr
        rng.Cells(1) = c1
    End If
End Sub
' >>> show appropriate panels
Public Sub PupilShowPanels()
    Dim prb As Boolean
    If Not ControlPupils.Visible Then ControlPupils.Show (vbModeless)
    If ControlPupils.PupilMini.Visible Then
        prb = Range(RNG_prob).EntireColumn.Hidden
        If prb Then
            If Not PanelClassStats.Visible Then PanelClassStats.Show (vbModeless)
            If PanelProblems.Visible Then PanelProblems.hide
        Else
            If Not PanelProblems.Visible Then PanelProblems.Show (vbModeless)
            If PanelClassStats.Visible Then PanelClassStats.hide
        End If
    Else
        If PanelProblems.Visible Then PanelProblems.hide
        If PanelClassStats.Visible Then PanelClassStats.hide
    End If
    SheetFocus
End Sub
' >>> check double classes integrity phones and reset "ok" marks
Public Sub CheckPupilCells(chg As Range)
    Dim rng As Range, cl As Range, ar As Range, c As Integer
    Set rng = Intersect(chg, Range(GRN_ppl_all_data))
    For Each ar In rng
        If Not (ar Is Nothing) Then
            For Each cl In ar
                If TestIn(cl, Range(GRN_ppl_kids_info)) Then ' check kids info marks [A1,A2]
                    RemovePupilMarks cl, "a1,a2"
                End If
                If TestIn(cl, Range(GRN_ppl_person_ids)) Then ' check people IDs
                    c = RangeCheckIDs(cl)
                End If
                If TestIn(cl, Range(GRN_ppl_parent_names)) Then ' check parent names mark [A3]
                    RemovePupilMarks cl, "a3"
                End If
                If TestIn(cl, Range(GRN_ppl_kid_number)) Then ' check kid number mark [C1]
                    RemovePupilMarks cl, "c1"
                End If
                If TestIn(cl, Range(GRN_ppl_payments_all)) Then
                    If TestIn(cl, Range(GRN_ppl_payment_type).EntireColumn) Or TestIn(cl, Range(GRN_ppl_payment_inv).EntireColumn) Then ' check payment type/invoice mark [C2]
                        RemovePupilMarks cl, "c2"
                    End If
                    If TestIn(cl, Range(GRN_ppl_actual_pay).EntireColumn) Then ' check actual payment mark [C3]
                        RemovePupilMarks cl, "c3"
                    End If
                    If TestIn(cl, Range(GRN_ppl_payment_rem).EntireColumn) Then ' check payment remark mark [C4]
                        RemovePupilMarks cl, "c4"
                    End If
                End If
                If TestIn(cl, Range(GRN_ppl_cls_data)) Then ' check classes + marks [B1,B2,B3]
                    CheckPupilDoubleClasses cl
                    RemovePupilMarks cl, "b1,b2,b3"
                End If
                If TestIn(cl, Range(GRN_ppl_phones_all)) Then ' check phones + phone marks [A4]
                    c = RangeCheckPhones(cl)
                    RemovePupilMarks cl, "a4"
                End If
            Next
        End If
    Next
End Sub
' >>> check integrity
Private Sub CheckPupilDoubleClasses(cl As Range)
    Dim c1 As String, c2 As String, c3 As String, c4 As String
    Dim rng As Range
    Dim nop As String
    Set rng = Intersect(cl.EntireRow, Range(GRN_ppl_cls_data))
    c1 = rng.Cells(1)
    c2 = rng.Cells(2)
    c3 = rng.Cells(3)
    c4 = rng.Cells(4)
    nop = Trim(Range(GRN_def_no_participation).Value)
    If c1 = c2 And c1 <> nop Then rng.Cells(2) = ""
    If c3 = c4 And c3 <> nop Then rng.Cells(4) = ""
End Sub
' >>> activate assist panel for pupil's classes
Public Sub PupilsAssist(rng As Range)
    If TestIn(rng, Range("pupils_class_1").EntireColumn) Then
        PanelAssist.PupilClassMenu Range(GRN_men_class_1)
    End If
    If TestIn(rng, Range("pupils_class_2").EntireColumn) Then
        PanelAssist.PupilClassMenu Range(GRN_men_class_2)
    End If
    If TestIn(rng, Range("pupils_class_3").EntireColumn) Then
        PanelAssist.PupilClassMenu Range(GRN_men_class_3)
    End If
    If TestIn(rng, Range("pupils_class_4").EntireColumn) Then
        PanelAssist.PupilClassMenu Range(GRN_men_class_4)
    End If
End Sub
' >>> calc proper kid number for a pupil
Public Function CalcKidNumber(row As Range) As String
    Dim xfam As String, xgrd As String, xlnm As String, xfnm As String
    Dim fam As String, grd As String, lnm As String, fnm As String
    Dim xhrs As String, xpym As String
    Dim hrs As String, pym As String
    Dim kid As Integer, cm1 As String, cm2 As String
    Dim cl As Range, inp As Boolean, xinp As Boolean
    fam = InterVal(row, Range(GRN_ppl_family_code).EntireColumn)
    grd = InterVal(row, Range(GRN_ppl_grd_data).EntireColumn)
    lnm = InterVal(row, Range(GRN_ppl_name_last).EntireColumn)
    fnm = InterVal(row, Range(GRN_ppl_name_first).EntireColumn)
    hrs = CStr(ConvInt(InterVal(row, Range(GRN_ppl_hours).EntireColumn), 0))
    pym = CStr(ConvInt(InterVal(row, Range(GRN_ppl_actual_pay).EntireColumn), 0))
    inp = (CInt(hrs) > 0 Or pym > 0) ' is kid in play
    CalcKidNumber = ""
    If Trim(lnm + fnm) <> "" Then
' loop all kids and calc kid number
        cm1 = Trim(IIf(inp, "1", "2") + " " + Left(grd, 1) + " " + lnm + " " + fnm)
        If cm1 <> "" Then
            kid = 1
            For Each cl In Range(GRN_ppl_all_data).Rows
                xfam = InterVal(cl, Range(GRN_ppl_family_code).EntireColumn)
                If fam = xfam Then
                    xgrd = InterVal(cl, Range(GRN_ppl_grd_data).EntireColumn)
                    xlnm = InterVal(cl, Range(GRN_ppl_name_last).EntireColumn)
                    xfnm = InterVal(cl, Range(GRN_ppl_name_first).EntireColumn)
                    If lnm + fnm <> xlnm + xfnm Then
                        xhrs = CStr(ConvInt(InterVal(cl, Range(GRN_ppl_hours).EntireColumn), 0))
                        xpym = CStr(ConvInt(InterVal(cl, Range(GRN_ppl_actual_pay).EntireColumn), 0))
                        xinp = (CInt(xhrs) > 0 Or xpym > 0) ' is kid in play
                        cm2 = Trim(IIf(xinp, "1", "2") + " " + Left(xgrd, 1) + " " + xlnm + " " + xfnm)
                        If cm1 > cm2 Then kid = kid + 1
                    End If
                End If
            Next
            CalcKidNumber = CStr(kid)
        End If
    End If
End Function
' >>> finds the grade of a kid or empty string if not found
' >>>   if ambiguous, returns all grades formatted as "[xxx],[yyy],..."
Public Function FindGrade(lst As String, fst As String) As String
    Dim rng As Range, cl As Range
    Dim cnt As Integer
    Set rng = Range(GRN_ppl_kids_info)
    FindGrade = ""
    cnt = 0
    For Each cl In rng.Rows
        If cl.Cells(1) = lst And cl.Cells(2) = fst Then
            Select Case cnt
                Case 0
                    FindGrade = cl.Cells(3)
                Case 1
                    FindGrade = "[" + FindGrade + "],[" + cl.Cells(3) + "]"
                Case Else
                    FindGrade = FindGrade + ",[" + cl.Cells(3) + "]"
            End Select
            cnt = cnt + 1
        End If
    Next
End Function
' >>> validate name/grade of a kid
' >>>   cl = range of 3 adjacent cells
' >>>   st = true to check, false it's ok
Sub FixKidInfo(cl As Range, st As Boolean)
    Dim lst As String, fst As String
    Dim grd As String, vld As String
    Dim stt As Boolean
    stt = False
    fst = Trim(cl.Cells(1))
    lst = Trim(cl.Cells(2))
    grd = Trim(cl.Cells(3))
    vld = ""
    If st Then
        If fst <> "" And lst <> "" Then
            vld = FindGrade(lst, fst)
            If grd = "" And vld <> "" And Left(vld, 1) <> "[" Then
                grd = vld
                cl.Cells(3).Value = grd
            End If
            If grd <> "" And vld <> "" Then
                If InStr(vld, ",") > 0 Then
                    If InStr(vld, grd) > 0 Then stt = True
                Else
                    If vld = grd Then stt = True
                End If
            End If
        Else
            If fst = "" And lst = "" And grd = "" Then stt = True
        End If
    Else
        stt = True
    End If
    cl.Interior.ColorIndex = IIf(stt, xlColorIndexNone, 46)
End Sub


Attribute VB_Name = "ModuleClasses"
Option Explicit
' >>> range definitions
Private Const MN_class_all = "menu_class_all"
Private Const MN_class1 = "menu_class_1"
Private Const MN_class2 = "menu_class_2"
Private Const MN_class3 = "menu_class_3"
Private Const MN_class4 = "menu_class_4"
Private Const RNG_data = "class_data"
Private Const RNG_class_items = "class_items"
Private Const RNG_class_name1 = "class_name_1"
Private Const RNG_class_name2 = "class_name_2"
Private Const RNG_class_name3 = "class_name_3"
Private Const RNG_class_name4 = "class_name_4"
' >>> fix any changes in class items and propagate to pupils table
Sub RebuildClasses(Target As Range)
    Dim ar As Range, cl As Range, tmp As Range
    Dim cn As String
    On Error Resume Next
    AskReset
    For Each ar In Target.Areas ' loop all range areas
        Set tmp = Intersect(Range(RNG_data), ar)
        If Not (tmp Is Nothing) Then ' loop all rows in grades range
            For Each cl In tmp.Rows
                cn = Cells(cl.row, Range(RNG_class_items).Column) ' get class main name
                RebuildClass 1, cl.row, cn ' fix class #1
                RebuildClass 2, cl.row, cn ' fix class #2
                RebuildClass 3, cl.row, cn ' fix class #3
                RebuildClass 4, cl.row, cn ' fix class #4
            Next
        End If
    Next
    AskReset
End Sub
' >>> fix a specific class item and propagate to pupils table
Function RebuildClass(no As Integer, rw As Integer, nm As String)
    Dim xgr As String, xex As String, xhr As String
    Dim nm_old As String, nm_new As String
    Dim cl As Range, hr As Integer
    Dim non As Boolean
    nm_new = ""
    Set cl = Range(Cells(rw, Range("class_name_" & no).Column).Address)
    xgr = Trim(Cells(rw, Range("class_grade_" & no).Column))
    hr = Zero(Cells(rw, Range("class_len_" & no).Column))
    If nm <> "" And xgr <> "" Then
        xex = Trim(Cells(rw, Range("class_extra_" & no).Column))
        xhr = Trim(str(no))
        If hr = 2 Then xhr = xhr + Trim(str(no + 1))
        nm_new = CalcClassName(Trim(nm), Trim(xgr), Trim(xex), Trim(xhr))
    End If
    nm_old = Trim(cl.Cells(1))
    If nm_old <> nm_new Then
        If AskPrevRes() <> "s" Then non = RenameClass(no, nm_old, nm_new)
        cl.Cells(1) = nm_new
    End If
End Function
' >>> rename a class name in pupils sheet
Function RenameClass(no As Integer, src As String, trg As String) As Boolean
    Dim tx As String, act As String
    RenameClass = False
    If src <> "" Then
        If FindVal(Range("pupils_class_" & no).EntireColumn, src) Then
            If Range("defs_class_ren_ask") = CN_no Then act = "y" Else act = "n"
            If trg <> "" Then ' replace
                tx = "האם לשנות את כל המופעים של" + vbCr + "[" + src + "]" + vbCr + "לערך" + vbCr + "[" + trg + "]"
            Else ' delete
                tx = "האם למחוק את כל המופעים של" + vbCr + "[" + src + "]" + vbCr + "מטבלת התלמידים"
            End If
            If act = "n" Then
                act = AskDialog(tx)
            End If
            If act = "y" Then
                ChangeVal Range("pupils_class_" & no).EntireColumn, src, trg
                RenameClass = True
            End If
        End If
    End If
End Function
' >>> sort class table
Sub SortClasses()
    Range("class_data").sort key1:=Range("class_group"), order1:=xlAscending, key2:=Range("class_sort"), order2:=xlAscending, key3:=Range("class_items"), order3:=xlAscending
End Sub
' >>> rebuild all class menus
Sub BuildClassMenus()
    MakeClassMasterMenu MN_class_all
    MakeClassMenu MN_class1, Range(RNG_class_name1), Null, ""
    MakeClassMenu MN_class2, Range(RNG_class_name2), Range(MN_class1), " 12"
    MakeClassMenu MN_class3, Range(RNG_class_name3), Null, ""
    MakeClassMenu MN_class4, Range(RNG_class_name4), Range(MN_class3), " 34"
' reset drop boxes
    ControlClasses.ClassSelHour.ListIndex = -1
End Sub
' >>> rebuild main classes menu (all hours)
Sub MakeClassMasterMenu(menu As String)
    Dim arr() As String, ref As String
    Dim rng As Range
    Dim idx As Integer, i As Integer
    ref = ThisWorkbook.Names.Item(menu).RefersTo ' get original menu range
    ref = Left(ref, InStr(ref, "!")) ' trim to sheet ref only
    Set rng = Range(menu).Cells(1)
    Range(menu).ClearContents ' clear content of old menu
    arr = RangeToStrArr(Range(GRN_cls_all_classes))
    SortStrArray arr, "a"
    idx = 0 ' make new menu
    For i = LBound(arr) To UBound(arr)
        rng.Offset(idx) = arr(i)
        idx = idx + 1
    Next i
    ref = ref + Range(menu).Cells(1).Address + ":" + rng.Offset(idx - 1).Address
    ThisWorkbook.Names.Item(menu).RefersTo = ref ' set new menu range
End Sub
' >>> rebuild a single class menu
Sub MakeClassMenu(menu As String, cls As Range, ByVal prv As Variant, dbl As String)
    Dim idx As Integer, i As Integer
    Dim rng As Range, src As Range
    Dim arr() As String
    Dim ref As String
    ref = ThisWorkbook.Names.Item(menu).RefersTo ' get original menu range
    ref = Left(ref, InStr(ref, "!")) ' trim to sheet ref only
    Set rng = Range(menu).Cells(1)
    Set src = Intersect(cls.EntireColumn, Range(RNG_class_items).EntireRow)
    Range(menu).ClearContents ' clear content of old menu
    arr = RangeToStrArr(src)
    SortStrArray arr, "a"
    idx = 0
    If Not IsStringArrayEmpty(arr) Then
        For i = LBound(arr) To UBound(arr)
            If arr(i) <> "" Then
                rng.Offset(idx) = arr(i)
                idx = idx + 1
            End If
        Next i
    End If
' add double classes from 1st & 3rd period to 2nd & 4th
    If Range("defs_class_allow_dbl") = CN_yes And VarType(prv) <> vbNull And dbl <> "" Then
        Set src = prv
        arr = RangeToStrArr(src)
        SortStrArray arr, "a"
        If Not IsStringArrayEmpty(arr) Then
            For i = LBound(arr) To UBound(arr)
                If InStr(arr(i), dbl) Then
                    rng.Offset(idx) = arr(i)
                    idx = idx + 1
                End If
            Next i
        End If
    End If
' add "not participating" item
    rng.Offset(idx) = Range("defs_no_part").Text
    idx = idx + 1
    ref = ref + Range(menu).Cells(1).Address + ":" + rng.Offset(idx - 1).Address
    ThisWorkbook.Names.Item(menu).RefersTo = ref ' set new menu range
End Sub
' >>> calc full class name
Function CalcClassName(nm As String, gr As String, ex As String, hr As String)
    Dim xx As String
    CalcClassName = ""
    If nm + gr <> "" Then
        CalcClassName = Trim(nm + " " + ex) + " " + gr + " " + hr
    End If
End Function
' >>> move cursor to top right
Sub ClassCorner()
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet2" Then
        Range(RNG_class_items).Cells(2).Select
        Range(RNG_class_items).Cells(1).Select
    End If
End Sub


Attribute VB_Name = "ControlPupils"
Attribute VB_Base = "0{EF5AB452-F7F0-4D18-AAE6-851BAECD1492}{1E001D68-E5CF-4CFD-81E5-A6ECF11997C4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> definitions
Private Const DEF_window = "defs_win_pupil_pos"
Private Const DEF_bring_top = "defs_win_bring_top"
Private Const DEF_filter_type = "defs_filter_type"
Private Const RNG_main = "pupils_name_last"
Private Const RNG_class = "pupils_class_1"
Private Const RNG_fam = "pupils_family"
Private Const RNG_personal = "pupils_col_personal"
Private Const RNG_prob = "pupils_problems"
Private Const RNG_gen = "pupils_col_gen"
Private Const RNG_dad = "pupils_col_dad"
Private Const RNG_mom = "pupils_col_mom"
Private Const RNG_pay = "pupils_col_pay"
Private Const RNG_alts = "pupils_col_alts"
Private Const RNG_misc = "pupils_col_misc"
Private Const RNG_cost = "pupils_col_cost"
Private Const RNG_calc = "pupils_col_calc"
Private Const MN_sorts = "menu_sorts"
' >>> public variable
Public PUB_pupil_on As Boolean
Public PUB_no_sort As Boolean
' >>> show pupils filter help
Private Sub PupilFilterHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-פילטר")
End Sub
' >>> show pupils columns help
Private Sub PupilColHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-עמודות")
End Sub
' >>> show pupils misc help
Private Sub PupilMiscHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-מיוחד")
End Sub
' >>> show pupils delete help
Private Sub PupilDelHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-מחיקות")
End Sub
' >>> kids initial assignment operations
Private Sub PupilsAssign_Click()
    DialogInitAssign.Show
End Sub
' >>> save file or a new version
Private Sub SaveVersion_Click()
    DialogSave.Show
    SheetFocus
End Sub
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    PUB_no_sort = True
    s = Range(DEF_window).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    PupilSort.RowSource = MN_sorts
    If PupilSort.ListIndex < 0 Then PupilSort.ListIndex = 0
    PUB_pupil_on = False
End Sub
' >>>
Private Sub MultiPage1_Change()
    If Me.MultiPage1.Value = 1 Then
        PupilCol03.Value = Not Range(RNG_prob).EntireColumn.Hidden
    End If
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
    If Not PUB_pupil_on Then
        If Range(DEF_bring_top) = CN_yes Then Me.MultiPage1.Value = 0
        PupilFilterGrade.RowSource = "menu_level"
        PupilCol01.Value = Not Range(RNG_fam).EntireColumn.Hidden
        PupilCol02.Value = Not Range(RNG_personal).EntireColumn.Hidden
        PupilCol03.Value = Not Range(RNG_prob).EntireColumn.Hidden
        PupilCol04.Value = Not Range(RNG_gen).EntireColumn.Hidden
        PupilCol05.Value = Not Range(RNG_dad).EntireColumn.Hidden
        PupilCol06.Value = Not Range(RNG_mom).EntireColumn.Hidden
        PupilCol07.Value = Not Range(RNG_pay).EntireColumn.Hidden
        PupilCol08.Value = Not Range(RNG_alts).EntireColumn.Hidden
        PupilCol09.Value = Not Range(RNG_misc).EntireColumn.Hidden
        PupilCol10.Value = Not Range(RNG_cost).EntireColumn.Hidden
        PupilCol11.Value = Not Range(RNG_calc).EntireColumn.Hidden
        PUB_pupil_on = True
    End If
End Sub
' >>> record the window position
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, DEF_window
    UpdatesOn
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> maximize the pupils window
Public Sub PupilMaxi_Click()
    Me.Width = 340
    Me.Height = 99
    Me.Caption = "ניהול תלמידים"
    Me.PupilMaxi.Visible = False
    Me.PupilMini.Visible = True
    Me.PupilFilterHelp.Visible = True
    Me.Label4.Visible = True
    PupilShowPanels
End Sub
' >>> minimize the pupils window
Public Sub PupilMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "תלמידים"
    Me.PupilMini.Visible = False
    Me.PupilMaxi.Left = Me.PupilMini.Left
    Me.PupilMaxi.Visible = True
    Me.PupilFilterHelp.Visible = False
    Me.Label4.Visible = False
    PupilShowPanels
End Sub
' >>> pupil name filter handler on every letter
Private Sub PupilFilterName_Change()
    If Range(DEF_filter_type).Text = CN_no Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
    End If
End Sub
' >>> pupil name filter handler on exit field
Private Sub PupilFilterName_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Range(DEF_filter_type).Text = CN_yes Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
    End If
    PupilsfixFocus
End Sub
' >>> make pressing "enter" return focus to worksheet
Private Sub PupilFilterName_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
        PupilsfixFocus
        KeyCode = 0
    End If
End Sub
' >>> pupil grade filter handler
Private Sub PupilFilterGrade_Change()
    FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
    PupilsfixFocus
End Sub
' >>> handle delete button press on grade filter
Private Sub PupilFilterGrade_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then
        PupilFilterGrade.ListIndex = -1
        PupilFilterClass.SetFocus
        PupilsfixFocus
        KeyCode = 0
    End If
End Sub
' >>> pupil class filter handler on every letter
Private Sub PupilFilterClass_Change()
    If Range(DEF_filter_type).Text = CN_no Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
        PupilsfixFocus
    End If
End Sub
' >>> pupil class filter handler on exit field
Private Sub PupilFilterClass_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Range(DEF_filter_type).Text = CN_yes Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
    End If
    PupilsfixFocus
End Sub
' >>> make pressing "enter" return focus to worksheet
Private Sub PupilFilterClass_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
        PupilsfixFocus
        KeyCode = 0
    End If
End Sub
' >>> pupils sort selection
Private Sub PupilSort_Change()
    If Not PUB_no_sort Then
        PupilsSort Trim(PupilSort.Text)
        SheetFocus
    End If
End Sub
' >>> reset filter & sort fields
Private Sub PupilFilterReset_Click()
    PupilFilterName.Text = ""
    PupilFilterGrade.ListIndex = -1
    PupilFilterClass.Text = ""
    PupilSort.ListIndex = 0
    FilterPupils Trim(PupilFilterName.Text), Trim(PupilFilterGrade.Text), Trim(PupilFilterClass.Text)
    PupilsfixFocus
    SheetFocus
End Sub
' >>> perform sort
Private Sub PupilFilterSort_Click()
    PupilsSort Trim(PupilSort.Text)
    SheetFocus
End Sub
Private Sub AttUrlGo_Click()
    Call DialogCloud.OpenUrl(CN_app_url)
End Sub
' >>> control show/hide for [family] columns
Private Sub PupilCol01_Click()
    fixColumns
    SheetFocus
    If PupilCol01.Value Then
        ShiftColumnFocus Range(RNG_fam)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [id] columns
Private Sub PupilCol02_Click()
    fixColumns
    SheetFocus
    If PupilCol02.Value Then
        ShiftColumnFocus Range(RNG_personal)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [problems] columns
Private Sub PupilCol03_Click()
    fixColumns
    PupilShowPanels
    SheetFocus
    If PupilCol03.Value Then
        ShiftColumnFocus Range(RNG_prob)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [general] columns
Private Sub PupilCol04_Click()
    fixColumns
    SheetFocus
    If PupilCol04.Value Then
        ShiftColumnFocus Range(RNG_gen)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [dad] columns
Private Sub PupilCol05_Click()
    fixColumns
    SheetFocus
    If PupilCol05.Value Then
        ShiftColumnFocus Range(RNG_dad)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [mom] columns
Private Sub PupilCol06_Click()
    fixColumns
    SheetFocus
    If PupilCol06.Value Then
        ShiftColumnFocus Range(RNG_mom)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [payments] columns
Private Sub PupilCol07_Click()
    fixColumns
    SheetFocus
    If PupilCol07.Value Then
        ShiftColumnFocus Range(RNG_pay)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [alt classes] columns
Private Sub PupilCol08_Click()
    fixColumns
    SheetFocus
    If PupilCol08.Value Then
        ShiftColumnFocus Range(RNG_alts)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [misc] columns
Private Sub PupilCol09_Click()
    fixColumns
    SheetFocus
    If PupilCol09.Value Then
        ShiftColumnFocus Range(RNG_misc)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [costs] columns
Private Sub PupilCol10_Click()
    fixColumns
    SheetFocus
    If PupilCol10.Value Then
        ShiftColumnFocus Range(RNG_cost)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> control show/hide for [calc fields] columns
Private Sub PupilCol11_Click()
    fixColumns
    SheetFocus
    If PupilCol11.Value Then
        ShiftColumnFocus Range(RNG_calc)
    Else
        ShiftHiddenFocus
    End If
End Sub
' >>> show all columns
Private Sub PupilColAll_Click()
    Dim chk As Boolean
    If PupilColAll.Caption = "הכל" Then
        PupilColAll.Caption = "כלום"
        chk = True
    Else
        PupilColAll.Caption = "הכל"
        chk = False
    End If
    PupilCol01.Value = chk
    PupilCol02.Value = chk
    PupilCol03.Value = chk
    PupilCol04.Value = chk
    PupilCol05.Value = chk
    PupilCol06.Value = chk
    PupilCol07.Value = chk
    PupilCol08.Value = chk
    PupilCol09.Value = chk
    PupilCol10.Value = chk
    PupilCol11.Value = chk
    If Not chk Then
        ShiftColumnFocus Range(RNG_class)
        ShiftColumnFocus Range(RNG_main)
    End If
End Sub
' >>> show/hide required columns
Sub fixColumns()
    Dim chk As Boolean
    If PUB_pupil_on Then
        UpdatesOff
        Range(RNG_fam).EntireColumn.Hidden = Not PupilCol01.Value
        Range(RNG_personal).EntireColumn.Hidden = Not PupilCol02.Value
        Range(RNG_prob).EntireColumn.Hidden = Not PupilCol03.Value
        Range(RNG_gen).EntireColumn.Hidden = Not PupilCol04.Value
        Range(RNG_dad).EntireColumn.Hidden = Not PupilCol05.Value
        Range(RNG_mom).EntireColumn.Hidden = Not PupilCol06.Value
        Range(RNG_pay).EntireColumn.Hidden = Not PupilCol07.Value
        Range(RNG_alts).EntireColumn.Hidden = Not PupilCol08.Value
        Range(RNG_misc).EntireColumn.Hidden = Not PupilCol09.Value
        Range(RNG_cost).EntireColumn.Hidden = Not PupilCol10.Value
        Range(RNG_calc).EntireColumn.Hidden = Not PupilCol11.Value
        UpdatesOn
        chk = PupilCol01.Value And PupilCol02.Value And PupilCol03.Value And PupilCol04.Value
        chk = chk And PupilCol05.Value And PupilCol06.Value And PupilCol07.Value And PupilCol08.Value
        chk = chk And PupilCol09.Value And PupilCol10.Value And PupilCol11.Value
        If chk Then
            PupilColAll.Caption = "כלום"
        Else
            PupilColAll.Caption = "הכל"
        End If
    End If
End Sub
' >>> shift focus to right side if on a hidden cell
Sub ShiftHiddenFocus()
    Dim cl As Range
    If ActiveCell.EntireColumn.Hidden Then
        Set cl = Intersect(Range(GRN_ppl_grd_data).EntireColumn, ActiveCell.EntireRow)
        cl.Select
    End If
End Sub
' >>> clear all pupils class data
Private Sub PupilsClearClasses_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        UpdatesOff
        CleanRange Range(GRN_ppl_cls_data)
        CleanRange Range(GRN_ppl_cls_alts)
        CleanRange Range(GRN_ppl_cls_save)
        UpdatesOn
    End If
    SheetFocus
End Sub
' >>> clear all pupils misc data
Private Sub PupilsClearMisc_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        UpdatesOff
        CleanRange Range(GRN_ppl_msc_data)
        UpdatesOn
    End If
    SheetFocus
End Sub
' >>> clear all pupils payment data
Private Sub PupilsClearPayments_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        UpdatesOff
        CleanRange Range(GRN_ppl_pay_clear)
        UpdatesOn
    End If
    SheetFocus
End Sub
' >>> delete a single pupil's record
Private Sub PupilsClearKid_Click()
    Dim rng As Range
    Set rng = Intersect(Selection.EntireRow, Range(GRN_ppl_clear))
    UpdatesOff
    If Not (rng Is Nothing) Then
        AskReset
        If AskDialog(CN_sure, "yn") = "y" Then
            CleanRange rng
        End If
    End If
    UpdatesOn
    SheetFocus
End Sub
' >>> turn VBA events back on
Private Sub EventsON_Click()
    UpdatesReset
    SheetFocus
End Sub
' >>> check all pupils for problems
Private Sub PupilsCheckAll_Click()
    CheckAllPupils True
    SheetFocus
End Sub
' >>> renumber all kids numbers
Private Sub PupilsKidsRenum_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        RenumAllKids True
    End If
    SheetFocus
End Sub
' >>> old pasport pics maintenance
Private Sub PupilsOldPics_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        BackupOldPasportPics True
    End If
    SheetFocus
End Sub
' >>> renumber kid numbers for all pupils
Public Sub BackupOldPasportPics(prg As Boolean)
    Dim arr() As String, path As String
    Dim rng As Range, cl As Range
    Dim ind As Long, cnt As Long
    Dim ids As String
    Dim pic As String
    UpdatesOff
    If prg Then
        ControlPupils.PupilsCheckAll.Visible = False
        ControlPupils.LabelProgress.Visible = True
    End If
    Set rng = Intersect(Range(GRN_ppl_all_data).Rows, Range(GRN_ppl_id).EntireColumn)
    ids = ""
    For Each cl In rng
        ids = ids + ",[" & cl.Value & "]"
    Next
    path = Range(GRN_def_img_dir)
    If Right(path, 1) <> "\" Then path = path + "\"
    If makeNewFolder(path & "old_pasports") Then
        arr = GetFileList(path & "?????????.jpg")
        cnt = UBound(arr) - LBound(arr) + 1
        ind = 0
        Do While ind < cnt
            pic = Left(arr(ind), 9)
            If InStr(ids, pic) = 0 Then
                MoveFile path & arr(ind), path & "old_pasports\"
            End If
            If prg Then
                ControlPupils.LabelProgress.Caption = CStr(Int(100 * ind / cnt)) + "%"
                ControlPupils.Repaint
            End If
            ind = ind + 1
        Loop
    End If
    If prg Then
        ControlPupils.LabelProgress.Visible = False
        ControlPupils.PupilsCheckAll.Visible = True
    End If
    UpdatesOn
End Sub
' >>> renumber kid numbers for all pupils
Public Sub RenumAllKids(prg As Boolean)
    Dim rng As Range, cl As Range
    Dim ind As Long, cnt As Long
    Dim kcl As Range, kid As String
    UpdatesOff
    If prg Then
        ControlPupils.PupilsCheckAll.Visible = False
        ControlPupils.LabelProgress.Visible = True
    End If
    Set rng = Range(GRN_ppl_all_data).Rows
    cnt = rng.count
    ind = 1
    For Each cl In rng
        kid = CalcKidNumber(cl.EntireRow)
        Set kcl = Intersect(cl.EntireRow, Range(GRN_ppl_kid_number).EntireColumn)
        kcl.Value = kid
        If prg Then
            ControlPupils.LabelProgress.Caption = CStr(Int(100 * ind / cnt)) + "%"
            ControlPupils.Repaint
        End If
        ind = ind + 1
    Next
    If prg Then
        ControlPupils.LabelProgress.Visible = False
        ControlPupils.PupilsCheckAll.Visible = True
    End If
    UpdatesOn
End Sub
' >>> generate monthly attendance forms
Private Sub DoFormsAttendance_Click()
    MakeAttendanceForms
    SheetFocus
End Sub
' >>> generate class assignments forms
Private Sub DoFormsAssignments_Click()
    MakeAssignmentsForms
    SheetFocus
End Sub
' >>> stub sub to ensure this script is loaded
Public Sub ensure_load()
    Dim x As String
    x = "123"
End Sub
' >>> reset & clear this tab
'   [c] = delete classes assignment
'   [p] = delete payments info
'   [m] = delete misc info
Public Sub init_tab(typ As String)
    UpdatesOff
    If typ = "c" Then
        CleanRange Range(GRN_ppl_cls_data)
        CleanRange Range(GRN_ppl_cls_alts)
        CleanRange Range(GRN_ppl_cls_save)
    End If
    If typ = "p" Then
        CleanRange Range(GRN_ppl_pay_clear)
    End If
    If typ = "m" Then
        CleanRange Range(GRN_ppl_msc_data)
    End If
    UpdatesOn
End Sub


Attribute VB_Name = "DialogAsk"
Attribute VB_Base = "0{FA9DDF33-31D3-4FAB-94D8-3FFABAEE0756}{925362E9-0C54-488C-BB47-A462D74F9D70}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> [yes] selected
Private Sub ButtonYes_Click()
    PUBaskResult = "y"
    Me.hide
End Sub
' >>> [no] selected
Private Sub ButtonNo_Click()
    PUBaskResult = "n"
    Me.hide
End Sub
' >>> [all] selected
Private Sub ButtonAll_Click()
    PUBaskResult = "a"
    Me.hide
End Sub
' >>> [stop] selected
Private Sub ButtonStop_Click()
    PUBaskResult = "s"
    Me.hide
End Sub
' >>> [OK] selected
Private Sub ButtonOk_Click()
    PUBaskResult = ""
    Me.hide
End Sub


Attribute VB_Name = "ControlClasses"
Attribute VB_Base = "0{45C5EB9A-65C2-43F8-9886-B58A626A6A34}{02BC3DCF-A2AB-4C56-8F5D-15226E410D55}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> definitions
Private Const DEF_window = "defs_win_class_pos"
Private Const DEF_bring_top = "defs_win_bring_top"
Private Const RNG_main1 = "class_items"
Private Const RNG_main2 = "class_grade_1"
Private Const RNG_specs = "class_col_spec"
Private Const RNG_names = "class_col_name"
Private Const RNG_group = "class_col_grp"
Private Const RNG_calcs = "class_col_calc"
Private Const MN_hours = "menu_hours"
' >>> public variable
Public PUB_class_on As Boolean
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(DEF_window).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    ClassSelHour.RowSource = MN_hours
    ClassSelHour.ListIndex = -1
    FixElements
    PUB_class_on = False
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
    If Not PUB_class_on Then
        If Range(DEF_bring_top) = CN_yes Then Me.MultiPage1.Value = 0
        ClassCol1.Value = Not Range(RNG_specs).EntireColumn.Hidden
        ClassCol2.Value = Not Range(RNG_names).EntireColumn.Hidden
        ClassCol3.Value = Not Range(RNG_group).EntireColumn.Hidden
        ClassCol4.Value = Not Range(RNG_calcs).EntireColumn.Hidden
        PUB_class_on = True
    End If
End Sub
' >>> record the window position
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, DEF_window
    UpdatesOn
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> maximize the classes window
Private Sub ClassesMaxi_Click()
    Me.Width = 275
    Me.Height = 99
    Me.Caption = "ניהול חוגים"
    Me.ClassesMaxi.Visible = False
    Me.ClassesMini.Visible = True
    Me.HelpClassesCol.Visible = True
    Me.ClassColShow.Visible = True
End Sub
' >>> minimize the classes window
Private Sub ClassesMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "חוגים"
    Me.ClassesMini.Visible = False
    Me.ClassesMaxi.Top = Me.ClassesMini.Top
    Me.ClassesMaxi.Visible = True
    Me.HelpClassesCol.Visible = False
    Me.ClassColShow.Visible = False
End Sub
' >>> show help for classes columns
Private Sub HelpClassesCol_Click()
    PanelHelp.ShowHelp ("חוגים-עמודות")
End Sub
' >>> show help for classes name changes
Private Sub HelpClassesChange_Click()
    PanelHelp.ShowHelp ("חוגים-שינוי")
End Sub
' >>> show help for classes misc commands
Private Sub HelpClassesMisc_Click()
    PanelHelp.ShowHelp ("חוגים-מיוחד")
End Sub
' >>> handle class hour change
Private Sub ClassSelHour_Change()
    Select Case ClassSelHour.ListIndex
        Case 0
            ClassNewName.RowSource = "menu_class_1"
        Case 1
            ClassNewName.RowSource = "menu_class_2"
        Case 2
            ClassNewName.RowSource = "menu_class_3"
        Case 3
            ClassNewName.RowSource = "menu_class_4"
    End Select
    ClassNewName.ListIndex = -1
    FixElements
End Sub
' >>> clear hour selection when [delete] is pressed
Private Sub ClassSelHour_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then ClassSelHour.ListIndex = -1
    FixElements
End Sub
' >>> handle old class name change
Private Sub ClassOldName_Change()
    FixElements
End Sub
' >>> handle new class name change
Private Sub ClassNewName_Change()
    FixElements
End Sub
' >>> clear new class name selection when [delete] is pressed
Private Sub ClassNewName_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then ClassNewName.ListIndex = -1
    FixElements
End Sub
' >>> perform class rename
Private Sub ClassRename_Click()
    If RenameClass(ClassSelHour.ListIndex + 1, ClassOldName.Text, ClassNewName.Text) Then
        MsgBox ("שינוי שם בוצע")
    Else
        MsgBox ("לא בוצע שינוי שם")
    End If
End Sub
' >>> clear all class rename fields
Private Sub ClassRenameClear_Click()
    ClassSelHour.ListIndex = -1
    ClassOldName.Text = ""
    FixElements
End Sub
' >>> enable/disable elements
Sub FixElements()
    If ClassSelHour.ListIndex < 0 Then ClassNewName.RowSource = ""
    ClassNewName.Enabled = (ClassSelHour.ListIndex >= 0)
    ClassRename.Enabled = (Trim(ClassOldName.Text) <> "" And ClassNewName.Text <> "")
End Sub
' >>> control show/hide for hour specific details columns
Private Sub ClassCol1_Click()
    fixColumns
    SheetFocus
    If ClassCol1.Value Then ShiftColumnFocus Range(RNG_specs)
End Sub
' >>> control show/hide for full class name columns
Private Sub ClassCol2_Click()
    fixColumns
    SheetFocus
    If ClassCol2.Value Then ShiftColumnFocus Range(RNG_names)
End Sub
' >>> control show/hide for group & sort columns
Private Sub ClassCol3_Click()
    fixColumns
    SheetFocus
    If ClassCol3.Value Then ShiftColumnFocus Range(RNG_group)
End Sub
' >>> control show/hide for calc columns
Private Sub ClassCol4_Click()
    fixColumns
    SheetFocus
    If ClassCol4.Value Then ShiftColumnFocus Range(RNG_calcs)
End Sub
' >>> show all columns
Private Sub ClassColShow_Click()
    ClassCol1.Value = True
    ClassCol2.Value = True
    ClassCol3.Value = True
    ClassCol4.Value = True
End Sub
' >>> hide all columns
Private Sub ClassColHide_Click()
    ClassCol1.Value = False
    ClassCol2.Value = False
    ClassCol3.Value = False
    ClassCol4.Value = False
    ShiftColumnFocus Range(RNG_main2)
    ShiftColumnFocus Range(RNG_main1)
End Sub
' >>> show/hide required columns
Sub fixColumns()
    Range(RNG_specs).EntireColumn.Hidden = Not ClassCol1.Value
    Range(RNG_names).EntireColumn.Hidden = Not ClassCol2.Value
    Range(RNG_group).EntireColumn.Hidden = Not ClassCol3.Value
    Range(RNG_calcs).EntireColumn.Hidden = Not ClassCol4.Value
    ClassColShow.Enabled = Not (ClassCol1.Value And ClassCol2.Value And ClassCol3.Value And ClassCol4.Value)
    ClassColHide.Enabled = (ClassCol1.Value Or ClassCol2.Value Or ClassCol3.Value Or ClassCol4.Value)
End Sub
' >>> delete a class item
Private Sub ClassDelClass_Click()
    Dim rng As Range
    Set rng = Intersect(Selection.EntireRow, Range(GRN_cls_clear_all))
    If Not (rng Is Nothing) Then
        AskReset
        If AskDialog(CN_sure, "yn") = "y" Then
            rng.ClearContents
        End If
    End If
    SheetFocus
End Sub
' >>> delete all classes details
Private Sub ClassDelDetails_Click()
    Dim rng As Range
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        Set rng = Range(GRN_cls_clear_details)
        rng.ClearContents
    End If
    SheetFocus
End Sub
' >>> show class stability panel
Private Sub CommandButton1_Click()
    PanelStability.Show (vbModeless)
End Sub
' >>> stub sub to ensure this script is loaded
Public Sub ensure_load()
    Dim x As String
    x = "123"
End Sub
' >>> reset & clear this tab
'   [a] = class assignments
'   [r] = rooms info
'   [h] = per hour info
Public Sub init_tab(typ As String)
    UpdatesOff
    If typ = "a" Then
        CleanRange Range("class_del_assign")
    End If
    If typ = "r" Then
        CleanRange Range("class_del_rooms")
    End If
    If typ = "h" Then
        CleanRange Range("class_del_per_hour")
    End If
    UpdatesOn
End Sub


Attribute VB_Name = "ControlGrades"
Attribute VB_Base = "0{1776FD6B-675D-42DF-B29B-A5A9B95105B1}{48FFD1F9-705C-4794-930C-26DD730B606F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> definitions
Private Const DEF_window = "defs_win_grade_pos"
Private Const DEF_bring_top = "defs_win_bring_top"
Private Const RNG_full = "grade_col_full_name"
Private Const MN_grade = "menu_grade"
' >>> public variable
Public PUB_grade_on As Boolean
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(DEF_window).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    GradeNewName.RowSource = MN_grade
    GradeNewName.ListIndex = -1
    FixElements
    PUB_grade_on = False
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
    If Not PUB_grade_on Then
        If Range(DEF_bring_top) = CN_yes Then Me.MultiPage1.Value = 0
        GradeCol1.Value = Not Range(RNG_full).EntireColumn.Hidden
        Grade4.Value = Not Range(GRN_grd_set_4).EntireColumn.Hidden
        Grade5.Value = Not Range(GRN_grd_set_5).EntireColumn.Hidden
        PUB_grade_on = True
    End If
End Sub
' >>> record the window position
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, DEF_window
    UpdatesOn
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> maximize the grades window
Private Sub GradesMaxi_Click()
    Me.Width = 256
    Me.Height = 99
    Me.Caption = "ניהול כיתות"
    Me.GradesMaxi.Visible = False
    Me.GradesMini.Visible = True
    Me.GradesColHelp.Visible = True
    Me.Grade4.Visible = True
End Sub
' >>> minimize the classes window
Private Sub GradesMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "כיתות"
    Me.GradesMini.Visible = False
    Me.GradesMaxi.Top = Me.GradesMini.Top
    Me.GradesMaxi.Visible = True
    Me.GradesColHelp.Visible = False
    Me.Grade4.Visible = False
End Sub
' >>> handle new name field change
Private Sub GradeNewName_Change()
    FixElements
End Sub
' >>> handle old name field change
Private Sub GradeOldName_Change()
    FixElements
End Sub
' >>> show help for grades columns
Private Sub GradesColHelp_Click()
    PanelHelp.ShowHelp ("כיתות-עמודות")
End Sub
' >>> show help for grades name changes
Private Sub GradesColChange_Click()
    PanelHelp.ShowHelp ("כיתות-שינוי")
End Sub
' >>> show help for grades misc commands
Private Sub GradesColMisc_Click()
    PanelHelp.ShowHelp ("כיתות-מיוחד")
End Sub
' >>> clear new grade name selection when [delete] is pressed
Private Sub GradeNewName_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then GradeNewName.ListIndex = -1
    FixElements
End Sub
' >>> perform grade rename
Private Sub GradeRename_Click()
    If RenameGrade(GradeOldName.Text, GradeNewName.Text) Then
        MsgBox ("שינוי שם בוצע")
    Else
        MsgBox ("לא בוצע שינוי שם")
    End If
End Sub
' >>> clear all grade rename fields
Private Sub GradeRenameClear_Click()
    GradeNewName.ListIndex = -1
    GradeOldName.Text = ""
    FixElements
End Sub
' >>> enable/disable elements
Sub FixElements()
    GradeRename.Enabled = (Trim(GradeOldName.Text) <> "" And GradeNewName.Text <> "")
    GradeRenameClear.Enabled = (Trim(GradeOldName.Text) <> "" Or GradeNewName.Text <> "")
End Sub
' >>> control show/hide for grade's full name column
Private Sub GradeCol1_Click()
    fixColumns
    SheetFocus
End Sub
' >>> control show/hide for grade's 4th name
Private Sub Grade4_Click()
    fixColumns
    SheetFocus
End Sub
' >>> control show/hide for grade's 5th name
Private Sub Grade5_Click()
    fixColumns
    SheetFocus
End Sub
' >>> show/hide required columns
Sub fixColumns()
    Range(RNG_full).EntireColumn.Hidden = Not GradeCol1.Value
    Range(GRN_grd_set_4).EntireColumn.Hidden = Not Grade4.Value
    Range(GRN_grd_full & "4").EntireColumn.Hidden = Not (GradeCol1.Value And Grade4.Value)
    Range(GRN_grd_set_5).EntireColumn.Hidden = Not Grade5.Value
    Range(GRN_grd_full & "5").EntireColumn.Hidden = Not (GradeCol1.Value And Grade5.Value)
End Sub
' >>> delete 6th grade + its pupils
Private Sub GradeDelLast_Click()
    AskReset
    If Any6thGraders() Then
        If AskDialog(CN_sure, "yn") = "y" Then
            Del6thGraders
            Del6thGrade
        End If
    End If
    SheetFocus
End Sub
' >>> move all grades up one year and propagate to pupils table
Private Sub GradeMoveUp_Click()
    AskReset
    If Not Any6thGraders() Then
        If AskDialog(CN_sure, "yn") = "y" Then
            MoveGradesUp
        End If
    Else
        MsgBox ("קודם מחק את תלמידי כיתה ו' הקיימים")
    End If
    SheetFocus
End Sub
' >>> stub sub to ensure this script is loaded
Public Sub ensure_load()
    Dim x As String
    x = "123"
End Sub


Attribute VB_Name = "ModuleChanges"
Option Explicit
' >>> range definitions
Private Const RNG_body = "changes_body"
Private Const RNG_save_src = "pupils_changes"
Private Const RNG_save_trg = "pupils_changes_saved"
Private Const RNG_family = "pupils_family"
Private Const RNG_name_l = "pupils_name_last"
Private Const RNG_name_f = "pupils_name_first"
Private Const RNG_grade = "pupils_grade"
Private Const RNG_kid = "pupils_kid_number"
' >>> add a "class" changed record
Sub FollowChanges(line As Range, ByVal cl1 As String, ByVal cl2 As String, hr As String)
    Dim fam As String, kid As String, nam As String, grd As String
    Dim rng As Range
    Dim i As Integer
    If cl1 <> cl2 Then
' get pupil's data
        Set rng = Intersect(line, Range(RNG_family).EntireColumn)
        fam = rng.Cells(1)
        Set rng = Intersect(line, Range(RNG_kid).EntireColumn)
        kid = CStr(rng.Cells(1))
        Set rng = Intersect(line, Range(RNG_name_l).EntireColumn)
        nam = rng.Cells(1)
        Set rng = Intersect(line, Range(RNG_name_f).EntireColumn)
        nam = Trim(nam + " " + rng.Cells(1))
        Set rng = Intersect(line, Range(RNG_grade).EntireColumn)
        grd = rng.Cells(1)
        If cl1 = "" Then cl1 = "[ריק]"
        If cl2 = "" Then cl2 = "[ריק]"
' find next empty line
        Set rng = Range(GRN_cng_date)
        i = rng.Rows.count
        While (i > 1 And Trim(rng.Cells(i - 1)) = "")
            i = i - 1
        Wend
        Set rng = rng.Cells(i)
' write changes
        rng.Offset(0, 0) = Format(Now, "yyyy/mm/dd")
        rng.Offset(0, 1) = Format(Now, "hh:mm:ss")
        rng.Offset(0, 2) = fam
        rng.Offset(0, 3) = kid
        rng.Offset(0, 4) = nam
        rng.Offset(0, 5) = grd
        rng.Offset(0, 6) = hr
        rng.Offset(0, 7) = cl1
        rng.Offset(0, 8) = cl2
' insert a new empty line
        rng.Offset(1, 0).EntireRow.Insert CopyOrigin:=xlFormatFromRightOrBelow
    End If
End Sub
' >>> reset all changes in pupils table (save classes)
Sub ResetChanges()
    Dim src As Range, trg As Range
    Set src = Range(RNG_save_src)
    Set trg = Range(RNG_save_trg)
' (old)    src.Copy (trg.Cells(1))
    src.Copy
    trg.Cells(1).PasteSpecial xlPasteValues
End Sub


Attribute VB_Name = "ModuleMD5"
Option Explicit
' >>>
Public Function MD5Hash(ByVal strText As String) As String
    Dim cMD5 As New clsMD5
    Dim strSignature As String
' Calculate MD5 hash.
    strSignature = cMD5.MD5(strText)
' Return MD5 signature.
    MD5Hash = strSignature
    Set cMD5 = Nothing
End Function


Attribute VB_Name = "clsMD5"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'*******************************************************************************
' MODULE:       CMD5
' FILENAME:     C:\My Code\vb\md5\CMD5.cls
' AUTHOR:       Phil Fresle
' CREATED:      16-Feb-2001
' COPYRIGHT:    Copyright 2001 Frez Systems Limited. All Rights Reserved.
'
' DESCRIPTION:
' Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm,
' as set out in the memo RFC1321.
'
' This class is used to generate an MD5 'digest' or 'signature' of a string. The
' MD5 algorithm is one of the industry standard methods for generating digital
' signatures. It is generically known as a digest, digital signature, one-way
' encryption, hash or checksum algorithm. A common use for MD5 is for password
' encryption as it is one-way in nature, that does not mean that your passwords
' are not free from a dictionary attack. If you are using the
' routine for passwords, you can make it a little more secure by concatenating
' some known random characters to the password before you generate the signature
' and on subsequent tests, so even if a hacker knows you are using MD5 for
' your passwords, the random characters will make it harder to dictionary attack.
'
' *** CAUTION ***
' See the comment attached to the MD5 method below regarding use on systems
' with different character sets.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk
'
' MODIFICATION HISTORY:
' 1.0       16-Feb-2001
'           Phil Fresle
'           Initial Version
'*******************************************************************************

Private Const BITS_TO_A_BYTE  As Long = 8
Private Const BYTES_TO_A_WORD As Long = 4
Private Const BITS_TO_A_WORD  As Long = BYTES_TO_A_WORD * BITS_TO_A_BYTE

Private m_lOnBits(0 To 30) As Long
Private m_l2Power(0 To 30) As Long

'*******************************************************************************
' Class_Initialize (SUB)
'
' DESCRIPTION:
' We will usually get quicker results by preparing arrays of bit patterns and
' powers of 2 ahead of time instead of calculating them every time, unless of
' course the methods are only ever getting called once per instantiation of the
' class.
'*******************************************************************************
Private Sub Class_Initialize()
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111
    
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000
End Sub

'*******************************************************************************
' LShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' A left shift takes all the set binary bits and moves them left, in-filling
' with zeros in the vacated bits on the right. This function is equivalent to
' the << operator in Java and C++
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all.
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
        
    ' A shift of 31 will result in the right most bit becoming the left most
    ' bit and all other bits being cleared
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        err.Raise 6
    End If
    
    ' If the left most bit that remains will end up in the negative bit
    ' position (&H80000000) we would end up with an overflow if we took the
    ' standard route. We need to strip the left most bit and add it back
    ' afterwards.
    If (lValue And m_l2Power(31 - iShiftBits)) Then
    
        ' (Value And OnBits(31 - (Shift + 1))) chops off the left most bits that
        ' we are shifting into, but also the left most bit we still want as this
        ' is going to end up in the negative bit marker position (&H80000000).
        ' After the multiplication/shift we Or the result with &H80000000 to
        ' turn the negative bit on.
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000
    
    Else
    
        ' (Value And OnBits(31-Shift)) chops off the left most bits that we are
        ' shifting into so we do not get an overflow error when we do the
        ' multiplication/shift
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))
        
    End If
End Function

'*******************************************************************************
' RShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' The right shift of an unsigned long integer involves shifting all the set bits
' to the right and in-filling on the left with zeros. This function is
' equivalent to the >>> operator in Java or the >> operator in C++ when used on
' an unsigned long.
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
        
    ' A shift of 31 will clear all bits and move the left most bit to the right
    ' most bit position
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
        
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        err.Raise 6
    End If
    
    ' We do not care about the top most bit or the final bit, the top most bit
    ' will be taken into account in the next stage, the final bit (whether it
    ' is an odd number or not) is being shifted into, so we do not give a jot
    ' about it
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)
    
    ' If the top most bit (&H80000000) was set we need to do things differently
    ' as in a normal VB signed long integer the top most bit is used to indicate
    ' the sign of the number, when it is set it is a negative number, so just
    ' deviding by a factor of 2 as above would not work.
    ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you could
    ' get a very marginal speed improvement by changing the test to (lValue < 0)
    If (lValue And &H80000000) Then
        ' We take the value computed so far, and then add the left most negative
        ' bit after it has been shifted to the right the appropriate number of
        ' places
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

'*******************************************************************************
' RShiftSigned (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    -
' (In) - iShiftBits - Integer -
'
' RETURN VALUE:
' Long -
'
' DESCRIPTION:
' The right shift of a signed long integer involves shifting all the set bits to
' the right and in-filling on the left with the sign bit (0 if positive, 1 if
' negative. This function is equivalent to the >> operator in Java or the >>
' operator in C++ when used on a signed long integer. Not used in this class,
' but included for completeness.
'*******************************************************************************
Private Function RShiftSigned(ByVal lValue As Long, _
                              ByVal iShiftBits As Integer) As Long
    
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShiftSigned = lValue
        Exit Function
    
    ' A shift of 31 will clear all bits if the left most bit was zero, and will
    ' set all bits if the left most bit was 1 (a negative indicator)
    ElseIf iShiftBits = 31 Then
        
        ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you
        ' could get a very marginal speed improvement by changing the test to
        ' (lValue < 0)
        If (lValue And &H80000000) Then
            RShiftSigned = -1
        Else
            RShiftSigned = 0
        End If
        Exit Function
    
    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        err.Raise 6
    End If
    
    ' We get the same result by dividing by the appropriate power of 2 and
    ' rounding in the negative direction
    RShiftSigned = Int(lValue / m_l2Power(iShiftBits))
End Function

'*******************************************************************************
' RotateLeft (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - Value to act on
' (In) - iShiftBits - Integer - Bits to move by
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Rotates the bits in a long integer to the left, those bits falling off the
' left edge are put back on the right edge
'*******************************************************************************
Private Function RotateLeft(ByVal lValue As Long, _
                            ByVal iShiftBits As Integer) As Long
    RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))
End Function

'*******************************************************************************
' AddUnsigned (FUNCTION)
'
' PARAMETERS:
' (In) - lX - Long - First value
' (In) - lY - Long - Second value
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Adds two potentially large unsigned numbers without overflowing
'*******************************************************************************
Private Function AddUnsigned(ByVal lX As Long, _
                             ByVal lY As Long) As Long
    Dim lX4     As Long
    Dim lY4     As Long
    Dim lX8     As Long
    Dim lY8     As Long
    Dim lResult As Long
 
    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000
 
    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)
 
    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If
 
    AddUnsigned = lResult
End Function

'*******************************************************************************
' F (FUNCTION)
'
' DESCRIPTION:
' MD5's F function
'*******************************************************************************
Private Function f(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    f = (x And y) Or ((Not x) And z)
End Function

'*******************************************************************************
' G (FUNCTION)
'
' DESCRIPTION:
' MD5's G function
'*******************************************************************************
Private Function g(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    g = (x And z) Or (y And (Not z))
End Function

'*******************************************************************************
' H (FUNCTION)
'
' DESCRIPTION:
' MD5's H function
'*******************************************************************************
Private Function h(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    h = (x Xor y Xor z)
End Function

'*******************************************************************************
' I (FUNCTION)
'
' DESCRIPTION:
' MD5's I function
'*******************************************************************************
Private Function i(ByVal x As Long, _
                   ByVal y As Long, _
                   ByVal z As Long) As Long
    i = (y Xor (x Or (Not z)))
End Function

'*******************************************************************************
' FF (SUB)
'
' DESCRIPTION:
' MD5's FF procedure
'*******************************************************************************
Private Sub FF(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(f(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' GG (SUB)
'
' DESCRIPTION:
' MD5's GG procedure
'*******************************************************************************
Private Sub GG(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(g(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' HH (SUB)
'
' DESCRIPTION:
' MD5's HH procedure
'*******************************************************************************
Private Sub hh(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(h(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' II (SUB)
'
' DESCRIPTION:
' MD5's II procedure
'*******************************************************************************
Private Sub ii(a As Long, _
               ByVal b As Long, _
               ByVal c As Long, _
               ByVal d As Long, _
               ByVal x As Long, _
               ByVal s As Long, _
               ByVal ac As Long)
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(i(b, c, d), x), ac))
    a = RotateLeft(a, s)
    a = AddUnsigned(a, b)
End Sub

'*******************************************************************************
' ConvertToWordArray (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String message
'
' RETURN VALUE:
' Long() - Converted message as long array
'
' DESCRIPTION:
' Takes the string message and puts it in a long array with padding according to
' the MD5 rules.
'*******************************************************************************
Private Function ConvertToWordArray(sMessage As String) As Long()
    Dim lMessageLength  As Long
    Dim lNumberOfWords  As Long
    Dim lWordArray()    As Long
    Dim lBytePosition   As Long
    Dim lByteCount      As Long
    Dim lWordCount      As Long
    
    Const MODULUS_BITS      As Long = 512
    Const CONGRUENT_BITS    As Long = 448
    
    lMessageLength = Len(sMessage)
    
    ' Get padded number of words. Message needs to be congruent to 448 bits,
    ' modulo 512 bits. If it is exactly congruent to 448 bits, modulo 512 bits
    ' it must still have another 512 bits added. 512 bits = 64 bytes
    ' (or 16 * 4 byte words), 448 bits = 56 bytes. This means lMessageSize must
    ' be a multiple of 16 (i.e. 16 * 4 (bytes) * 8 (bits))
    lNumberOfWords = (((lMessageLength + _
        ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ _
        (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * _
        (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)
    
    ' Combine each block of 4 bytes (ascii code of character) into one long
    ' value and store in the message. The high-order (most significant) bit of
    ' each byte is listed first. However, the low-order (least significant) byte
    ' is given first in each word.
    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        ' Each word is 4 bytes
        lWordCount = lByteCount \ BYTES_TO_A_WORD
        
        ' The bytes are put in the word from the right most edge
        lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE
        lWordArray(lWordCount) = lWordArray(lWordCount) Or _
            LShift(AscB(Mid(sMessage, lByteCount + 1, 1)), lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    ' Terminate according to MD5 rules with a 1 bit, zeros and the length in
    ' bits stored in the last two words
    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE

    ' Add a terminating 1 bit, all the rest of the bits to the end of the
    ' word array will default to zero
    lWordArray(lWordCount) = lWordArray(lWordCount) Or _
        LShift(&H80, lBytePosition)

    ' We put the length of the message in bits into the last two words, to get
    ' the length in bits we need to multiply by 8 (or left shift 3). This left
    ' shifted value is put in the first word. Any bits shifted off the left edge
    ' need to be put in the second word, we can work out which bits by shifting
    ' right the length by 29 bits.
    lWordArray(lNumberOfWords - 2) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 1) = RShift(lMessageLength, 29)
    
    ConvertToWordArray = lWordArray
End Function

'*******************************************************************************
' WordToHex (FUNCTION)
'
' PARAMETERS:
' (In) - lValue - Long - Long value to convert
'
' RETURN VALUE:
' String - Hex value to return
'
' DESCRIPTION:
' Takes a long integer and due to the bytes reverse order it extracts the
' individual bytes and converts them to hex appending them for an overall hex
' value
'*******************************************************************************
Private Function WordToHex(ByVal lValue As Long) As String
    Dim lByte As Long
    Dim lCount As Long
    
    For lCount = 0 To 3
        lByte = RShift(lValue, lCount * BITS_TO_A_BYTE) And _
            m_lOnBits(BITS_TO_A_BYTE - 1)
        WordToHex = WordToHex & Right("0" & Hex(lByte), 2)
    Next
End Function

'*******************************************************************************
' MD5 (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String to be digested
'
' RETURN VALUE:
' String - The MD5 digest
'
' DESCRIPTION:
' This function takes a string message and generates an MD5 digest for it.
' sMessage can be up to the VB string length limit of 2^31 (approx. 2 billion)
' characters.
'
' NOTE: Due to the way in which the string is processed the routine assumes a
' single byte character set. VB passes unicode (2-byte) character strings, the
' ConvertToWordArray function uses on the first byte for each character. This
' has been done this way for ease of use, to make the routine truely portable
' you could accept a byte array instead, it would then be up to the calling
' routine to make sure that the byte array is generated from their string in
' a manner consistent with the string type.
'*******************************************************************************
Public Function MD5(sMessage As String) As String
    Dim x() As Long
    Dim k   As Long
    Dim AA  As Long
    Dim BB  As Long
    Dim cc  As Long
    Dim dd  As Long
    Dim a   As Long
    Dim b   As Long
    Dim c   As Long
    Dim d   As Long
    
    Const S11 As Long = 7
    Const S12 As Long = 12
    Const S13 As Long = 17
    Const S14 As Long = 22
    Const S21 As Long = 5
    Const S22 As Long = 9
    Const S23 As Long = 14
    Const S24 As Long = 20
    Const S31 As Long = 4
    Const S32 As Long = 11
    Const S33 As Long = 16
    Const S34 As Long = 23
    Const S41 As Long = 6
    Const S42 As Long = 10
    Const S43 As Long = 15
    Const S44 As Long = 21

    ' Steps 1 and 2.  Append padding bits and length and convert to words
    x = ConvertToWordArray(sMessage)
    
    ' Step 3.  Initialise
    a = &H67452301
    b = &HEFCDAB89
    c = &H98BADCFE
    d = &H10325476

    ' Step 4.  Process the message in 16-word blocks
    For k = 0 To UBound(x) Step 16
        AA = a
        BB = b
        cc = c
        dd = d
    
        ' The hex number on the end of each of the following procedure calls is
        ' an element from the 64 element table constructed with
        ' T(i) = Int(4294967296 * Abs(Sin(i))) where i is 1 to 64.
        '
        ' However, for speed we don't want to calculate the value every time.
        FF a, b, c, d, x(k + 0), S11, &HD76AA478
        FF d, a, b, c, x(k + 1), S12, &HE8C7B756
        FF c, d, a, b, x(k + 2), S13, &H242070DB
        FF b, c, d, a, x(k + 3), S14, &HC1BDCEEE
        FF a, b, c, d, x(k + 4), S11, &HF57C0FAF
        FF d, a, b, c, x(k + 5), S12, &H4787C62A
        FF c, d, a, b, x(k + 6), S13, &HA8304613
        FF b, c, d, a, x(k + 7), S14, &HFD469501
        FF a, b, c, d, x(k + 8), S11, &H698098D8
        FF d, a, b, c, x(k + 9), S12, &H8B44F7AF
        FF c, d, a, b, x(k + 10), S13, &HFFFF5BB1
        FF b, c, d, a, x(k + 11), S14, &H895CD7BE
        FF a, b, c, d, x(k + 12), S11, &H6B901122
        FF d, a, b, c, x(k + 13), S12, &HFD987193
        FF c, d, a, b, x(k + 14), S13, &HA679438E
        FF b, c, d, a, x(k + 15), S14, &H49B40821
    
        GG a, b, c, d, x(k + 1), S21, &HF61E2562
        GG d, a, b, c, x(k + 6), S22, &HC040B340
        GG c, d, a, b, x(k + 11), S23, &H265E5A51
        GG b, c, d, a, x(k + 0), S24, &HE9B6C7AA
        GG a, b, c, d, x(k + 5), S21, &HD62F105D
        GG d, a, b, c, x(k + 10), S22, &H2441453
        GG c, d, a, b, x(k + 15), S23, &HD8A1E681
        GG b, c, d, a, x(k + 4), S24, &HE7D3FBC8
        GG a, b, c, d, x(k + 9), S21, &H21E1CDE6
        GG d, a, b, c, x(k + 14), S22, &HC33707D6
        GG c, d, a, b, x(k + 3), S23, &HF4D50D87
        GG b, c, d, a, x(k + 8), S24, &H455A14ED
        GG a, b, c, d, x(k + 13), S21, &HA9E3E905
        GG d, a, b, c, x(k + 2), S22, &HFCEFA3F8
        GG c, d, a, b, x(k + 7), S23, &H676F02D9
        GG b, c, d, a, x(k + 12), S24, &H8D2A4C8A
            
        hh a, b, c, d, x(k + 5), S31, &HFFFA3942
        hh d, a, b, c, x(k + 8), S32, &H8771F681
        hh c, d, a, b, x(k + 11), S33, &H6D9D6122
        hh b, c, d, a, x(k + 14), S34, &HFDE5380C
        hh a, b, c, d, x(k + 1), S31, &HA4BEEA44
        hh d, a, b, c, x(k + 4), S32, &H4BDECFA9
        hh c, d, a, b, x(k + 7), S33, &HF6BB4B60
        hh b, c, d, a, x(k + 10), S34, &HBEBFBC70
        hh a, b, c, d, x(k + 13), S31, &H289B7EC6
        hh d, a, b, c, x(k + 0), S32, &HEAA127FA
        hh c, d, a, b, x(k + 3), S33, &HD4EF3085
        hh b, c, d, a, x(k + 6), S34, &H4881D05
        hh a, b, c, d, x(k + 9), S31, &HD9D4D039
        hh d, a, b, c, x(k + 12), S32, &HE6DB99E5
        hh c, d, a, b, x(k + 15), S33, &H1FA27CF8
        hh b, c, d, a, x(k + 2), S34, &HC4AC5665
    
        ii a, b, c, d, x(k + 0), S41, &HF4292244
        ii d, a, b, c, x(k + 7), S42, &H432AFF97
        ii c, d, a, b, x(k + 14), S43, &HAB9423A7
        ii b, c, d, a, x(k + 5), S44, &HFC93A039
        ii a, b, c, d, x(k + 12), S41, &H655B59C3
        ii d, a, b, c, x(k + 3), S42, &H8F0CCC92
        ii c, d, a, b, x(k + 10), S43, &HFFEFF47D
        ii b, c, d, a, x(k + 1), S44, &H85845DD1
        ii a, b, c, d, x(k + 8), S41, &H6FA87E4F
        ii d, a, b, c, x(k + 15), S42, &HFE2CE6E0
        ii c, d, a, b, x(k + 6), S43, &HA3014314
        ii b, c, d, a, x(k + 13), S44, &H4E0811A1
        ii a, b, c, d, x(k + 4), S41, &HF7537E82
        ii d, a, b, c, x(k + 11), S42, &HBD3AF235
        ii c, d, a, b, x(k + 2), S43, &H2AD7D2BB
        ii b, c, d, a, x(k + 9), S44, &HEB86D391
    
        a = AddUnsigned(a, AA)
        b = AddUnsigned(b, BB)
        c = AddUnsigned(c, cc)
        d = AddUnsigned(d, dd)
    Next
    
    ' Step 5.  Output the 128 bit digest
    MD5 = LCase(WordToHex(a) & WordToHex(b) & WordToHex(c) & WordToHex(d))
End Function


Attribute VB_Name = "PanelClassStats"
Attribute VB_Base = "0{614C438D-6742-4754-9AF3-02A1E1F7EF5F}{81F8A87B-760D-4317-8F90-FB36714AF564}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const line_height = 11
' >>> range definitions
Private Const DEF_window = "defs_win_cls_stats"
Private Const RNG_class = "class_items"
Private Const RNG_grade = "class_grade_"
Private Const RNG_count = "class_count_"
' >>> remember list height
Private PCSheight As Integer
Private PCSevent As Boolean
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Dim arr() As String
    Me.RightToLeft = True
    PCSheight = 200
    PCSevent = True
    ListHide
    s = Range(DEF_window).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    PCSgrade.List = Array("הכל", "כיתה א'", "כיתה ב'", "כיתה ג'", "כיתה ד'", "כיתה ה'", "כיתה ו'")
    arr = RangeToStrArr(Range(RNG_class))
    SortStrArray arr, "a"
    PCSclass.List = arr
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> remember form location
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, DEF_window
    UpdatesOn
End Sub
' >>> show classes statistics help
Private Sub StatsHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-מצבת")
End Sub
' >>> repopulate list based on grade selection
Private Sub PCSgrade_Change()
    If PCSevent Then
        PCSevent = False
        PCSclass.ListIndex = -1
        PCSevent = True
        CreateClassStats
    End If
End Sub
' >>> repopulate list based on class selection
Private Sub PCSclass_Change()
    If PCSevent Then
        PCSevent = False
        PCSgrade.ListIndex = -1
        PCSevent = True
        CreateClassStats
    End If
End Sub
' >>> clear grade selection when [delete] is pressed
Private Sub PCSgrade_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    PCSevent = False
    If KeyCode = 46 Then PCSgrade.ListIndex = -1
    PCSevent = True
    ListHide
End Sub
' >>> clear class selection when [delete] is pressed
Private Sub PCSclass_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    PCSevent = False
    If KeyCode = 46 Then PCSclass.ListIndex = -1
    PCSevent = True
    ListHide
End Sub
' >>> show/hide list
Private Sub PCSdisp_Click()
    If PCSdisp.Caption = "הצג" Then
        CreateClassStats
        ListShow
    Else
        ListHide
    End If
End Sub
' >>> create the classes stats list
Private Sub CreateClassStats()
    Dim grd As String, cls As String
    Dim ind As Integer
    grd = Trim(PCSgrade.Text)
    cls = Trim(PCSclass.Text)
    If Len(grd) = 7 Then grd = Mid(grd, 6, 1)
    ind = 1
' get data from classes to populate list
    If grd <> "" Then ' based on grade
        ind = BuildClassStatsByGrade(grd)
        ListShow
    Else ' based on class
        If cls <> "" Then
            ind = BuildClassStatsByClass(cls)
            ind = BuildClassStatsByClassBreakdown(cls, ind)
            ListShow
        Else
            ListHide
        End If
    End If
' fix list scroll height
    PCSframe.ScrollHeight = ind * line_height + 24
' hide any leftover rows
    Do While HideRow(ind)
        ind = ind + 1
    Loop
End Sub
' >>> build the classes stats list based on a grade
Private Function BuildClassStatsByGrade(grd As String) As Integer
    Dim c1 As String, c2 As String, c3 As String, c4 As String
    Dim rw As String, cls As String
    Dim ind As Integer
    Dim cl As Range
    ind = 1
    For Each cl In Range(RNG_class)
        cls = Trim(cl.Cells(1))
        If cls <> "" Then
            rw = Right("00" + CStr(ind), 2)
            If Not TestControlExists("Label_n_" + rw) Then AddRow (ind)
            c1 = GetCount(cl, "1", IIf(Len(grd) = 1, grd, ""))
            c2 = GetCount(cl, "2", IIf(Len(grd) = 1, grd, ""))
            c3 = GetCount(cl, "3", IIf(Len(grd) = 1, grd, ""))
            c4 = GetCount(cl, "4", IIf(Len(grd) = 1, grd, ""))
            If Trim(c1 + c2 + c3 + c4) <> "" Then
                PCSframe.Controls("Label_n_" + rw).Caption = " " + cls
                PCSframe.Controls("Label_n_" + rw).Visible = True
                PCSframe.Controls("Label_1_" + rw).Caption = c1
                PCSframe.Controls("Label_1_" + rw).Visible = True
                PCSframe.Controls("Label_2_" + rw).Caption = c2
                PCSframe.Controls("Label_2_" + rw).Visible = True
                PCSframe.Controls("Label_3_" + rw).Caption = c3
                PCSframe.Controls("Label_3_" + rw).Visible = True
                PCSframe.Controls("Label_4_" + rw).Caption = c4
                PCSframe.Controls("Label_4_" + rw).Visible = True
                ind = ind + 1
            End If
        End If
    Next
    BuildClassStatsByGrade = ind
End Function
' >>> build the classes stats list based on a class
Private Function BuildClassStatsByClass(cll As String) As Integer
    Dim c1 As String, c2 As String, c3 As String, c4 As String
    Dim rw As String, cls As String
    Dim ind As Integer
    Dim cl As Range
    ind = 1
    For Each cl In Range(RNG_class)
        cls = Trim(cl.Cells(1))
        If cls = cll Then
            rw = Right("00" + CStr(ind), 2)
            If Not TestControlExists("Label_n_" + rw) Then AddRow (ind)
            c1 = GetCount(cl, "1", " ")
            c2 = GetCount(cl, "2", " ")
            c3 = GetCount(cl, "3", " ")
            c4 = GetCount(cl, "4", " ")
            PCSframe.Controls("Label_n_" + rw).Caption = " " + cls
            PCSframe.Controls("Label_n_" + rw).Visible = True
            PCSframe.Controls("Label_1_" + rw).Caption = c1
            PCSframe.Controls("Label_1_" + rw).Visible = True
            PCSframe.Controls("Label_2_" + rw).Caption = c2
            PCSframe.Controls("Label_2_" + rw).Visible = True
            PCSframe.Controls("Label_3_" + rw).Caption = c3
            PCSframe.Controls("Label_3_" + rw).Visible = True
            PCSframe.Controls("Label_4_" + rw).Caption = c4
            PCSframe.Controls("Label_4_" + rw).Visible = True
            ind = ind + 1
            rw = Right("00" + CStr(ind), 2)
            If Not TestControlExists("Label_n_" + rw) Then AddRow (ind)
            c1 = GetGrades(cl, "1")
            c2 = GetGrades(cl, "2")
            c3 = GetGrades(cl, "3")
            c4 = GetGrades(cl, "4")
            PCSframe.Controls("Label_n_" + rw).Caption = ""
            PCSframe.Controls("Label_n_" + rw).Visible = True
            PCSframe.Controls("Label_1_" + rw).Caption = c1
            PCSframe.Controls("Label_1_" + rw).Visible = True
            PCSframe.Controls("Label_2_" + rw).Caption = c2
            PCSframe.Controls("Label_2_" + rw).Visible = True
            PCSframe.Controls("Label_3_" + rw).Caption = c3
            PCSframe.Controls("Label_3_" + rw).Visible = True
            PCSframe.Controls("Label_4_" + rw).Caption = c4
            PCSframe.Controls("Label_4_" + rw).Visible = True
            ind = ind + 1
        End If
    Next
    BuildClassStatsByClass = ind
End Function
' >>> build the classes stats (breakdown) list based on a class
Private Function BuildClassStatsByClassBreakdown(cls As String, ind As Integer) As Integer
    Dim cl As Range
    HideRow (ind)
    ind = ind + 1
    For Each cl In Range(GRN_grd_levels)
        ind = BuildClassBreakdownRow(cls, Trim(cl.Text), ind)
    Next
    BuildClassStatsByClassBreakdown = ind
End Function
' >>> build a single class count row per classes breakdown
Private Function BuildClassBreakdownRow(cls As String, grd As String, ind As Integer) As Integer
    Dim rw As String
    rw = Right("00" + CStr(ind), 2)
    If Not TestControlExists("Label_n_" + rw) Then AddRow (ind)
    PCSframe.Controls("Label_n_" + rw).Caption = "כיתה " + grd
    PCSframe.Controls("Label_n_" + rw).Visible = True
    PCSframe.Controls("Label_1_" + rw).Caption = GetCountBreak(cls, Range(GRN_ppl_class_1), grd)
    PCSframe.Controls("Label_1_" + rw).Visible = True
    PCSframe.Controls("Label_2_" + rw).Caption = GetCountBreak(cls, Range(GRN_ppl_class_2), grd)
    PCSframe.Controls("Label_2_" + rw).Visible = True
    PCSframe.Controls("Label_3_" + rw).Caption = GetCountBreak(cls, Range(GRN_ppl_class_3), grd)
    PCSframe.Controls("Label_3_" + rw).Visible = True
    PCSframe.Controls("Label_4_" + rw).Caption = GetCountBreak(cls, Range(GRN_ppl_class_4), grd)
    PCSframe.Controls("Label_4_" + rw).Visible = True
    BuildClassBreakdownRow = ind + 1
End Function
' >>> get pupils count for a cross of class & hour, but for spesific grade
Private Function GetCountBreak(cls As String, hr As Range, grd As String) As String
    Dim rng As Range, cl As Range
    Dim c As Integer
    Set rng = Intersect(Range(GRN_ppl_all_data), hr.EntireColumn)
    c = 0
    For Each cl In rng.Rows
        If Left(Intersect(cl.EntireRow, Range(GRN_ppl_grd_data)), 2) = grd Then
            If Left(cl.Text, Len(cls)) = cls Then c = c + 1
        End If
    Next
    GetCountBreak = ""
    If c > 0 Then GetCountBreak = c
End Function
' >>> get pupils count for a cross of class & hour, but only if in grade
Private Function GetCount(row As Range, no As String, grd As String) As String
    Dim rng As Range
    Dim s As String
    GetCount = ""
    Set rng = Intersect(row.EntireRow, Range(RNG_grade + no).EntireColumn)
    If Not (rng Is Nothing) Then
        s = rng.Cells(1)
        If InStr(s, Trim(grd)) > 0 Then
            Set rng = Intersect(row.EntireRow, Range(RNG_count + no).EntireColumn)
            If Not (rng Is Nothing) Then
                GetCount = rng.Cells(1)
                If GetCount <> "" Then
                    If GetCount = 0 Then
                        GetCount = ""
                    Else
                        If grd = "" Then GetCount = GetCount + " " + GetGrades(row, no)
                    End If
                End If
            End If
        End If
    End If
End Function
' >>> get pupils grades for a cross of class & hour
Private Function GetGrades(row As Range, no As String) As String
    Dim rng As Range
    GetGrades = ""
    Set rng = Intersect(row.EntireRow, Range(RNG_grade + no).EntireColumn)
    If Not (rng Is Nothing) Then GetGrades = rng.Cells(1)
End Function
' >>> add a 5 cells label row to list (if not already there)
Private Sub AddRow(ind As Integer)
    Dim ref As MSForms.Label
    Dim lbl As MSForms.Label
    Dim rw As String
    rw = Right("00" + CStr(ind), 2)
    Set ref = PCSframe.Controls("Label_n_01")
    Set lbl = PCSframe.Controls.add("Forms.Label.1", "Label_n_" + rw)
    With lbl
        .Left = ref.Left
        .Top = ref.Top + (ind - 1) * line_height
        .Height = ref.Height
        .Width = ref.Width
        .TextAlign = ref.TextAlign
        .BackColor = ref.BackColor
        .BorderStyle = ref.BorderStyle
        .Visible = True
    End With
    AddLabel "1", ind
    AddLabel "2", ind
    AddLabel "3", ind
    AddLabel "4", ind
End Sub
Private Sub AddLabel(no As String, ind As Integer)
    Dim ref As MSForms.Label
    Dim lbl As MSForms.Label
    Dim rw As String
    rw = Right("00" + CStr(ind), 2)
    Set ref = PCSframe.Controls("Label_" + no + "_01")
    Set lbl = PCSframe.Controls.add("Forms.Label.1", "Label_" + no + "_" + rw)
    With lbl
        .Left = ref.Left
        .Top = ref.Top + (ind - 1) * line_height
        .Height = ref.Height
        .Width = ref.Width
        .TextAlign = ref.TextAlign
        .BackColor = ref.BackColor
        .BorderStyle = ref.BorderStyle
        .Visible = True
    End With
End Sub
' >>> hide row #(ind) and return false when row doesn't exist
Private Function HideRow(ind As Integer) As Boolean
    Dim rw As String
    HideRow = True
    rw = Right("00" + CStr(ind), 2)
    If TestControlExists("Label_n_" + rw) Then
        Me.Controls("Label_n_" + rw).Visible = False
        Me.Controls("Label_1_" + rw).Visible = False
        Me.Controls("Label_2_" + rw).Visible = False
        Me.Controls("Label_3_" + rw).Visible = False
        Me.Controls("Label_4_" + rw).Visible = False
    Else
        HideRow = False
    End If
End Function
' >>> check if a control exist
Public Function TestControlExists(name As String) As Boolean
    Dim ctrl As Control
    TestControlExists = False
    For Each ctrl In Me.Controls
        If ctrl.name = name Then TestControlExists = True
    Next
End Function
' >>> show the list
Private Sub ListShow()
    PanelClassStats.Height = PCSheight
    PCSdisp.Caption = "הסתר"
End Sub
' >>> hide the list
Private Sub ListHide()
    PanelClassStats.Height = 54
    PCSdisp.Caption = "הצג"
End Sub


Attribute VB_Name = "ModuleProblems"
Option Explicit
' >>> range definitions
Private Const RNG_data = "pupils_data"
Private Const RNG_probs = "pupils_problems"
Private Const RNG_marks = "pupils_marks"
Private Const RNG_family = "pupils_family"
Private Const RNG_grade = "pupils_grade"
Private Const RNG_name_l = "pupils_name_last"
Private Const RNG_name_f = "pupils_name_first"
Private Const RNG_class_1 = "pupils_class_1"
Private Const RNG_class_2 = "pupils_class_2"
Private Const RNG_class_3 = "pupils_class_3"
Private Const RNG_class_4 = "pupils_class_4"
Private Const RNG_hours = "pupils_hours"
Private Const RNG_kid_n = "pupils_kid_number"
Private Const RNG_dad_nm = "pupils_dad"
Private Const RNG_mom_nm = "pupils_mom"
Private Const RNG_phn_1 = "pupils_phone_h"
Private Const RNG_phn_2 = "pupils_phone_d"
Private Const RNG_phn_3 = "pupils_phone_m"
Private Const RNG_pay_req = "pupils_pay_req"
Private Const RNG_pay_act = "pupils_pay_act"
Private Const RNG_pay_rem = "pupils_pay_rem"
Private Const RNG_pay_typ = "pupils_pay_type"
Private Const RNG_pay_inv = "pupils_invoice"
' >>> check a pupil for problems and mark it in problems column
Public Sub CheckPupilRecord(cl As Range)
    Dim fam As String, grd As String, lnm As String, fnm As String
    Dim cl1 As String, cl2 As String, cl3 As String, cl4 As String
    Dim hrs As String, kid As String
    Dim py1 As String, py2 As String, pyr As String
    Dim pyt As String, inv As String
    Dim dad As String, mom As String
    Dim ph1 As String, ph2 As String, ph3 As String
    Dim row As Range, rng As Range
    Dim mrk As String
    Dim res As Boolean, inp As Boolean
' get data
    Set row = cl.EntireRow
    fam = InterVal(row, Range(RNG_family).EntireColumn)
    grd = InterVal(row, Range(RNG_grade).EntireColumn)
    lnm = InterVal(row, Range(RNG_name_l).EntireColumn)
    fnm = InterVal(row, Range(RNG_name_f).EntireColumn)
    cl1 = InterVal(row, Range(RNG_class_1).EntireColumn)
    cl2 = InterVal(row, Range(RNG_class_2).EntireColumn)
    cl3 = InterVal(row, Range(RNG_class_3).EntireColumn)
    cl4 = InterVal(row, Range(RNG_class_4).EntireColumn)
    hrs = CStr(ConvInt(InterVal(row, Range(RNG_hours).EntireColumn), 0))
    kid = CStr(ConvInt(InterVal(row, Range(RNG_kid_n).EntireColumn), 0))
    py1 = CStr(ConvInt(InterVal(row, Range(RNG_pay_req).EntireColumn), 0))
    py2 = CStr(ConvInt(InterVal(row, Range(RNG_pay_act).EntireColumn), 0))
    pyr = InterVal(row, Range(RNG_pay_rem).EntireColumn)
    pyt = InterVal(row, Range(RNG_pay_typ).EntireColumn)
    inv = InterVal(row, Range(RNG_pay_inv).EntireColumn)
    dad = InterVal(row, Range(RNG_dad_nm).EntireColumn)
    mom = InterVal(row, Range(RNG_mom_nm).EntireColumn)
    ph1 = InterVal(row, Range(RNG_phn_1).EntireColumn)
    ph2 = InterVal(row, Range(RNG_phn_2).EntireColumn)
    ph3 = InterVal(row, Range(RNG_phn_3).EntireColumn)
' is kid in play
    inp = False
    If CInt(hrs) > 0 Then inp = True
    If cl1 <> "" Or cl2 <> "" Or cl3 <> "" Or cl4 <> "" Then inp = True
    If Int(py2) > 0 Or pyt <> "" Or pyr <> "" Then inp = True
' calc problems
    mrk = ""
    If inp Then
        mrk = GetPupilMark(cl)
        mrk = CalcPupilMark(mrk, "a1", CheckA1(grd, lnm, fnm)) ' check [a1] - missing: grade or name
        mrk = CalcPupilMark(mrk, "a2", CheckA2(grd, lnm, fnm)) ' check [a2] - kid grade/name already exist
        mrk = CalcPupilMark(mrk, "a3", CheckA3(dad, mom)) ' check [a3] - missing: father and/or mother name
        mrk = CalcPupilMark(mrk, "a4", CheckA4(ph1, ph2, ph3)) ' check [a4] - missing: any phone number
        mrk = CalcPupilMark(mrk, "b1", CheckB1(hrs, cl1, cl2, cl3, cl4)) ' check [b1] - not participating in 4 hours
        mrk = CalcPupilMark(mrk, "b2", CheckB2(cl1, cl2, cl3, cl4)) ' check [b2] - double class spans only one hour
        mrk = CalcPupilMark(mrk, "b3", CheckB3(cl1, cl2, cl3, cl4)) ' check [b3] - same class in more than one hour
        mrk = CalcPupilMark(mrk, "c1", CheckC1(row, kid)) ' check [c1] - kid no# missing or mismatched in family order
        mrk = CalcPupilMark(mrk, "c2", CheckC2(pyt, inv)) ' check [c2] - missing payment type and/or invoice number
        mrk = CalcPupilMark(mrk, "c3", CheckC3(py1, py2, pyr)) ' check [c3] - required payment != total payment
        mrk = CalcPupilMark(mrk, "c4", CheckC4(pyr)) ' check [c4] - there is a debt
    End If
' save new problems
    res = SetPupilMark(cl, mrk)
    SetPupilProblems cl, mrk
End Sub
' >>> check all pupils for problems and mark it in problems column
Public Sub CheckAllPupils(prg As Boolean)
    Dim rng As Range, cl As Range, prn As Range
    Dim ind As Long, cnt As Long
    Dim count As Integer
    Set prn = Intersect(Range(RNG_data), Range(RNG_probs).EntireColumn)
    Set rng = Range(RNG_data).Rows
    UpdatesOff
    If prg Then
        ControlPupils.PupilsCheckAll.Visible = False
        ControlPupils.LabelProgress.Visible = True
    End If
    cnt = rng.count
    ind = 1
    For Each cl In rng
        CheckPupilRecord cl.Cells(1)
        If prg Then
            ControlPupils.LabelProgress.Caption = CStr(Int(100 * ind / cnt)) + "%"
            ControlPupils.Repaint
        End If
        ind = ind + 1
    Next
    count = Application.WorksheetFunction.CountIf(prn, "*בעיות*")
    If count > 0 Then
        MsgBox ("נמצאו (" + CStr(count) + ") בעיות")
    Else
        MsgBox ("לא נמצאו בעיות")
    End If
    If prg Then
        ControlPupils.LabelProgress.Visible = False
        ControlPupils.PupilsCheckAll.Visible = True
    End If
    UpdatesOn
End Sub
' >>> modify a mark to show as [problem] or [ok]
Public Sub ModifyPupilMark(cl As Range, mrk As String, ok As Boolean)
    Dim m As String, act As String
    Dim non As Boolean
    act = "p"
    If ok Then act = "o"
    m = CalcPupilMark(GetPupilMark(cl), mrk, act)
    UpdatesOff
    non = SetPupilMark(cl, m)
    SetPupilProblems cl, m
    UpdatesOn
End Sub
' >>> remove a mark or marks of a pupil
Public Sub RemovePupilMarks(cl As Range, mrk As String)
    Dim marks() As String, mark As String, m As Variant
    Dim non As Boolean
    marks = Split(mrk, ",")
    mark = GetPupilMark(cl)
    For Each m In marks
        mark = CalcPupilMark(mark, CStr(m), "r")
    Next
    non = SetPupilMark(cl, mark)
    SetPupilProblems cl, mark
End Sub
' >>> add/remove a mark to/from a pupil's marks string
' >>>   marks   = current marks string
' >>>   mark    = new/old single mark
' >>>   act     = action ("a" = set as problem if not already , "p" = set as problem , "o" = set as ok , "r" = remove )
Function CalcPupilMark(marks As String, mark As String, act As String) As String
    Dim ms As String, m As String
    ms = UCase(marks)
    m = UCase(mark)
    If InStr(ms, m) > 0 Then
        If act <> "a" Then
            ms = Replace(ms, "[" + m + "]", "")
            ms = Replace(ms, "(" + m + ")", "")
            ms = Replace(ms, ",,", ",")
            If Left(ms, 1) = "," Then ms = Mid(ms, 2)
            If Right(ms, 1) = "," Then ms = Left(ms, Len(ms) - 1)
        End If
    Else
        If act = "a" Then act = "p"
    End If
    Select Case act
        Case "p"
            ms = ms + ",[" + m + "]"
        Case "o"
            ms = ms + ",(" + m + ")"
    End Select
    If Left(ms, 1) = "," Then ms = Mid(ms, 2)
    CalcPupilMark = ms
End Function
' >>> get the "marks" for a pupil
Function GetPupilMark(cl As Range) As String
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(RNG_marks).EntireColumn)
    GetPupilMark = Trim(rng.Cells(1))
End Function
' >>> set the "marks" for a pupil
Function SetPupilMark(cl As Range, mark As String) As Boolean
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(RNG_marks).EntireColumn)
    rng.Cells(1) = Trim(mark)
    SetPupilMark = (Trim(mark) <> "")
End Function
' >>> set the problems field for a pupil
Private Sub SetPupilProblems(cl As Range, mark As String)
    Dim prb As Integer, ok As Integer
    Dim txt As String
    Dim rng As Range
    Set rng = Intersect(cl.EntireRow, Range(RNG_probs).EntireColumn)
    prb = Len(mark) - Len(Replace(mark, "[", ""))
    ok = Len(mark) - Len(Replace(mark, "(", ""))
    If prb > 0 Then txt = "בעיות (" + CStr(prb) + ")"
    If ok > 0 Then
        If txt <> "" Then txt = txt + ", "
        txt = txt + "תקין (" + CStr(ok) + ")"
    End If
    rng.Cells(1) = Trim(txt)
End Sub
' >>> check [A1] - missing: grade or name (or too short) [חסרה כיתה / שם פרטי או משפחה
Private Function CheckA1(grd As String, lnm As String, fnm As String) As String
    If Len(Trim(grd + lnm + fnm)) < 10 Or grd = "" Or lnm = "" Or fnm = "" Then
        CheckA1 = "a"
    Else
        CheckA1 = "r"
    End If
End Function
' >>> check [A2] - kid grade/name already exist [צירוף כיתה + משפחה + פרטי קיים כבר]
Private Function CheckA2(grd As String, lnm As String, fnm As String) As String
    Dim rg1 As Range, rg2 As Range, rg3 As Range
    Set rg1 = Intersect(Range(RNG_data), Range(RNG_grade).EntireColumn)
    Set rg2 = Intersect(Range(RNG_data), Range(RNG_name_l).EntireColumn)
    Set rg3 = Intersect(Range(RNG_data), Range(RNG_name_f).EntireColumn)
    Dim c As Integer
    c = Application.WorksheetFunction.CountIfs(rg1, grd, rg2, lnm, rg3, fnm)
    If c <> 1 Then
        CheckA2 = "a"
    Else
        CheckA2 = "r"
    End If
End Function
' >>> check [A3] - missing: father and/or mother name [אין שם אב ו/או אם]
Private Function CheckA3(dad As String, mom As String) As String
    If dad = "" Or mom = "" Then
        CheckA3 = "a"
    Else
        CheckA3 = "r"
    End If
End Function
' >>> check [A4] - missing: any phone number [אין אף מספר טלפון]
Private Function CheckA4(ph1 As String, ph2 As String, ph3 As String) As String
    If ph1 = "" And ph2 = "" And ph3 = "" Then
        CheckA4 = "a"
    Else
        CheckA4 = "r"
    End If
End Function
' >>> check [B1] - not participating in 4 hours [בשחף אבל לא משתתף בארבע שעות מלאות]
Private Function CheckB1(hrs As String, cl1 As String, cl2 As String, cl3 As String, cl4 As String) As String
    Dim n As Integer, s As String
    CheckB1 = "r"
    If CInt(hrs) > 0 And CInt(hrs) < 4 Then
        n = 0
        s = Trim(Range(GRN_def_no_participation))
        If s = cl1 Then n = n + 1
        If s = cl2 Then n = n + 1
        If s = cl3 Then n = n + 1
        If s = cl4 Then n = n + 1
        If hrs + n <> 4 Then CheckB1 = "a"
    End If
End Function
' >>> check [B2] - double class spans only one hour [חוג כפול רק בשעה אחת]
Private Function CheckB2(cl1 As String, cl2 As String, cl3 As String, cl4 As String) As String
    Dim c1 As Boolean, c3 As Boolean
    c1 = (InStr(cl1, "12") > 0 Or InStr(cl1, "34") > 0)
    c3 = (InStr(cl3, "12") > 0 Or InStr(cl3, "34") > 0)
    If (c1 And cl2 <> "") Or (c3 And cl4 <> "") Then
        CheckB2 = "a"
    Else
        CheckB2 = "r"
    End If
End Function
' >>> check [B3] - same class in more than one hour [חוג זהה ביותר משעה אחת]
Private Function CheckB3(cl1 As String, cl2 As String, cl3 As String, cl4 As String) As String
    Dim c1 As String, c2 As String, c3 As String, c4 As String
    c1 = TrimStr(cl1, 2)
    If c1 = "" Then c1 = "[1]"
    c2 = TrimStr(cl2, 2)
    If c2 = "" Then c2 = "[2]"
    c3 = TrimStr(cl3, 2)
    If c3 = "" Then c3 = "[3]"
    c4 = TrimStr(cl4, 2)
    If c4 = "" Then c4 = "[4]"
    If c1 = c2 Or c1 = c3 Or c1 = c4 Or c2 = c3 Or c2 = c4 Or c3 = c4 Then
        CheckB3 = "a"
    Else
        CheckB3 = "r"
    End If
End Function
' >>> check [C1] - kid no# missing or mismatched in family order [מספר ילד לא קיים או לא מתאים למשפחה]
Private Function CheckC1(ByVal row As Range, ByVal kid As String)
    If kid <> CalcKidNumber(row) Then
        CheckC1 = "a"
    Else
        CheckC1 = "r"
    End If
End Function
' >>> check [C2] - missing payment type and/or invoice number [אין סוג תשלום ו/או מס' קבלה]
Private Function CheckC2(pyt As String, inv As String) As String
    If pyt = "" Or inv = "" Then
        CheckC2 = "a"
    Else
        CheckC2 = "r"
    End If
End Function
' >>> check [C3] - required payment != total payment [תשלום רצוי לא מתאים לתשלום בפועל ואין הערה]
Private Function CheckC3(py1 As String, py2 As String, pyr As String) As String
    If py1 <> py2 And pyr = "" Then
        CheckC3 = "a"
    Else
        CheckC3 = "r"
    End If
End Function
' >>> check [C4] - there is a debt [יש חוב]
Private Function CheckC4(pyr As String) As String
    Dim tx1 As String, tx2 As String
    tx1 = "חייב"
    tx2 = "חוב"
    If InStr(pyr, tx1) > 0 Or InStr(pyr, tx2) > 0 Then
        CheckC4 = "a"
    Else
        CheckC4 = "r"
    End If
End Function
' >>> check a range for valid IDs
Public Function RangeCheckIDs(rng As Range) As Integer
    Dim col_ok As Long, col_bad As Long
    Dim cl As Range
    Dim col As Long
    Dim count As Integer
    col_ok = RGB(255, 255, 255)
    col_bad = RGB(250, 0, 0)
    count = 0
    For Each cl In rng
        col = cl.Interior.Color
        If col = col_ok Or col = col_bad Then
            If IsValidIdNo(cl) Then
                cl.Interior.ColorIndex = xlNone
            Else
                cl.Interior.Color = col_bad
                count = count + 1
            End If
        End If
    Next
    RangeCheckIDs = count
End Function
' >>> check a range for valid phones
Public Function RangeCheckPhones(rng As Range) As Integer
    Dim col_ok As Long, col_bad As Long
    Dim cl As Range
    Dim col As Long
    Dim count As Integer
    col_ok = RGB(255, 255, 255)
    col_bad = RGB(250, 0, 0)
    count = 0
    For Each cl In rng
        col = cl.Interior.Color
        If col = col_ok Or col = col_bad Then
            If IsValidPhone(cl) Then
                cl.Interior.ColorIndex = xlNone
            Else
                cl.Interior.Color = col_bad
                count = count + 1
            End If
        End If
    Next
    RangeCheckPhones = count
End Function
' >>> returns the number of unresolved 'problems'
Public Function CountProblems() As Integer
    Dim rng As Range
    Dim cl As Range
    CountProblems = 0
    Set rng = Range(GRN_ppl_prb_data)
    For Each cl In rng
        If InStr(cl.Text, "[") > 0 Then CountProblems = CountProblems + 1
    Next
End Function


Attribute VB_Name = "PanelProblems"
Attribute VB_Base = "0{579249F4-1A66-4558-972F-085D0FD60A5D}{1726C9E0-9F2F-4D26-BAB0-D64C66A410CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> range definitions
Private Const DEF_window = "defs_win_problems"
Private Const RNG_data = "pupils_data"
Private Const RNG_marks = "pupils_marks"
' >>> local global variables
Private SAV_pupil As Range ' save current pupil's
Private ENA_event As Boolean ' turn local panel events on/off
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(DEF_window).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    ENA_event = True
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> remember form location
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, DEF_window
    UpdatesOn
End Sub
' >>> show problems help
Private Sub ProblemsHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-בעיות")
End Sub
' >>> mark problem [A1] as ok or not
Private Sub CheckBoxA1_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "A1", Me.CheckBoxA1.Value
    SheetFocus
End Sub
' >>> mark problem [A2] as ok or not
Private Sub CheckBoxA2_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "A2", Me.CheckBoxA2.Value
    SheetFocus
End Sub
' >>> mark problem [A3] as ok or not
Private Sub CheckBoxA3_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "A3", Me.CheckBoxA3.Value
    SheetFocus
End Sub
' >>> mark problem [A4] as ok or not
Private Sub CheckBoxA4_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "A4", Me.CheckBoxA4.Value
    SheetFocus
End Sub
' >>> mark problem [B1] as ok or not
Private Sub CheckBoxB1_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "B1", Me.CheckBoxB1.Value
    SheetFocus
End Sub
' >>> mark problem [B2] as ok or not
Private Sub CheckBoxB2_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "B2", Me.CheckBoxB2.Value
    SheetFocus
End Sub
' >>> mark problem [B3] as ok or not
Private Sub CheckBoxB3_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "B3", Me.CheckBoxB3.Value
    SheetFocus
End Sub
' >>> mark problem [C1] as ok or not
Private Sub CheckBoxC1_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "C1", Me.CheckBoxC1.Value
    SheetFocus
End Sub
' >>> mark problem [C2] as ok or not
Private Sub CheckBoxC2_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "C2", Me.CheckBoxC2.Value
    SheetFocus
End Sub
' >>> mark problem [C3] as ok or not
Private Sub CheckBoxC3_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "C3", Me.CheckBoxC3.Value
    SheetFocus
End Sub
' >>> mark problem [C4] as ok or not
Private Sub CheckBoxC4_Click()
    If ENA_event Then ModifyPupilMark SAV_pupil, "C4", Me.CheckBoxC4.Value
    SheetFocus
End Sub
' >>> show the pupil's problems marks by cell
Public Sub ShowPupilProblems(rng As Range)
    Dim cl As Range
    If rng.count = 1 Then
        If TestIn(Range(RNG_data), rng) Then
            Set cl = Intersect(Range(RNG_marks).EntireColumn, rng.EntireRow)
            ShowPupilProbs cl.Cells(1)
            Set SAV_pupil = cl
        Else
            ShowPupilProbs "*"
        End If
    Else
        ShowPupilProbs "*"
    End If
End Sub
' >>> show the pupil's problems marks by marks string
Public Sub ShowPupilProbs(mrk As String)
    Dim stt As Integer, row As Integer
    row = 5
    row = SetPupilProb(CheckBoxA1, row, AnalyzeMark(mrk, "A1"))
    row = SetPupilProb(CheckBoxA2, row, AnalyzeMark(mrk, "A2"))
    row = SetPupilProb(CheckBoxA3, row, AnalyzeMark(mrk, "A3"))
    row = SetPupilProb(CheckBoxA4, row, AnalyzeMark(mrk, "A4"))
    row = SetPupilProb(CheckBoxB1, row, AnalyzeMark(mrk, "B1"))
    row = SetPupilProb(CheckBoxB2, row, AnalyzeMark(mrk, "B2"))
    row = SetPupilProb(CheckBoxB3, row, AnalyzeMark(mrk, "B3"))
    row = SetPupilProb(CheckBoxC1, row, AnalyzeMark(mrk, "C1"))
    row = SetPupilProb(CheckBoxC2, row, AnalyzeMark(mrk, "C2"))
    row = SetPupilProb(CheckBoxC3, row, AnalyzeMark(mrk, "C3"))
    row = SetPupilProb(CheckBoxC4, row, AnalyzeMark(mrk, "C4"))
    If mrk = "*" Then
        LabelOK = "???"
    Else
        LabelOK = "תקין"
    End If
    LabelOK.Visible = (row = 5)
    row = row + 20
    If row < 70 Then row = 70
    PanelProblems.Height = row
End Sub
' >>> show the pupil's problems marks
Private Function SetPupilProb(chk As MSForms.CheckBox, row As Integer, stt As Integer) As Integer
    ENA_event = False
    chk.Value = (stt > 0)
    chk.Visible = (stt >= 0)
    If stt >= 0 Then
        chk.Top = row
        row = row + 15
    End If
    ENA_event = True
    SetPupilProb = row
End Function
' >>> return if a mark is set and as what type
Private Function AnalyzeMark(marks As String, mrk As String)
    AnalyzeMark = -1
    If InStr(marks, "[" + mrk) > 0 Then AnalyzeMark = 0
    If InStr(marks, "(" + mrk) > 0 Then AnalyzeMark = 1
End Function


Attribute VB_Name = "ControlDefs"
Attribute VB_Base = "0{D8C0DAF4-489E-4B1D-9B86-B737A43FE3E2}{2D86CCF2-C7B2-4ADE-84A7-A997F6CBD06B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> definitions
Private Const DEF_def_year = "defs_cal_year"
Private Const DEF_def_days = "defs_days"
Private Const DEF_def_months = "defs_months"
Private Const DEF_def_kid_1 = "defs_kid_1"
Private Const DEF_def_kid_2 = "defs_kid_2"
Private Const DEF_def_kid_3 = "defs_kid_3"
Private Const DEF_def_kid_4 = "defs_kid_4"
Private Const DEF_def_kid_y1 = "defs_kid_y1"
Private Const DEF_def_kid_y2 = "defs_kid_y2"
Private Const DEF_def_kid_y3 = "defs_kid_y3"
Private Const DEF_def_kid_y4 = "defs_kid_y4"
Private Const DEF_def_brg_top = "defs_win_bring_top"
Private Const DEF_def_filt_typ = "defs_filter_type"
Private Const DEF_def_fol_chg = "defs_win_follow_changes"
Private Const DEF_def_lok_prt = "defs_lock_protected"
Private Const DEF_def_hde_tab = "defs_hide_sensitive"
Private Const DEF_def_hde_pnl = "defs_hide_dangerous"
Private Const DEF_def_ppl_pos = "defs_win_pupil_pos"
Private Const DEF_def_cls_pos = "defs_win_class_pos"
Private Const DEF_def_grd_pos = "defs_win_grade_pos"
Private Const DEF_def_msc_pos = "defs_win_misc_pos"
Private Const DEF_def_stt_pos = "defs_win_cls_stats"
Private Const DEF_def_prb_pos = "defs_win_problems"
Private Const DEF_def_ppl_show = "defs_pupils_show"
Private Const DEF_def_ppl_sort = "defs_pupils_sort"
Private Const DEF_def_ppl_sdef = "defs_pupils_def_sort"
Private Const DEF_def_cls_ren = "defs_class_ren_ask"
Private Const DEF_def_cls_dbl = "defs_class_allow_dbl"
Private Const DEF_def_cap_min = "defs_cap_min"
Private Const DEF_def_cap_max = "defs_cap_max"
Private Const DEF_def_no_part = "defs_no_part"
Private Const DEF_def_grd_ren = "defs_grade_ren_ask"
Private Const DEF_def_pass = "aj;777"
' >>>
Private Const RNG_pupil_ids = "pupils_person_ids"
Private Const RNG_pupil_phones = "pupils_phones"
Private Const RNG_staff_phones = "staff_phones"
' >>> public variables
Public PUB_defs_on As Boolean
' >>> private variables
Private remember_lck As Boolean
Private remember_tab As Boolean
Private remember_pnl As Boolean
' ******* GENERAL *******
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(DEF_def_msc_pos).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    PUB_defs_on = False
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
    If Not PUB_defs_on Then
        PUB_defs_on = True
    End If
    FixLockButton
    FixCloudButtons
    If Range(GRN_def_auto_sync) > 0 Then
        DefsAttAuto.Enabled = True
    Else
        DefsAttAuto.Enabled = False
        DefsAttAuto.Value = False
    End If
    PaintSyncData
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> maintenance for sub page change
Private Sub MultiPage1_Change()
    Dim d1 As String, d2 As String
    PaintSyncData
    d1 = Range(GRN_def_att_app_last).Text & " 12"
    d2 = Format(Now(), "yyyy/mm/dd hh")
    DefsAttClose.Enabled = (d2 > d1)
End Sub
' >>> shift focus to the first cell
Sub GoToCorner()
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet4" Then
        Cells(1, 2).Select
        Cells(1, 1).Select
    End If
End Sub
' >>> maximize the defs window
Private Sub DefsMaxi_Click()
    Me.Width = 250
    Me.Height = 99
    Me.Caption = "ניהול הגדרות"
    Me.DefsMaxi.Visible = False
    Me.DefsMini.Visible = True
    Me.DefsLockHelp.Visible = True
End Sub
' >>> minimize the defs window
Private Sub DefsMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "הגדרות"
    Me.DefsMini.Visible = False
    Me.DefsMaxi.Top = Me.DefsMini.Top
    Me.DefsMaxi.Visible = True
    Me.DefsLockHelp.Visible = False
End Sub
' ******* HELP *******
' >>> show help for definitions - locks
Private Sub DefsLockHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-נעילות")
End Sub
' >>> show help for definitions - cloud
Private Sub DefsCloudHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-ענן")
End Sub
' >>> show help for definitions - resets
Private Sub DefsResetHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-איפוס")
End Sub
' >>> show help for definitions - checks & integrity
Private Sub DefsMiscHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-בדיקות")
End Sub
' >>> show help for definitions - exports
Private Sub DefsHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-יצוא")
End Sub
' >>> show help for definitions - attendance
Private Sub DefsAttHelp_Click()
    PanelHelp.ShowHelp ("הגדרות-נוכחות")
End Sub
' ******* LOCKS TAB *******
' >>> open or lock everything
Private Sub DefsLock_Click()
    Dim lk As Boolean
    lk = (DefsLock.Caption = "נעל")
    DefsCheckLock.Value = lk
    DefsCheckPages = lk
    DefsCheckTabs = lk
End Sub
' >>> lock/unlock cells
Private Sub DefsCheckLock_Click()
    If remember_lck <> DefsCheckLock.Value Then SetProtection DefsCheckLock.Value
    remember_lck = DefsCheckLock.Value
    FixLockButton
    InitAutoLock
End Sub
' >>> show/hide panels
Private Sub DefsCheckPages_Click()
    If remember_pnl <> DefsCheckPages.Value Then HidePanels DefsCheckPages.Value
    remember_pnl = DefsCheckPages.Value
    FixLockButton
    InitAutoLock
End Sub
' >>> show/hide tabs
Private Sub DefsCheckTabs_Click()
    If remember_tab <> DefsCheckTabs.Value Then HideTabs DefsCheckTabs.Value
    remember_tab = DefsCheckTabs.Value
    FixLockButton
    InitAutoLock
End Sub
' >>> fix the "lock" button status
Sub FixLockButton()
    If DefsCheckLock.Value And DefsCheckPages.Value And DefsCheckTabs.Value Then
        DefsLock.Caption = "פתח"
    Else
        DefsLock.Caption = "נעל"
    End If
End Sub
' ******* CLOUD TAB *******
' >>> turn cloud operation on/off
Private Sub DefsVerOn_Click()
    Dim x As String
    x = Range(GRN_def_cloud_status).Text
    x = IIf(x = "כן", "לא", "כן")
    Range(GRN_def_cloud_status) = x
    If x = "כן" Then DefsVerCheck_Click
    FixCloudButtons
End Sub
' >>> recheck cloud version
Private Sub DefsVerCheck_Click()
    If Range(GRN_def_cloud_status) = CN_yes Then
        PanelVersion.ResetMsg
        PanelVersion.DoVerCheck
    End If
    FixCloudButtons
End Sub
' >>> save current version on cloud if no higher version there
Private Sub DefsVerSave_Click()
    If Range(GRN_def_cloud_status) = CN_yes Then
        SaveCloudVersion False
    End If
    FixCloudButtons
End Sub
' >>> force save current version on cloud
Private Sub DefsVerForce_Click()
    Dim tx As String
    tx = "בחירה באופציה זאת תגדיר את הגרסה הנוכחית שאת/ה שומר עכשיו כגרסה העדכנית ביותר, האם את/ה בטוח ?"
    If Range(GRN_def_cloud_status) = CN_yes Then
        If AskDialog(tx, "yn") = "y" Then
            SaveCloudVersion True
        End If
    End If
    FixCloudButtons
End Sub
' >>> download support files and passport images
Private Sub DefsDownload_Click()
    Dim dr As String
    dr = Trim(Range(GRN_def_img_dir).Text)
    PanelVersion.ShowMsg "", "כשתתבקש, השתמש בסיסמה: " & DEF_def_pass
    DialogCloud.DownloadFiles CN_files_url, dr, CN_files_size
    PanelVersion.ShowMsg "", ""
End Sub
' >>> create a zip file to be uploaded to cloud
Private Sub DefsMakeUpload_Click()
    Dim path As String
    Dim pass As String
    Dim targ As String
    Dim cmnd As String
    path = Range(GRN_def_img_dir)
    If Right(path, 1) <> "\" Then path = path & "\"
    pass = DEF_def_pass
    targ = ThisWorkbook.path
    If Right(targ, 1) <> "\" Then targ = targ & "\"
    targ = targ & "shachaf_support_files"
    cmnd = path & "winrar a -afzip -ep -p" & pass & " " & targ & " " & path & "*.jpg " & path & "*.docx"
    On Error GoTo CatchErr
    Shell cmnd
CatchErr:
End Sub
' >>> fix the buttons realting to cloud & version
Sub FixCloudButtons()
    Dim x As Boolean
    x = (Range(GRN_def_cloud_status).Text = "כן")
    Me.DefsVerOn.Caption = IIf(x, "הפסק ענן", "הפעל ענן")
    Me.DefsVerCheck.Enabled = x
    Me.DefsVerSave.Enabled = (x And GBL_file_is_latest > 0)
    Me.DefsVerForce.Enabled = (x And GBL_file_is_latest < 0)
    Me.DefsMakeUpload.Enabled = (GBL_deployment = "master")
    Me.DefsSmsList.Enabled = (GBL_file_is_latest >= 0)
    If Range(GRN_def_year_end) = CN_yes Then
' ***#***
        Me.DefsVerOn.Enabled = False
        Me.DefsVerCheck.Enabled = False
        Me.DefsVerSave.Enabled = False
        Me.DefsVerForce.Enabled = False
' ***#***
    End If
End Sub
' ******* RESET TAB *******
' >>> reset all panels position
Private Sub DefsResetPanels_Click()
    Range(DEF_def_ppl_pos).Cells(1) = "20,1"
    Range(DEF_def_cls_pos).Cells(1) = "20,1"
    Range(DEF_def_grd_pos).Cells(1) = "20,1"
    Range(DEF_def_msc_pos).Cells(1) = "20,1"
    Range(DEF_def_stt_pos).Cells(1) = "-50,1"
    Range(DEF_def_prb_pos).Cells(1) = "-50,1"
    Range(GRN_def_assist_ppl_cls).Cells(1) = "1,100"
    Range(GRN_def_assist_ppl_width).Cells(1) = "140"
    Range(GRN_def_assist_ppl_tran).Cells(1) = "200"
    Range(GRN_def_img_pos).Cells(1) = "1,-50"
    Range(GRN_def_img_size).Cells(1) = "160"
'    ControlPupils.PupilMaxi_Click
    SheetFocus
End Sub
' >>> reset all cell comments
Private Sub DefsResetComments_Click()
    UpdatesOff
    PanelHelp.ResetAllComments
    UpdatesOn
End Sub
' >>> do all maintenance required for a new year
Private Sub DefsNewYear_Click()
    PanelNewYear.Show
End Sub
' >>> reset all definitions to factory settings
Private Sub DefsReset_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
' panels position
        DefsResetPanels_Click
        UpdatesOff
' payments
        Range(DEF_def_year).Cells(1) = GetSchoolYear()
        Range(DEF_def_days).Cells(1) = "34"
        Range(DEF_def_months).Cells(1) = "10"
        Range(DEF_def_kid_1).Cells(1) = "237"
        Range(DEF_def_kid_2).Cells(1) = "216"
        Range(DEF_def_kid_3).Cells(1) = "185"
        Range(DEF_def_kid_4).Cells(1) = "153"
        Range(DEF_def_kid_y1).Cells(1) = "0"
        Range(DEF_def_kid_y2).Cells(1) = "0"
        Range(DEF_def_kid_y3).Cells(1) = "0"
        Range(DEF_def_kid_y4).Cells(1) = "0"
' general
        Range(GRN_def_help_file).Cells(1) = "C:\shachaf\help.docx"
        Range(DEF_def_brg_top).Cells(1) = "כן"
        Range(DEF_def_filt_typ).Cells(1) = "כן"
        Range(DEF_def_fol_chg).Cells(1) = "כן"
        Range(DEF_def_lok_prt).Cells(1) = "כן"
        Range(DEF_def_hde_tab).Cells(1) = "כן"
        Range(DEF_def_hde_pnl).Cells(1) = "כן"
        Range(GRN_def_development).Cells(1) = "לא"
        Range(GRN_def_auto_lock).Cells(1) = "10"
        Range(GRN_def_testing).Cells(1) = "כן"
' pupils
        Range(DEF_def_ppl_show).Cells(1) = "כן"
        Range(DEF_def_ppl_sort).Cells(1) = "כן"
        Range(DEF_def_ppl_sdef).Cells(1) = "תלמיד (כיתה, משפחה, פרטי)"
        Range(GRN_def_ppl_filt_sec).Cells(1) = "לא"
        Range(GRN_def_img_dir).Cells(1) = "C:\shachaf"
' classes
        Range(DEF_def_cls_ren).Cells(1) = "כן"
        Range(DEF_def_cls_dbl).Cells(1) = "כן"
        Range(DEF_def_cap_min).Cells(1) = "12"
        Range(DEF_def_cap_max).Cells(1) = "18"
        Range(DEF_def_no_part).Cells(1) = "לא משתתף"
' grades
        Range(DEF_def_grd_ren).Cells(1) = "כן"
' attendance forms
        Range(GRN_def_attendance_file).Cells(1) = "תבנית_נוכחות"
        Range(GRN_def_attendance_head).Cells(1) = "[תאריך]"
        Range(GRN_def_attendance_cell).Cells(1) = "---"
        Range(GRN_def_attendance_add).Cells(1) = "5"
        Range(GRN_def_attendance_many).Cells(1) = "0.5"
        Range(GRN_def_attendance_sens_gen).Cells(1) = "כן"
        Range(GRN_def_attendance_sens).Cells(1) = "ללא"
        Range(GRN_def_attendance_sens_imp).Cells(1) = "כוכבית"
' assignment forms
        Range(GRN_def_assignment_file).Cells(1) = "תבנית_שיבוץ"
        Range(GRN_def_assignment_sort).Cells(1) = "כיתה + משפחה + פרטי"
        Range(GRN_def_assignment_merge).Cells(1) = "כן"
' online attendance
        Range(GRN_def_auto_sync).Cells(1) = "0"
' version control
        Range(GRN_def_cloud_status).Cells(1) = "כן"
        Range(GRN_def_cloud_save).Cells(1) = "כן"
        Range(GRN_def_ver_check_init).Cells(1) = "כן"
        Range(GRN_def_ver_check).Cells(1) = "5"
        Range(GRN_def_cloud_timeout).Cells(1) = "4000"
        Range(GRN_def_cloud_mark_exit).Cells(1) = "כן"
        Range(GRN_def_cloud_debug).Cells(1) = "כן"
        Range(GRN_def_cloud_debug_msg).Cells(1) = ""
' ---
        UpdatesOn
    End If
    SheetFocus
End Sub
' >>> reset main formulas in pupil, classes & grades tabs
Private Sub DefsResetFormulas_Click()
    UpdatesOff
    CopyNJFormulas Range("pupils_formulas"), Range("pupils_formulas_target")
    CopyNJFormulas Range("class_formulas"), Range("class_formulas_target")
    CopyNJFormulas Range("grade_formulas"), Range("grade_formulas_target")
    UpdatesOn
End Sub
' ******* CHECKS TAB *******
' >>> check all IDs and mark invalid
Private Sub DefsCheckIds_Click()
    Dim c As Integer
    c = RangeCheckIDs(Range(RNG_pupil_ids))
    If c > 0 Then MsgBox ("נמצאו וסומנו (" + CStr(c) + ") מספרי ת.ז. לא תקינים")
    SheetFocus
End Sub
' >>> check all phones and mark invalid
Private Sub DefsCheckPhones_Click()
    Dim c As Integer
    c = RangeCheckPhones(Range(RNG_pupil_phones))
    c = c + RangeCheckPhones(Range(RNG_staff_phones))
    If c > 0 Then MsgBox ("נמצאו וסומנו (" + CStr(c) + ") מספרי טלפונים לא תקינים")
    SheetFocus
End Sub
' >>> set the user name for this machine
Private Sub DefsSetUser_Click()
    PanelSetUser.Show vbModal
End Sub
' ******* EXPORT TAB *******
' >>> create a contact list CSV file for a google contacts import
Private Sub DefsMailLists_Click()
    DialogMail.Show
End Sub
' >>> create an SMS CSV list to be sent with an SMS tool
Private Sub DefsSmsList_Click()
    DialogSMS.Show
End Sub
' >>> create a base data file for uploading to the online base data file
Private Sub DefsBaseFile_Click()
' ***#***
End Sub
' ******* ATTENDANCE TAB *******
' >>> init sync operations
Public Sub InitAttSync()
    Dim dy As Integer
    dy = Weekday(Now(), vbFriday)
    dy = IIf(dy = 1, 0, 8 - dy)
    GBL_att_friday = DateAdd("d", dy, Now())
    GBL_att_last_sync = 0
    GBL_att_changed = False
    GBL_att_synced = 0
    FixAttSyncFriday
    If GBL_deployment = "production" Then
        If Format(GBL_att_friday, "yyyy/mm/dd") = Format(Now(), "yyyy/mm/dd") Then
            If Format(Now(), "hh") > "07" And Format(Now(), "hh") < "12" Then
                If Range(GRN_def_auto_sync) > 0 Then
                    DefsAttAuto.Value = True
                End If
            End If
        End If
    End If
End Sub
Public Sub FixAttSyncFriday()
    Dim lf As String
    lf = Format(GBL_att_friday, "yyyy/mm/dd")
    If lf <= Trim(Range(GRN_def_att_app_last).Text) Then
        GBL_att_friday = DateAdd("d", 7, GBL_att_friday)
    End If
End Sub
' >>> paint sync data
Public Sub PaintSyncData()
    Dim s As Double
    DefsAttDay.BackColor = IIf(Format(GBL_att_friday, "dd/mm/yyyy") = Format(Now(), "dd/mm/yyyy"), &HC0FFC0, &H80FFFF)
    DefsAttDay.Caption = " נוכחות יום שישי " & Format(GBL_att_friday, "dd/mm/yyyy")
' last sync
    s = Now()
    s = (s - GBL_att_last_sync) * 84000
    If s < 1 Then
        DefsAttLast.BackColor = &HC0FFC0
        DefsAttLast.Caption = "מסנכרן עכשיו !"
    Else
        DefsAttLast.BackColor = &HFFC0C0
        If s < 60 Then
            DefsAttLast.Caption = " סנכרון אחרון לפני " & CStr(CInt(s)) & " שניות"
        Else
            s = s / 60
            If s < 60 Then
                DefsAttLast.Caption = " סנכרון אחרון לפני " & CStr(CInt(s)) & " דקות"
            Else
                s = s / 24
                If s < 24 Then
                    DefsAttLast.Caption = " סנכרון אחרון לפני " & CStr(CInt(s)) & " שעות"
                Else
                    DefsAttLast.Caption = " סנכרון אחרון בוצע מזמן"
                End If
            End If
        End If
    End If
' changes status
    DefsAttChange.BackColor = IIf(GBL_att_changed, &H8080FF, &HC0FFC0)
    DefsAttChange.Caption = IIf(GBL_att_changed, " יש שינויים", " אין שינויים")
' synced status
    DefsAttSynced.BackColor = IIf(GBL_att_synced = 0, &H8080FF, IIf(GBL_att_synced = 100, &HC0FFC0, &H80FFFF))
    DefsAttSynced.Caption = IIf(GBL_att_synced = 0, " דרוש סנכרון", IIf(GBL_att_synced = 100, " מסונכרן", " מסונכרן " & CStr(GBL_att_synced) & "%"))
End Sub
' >>> sync current day's data
Private Sub DefsAttSync_Click()
    If DialogCloud.SyncFriday() Then
        PaintSyncData
    End If
End Sub
' >>> close last friday
Private Sub DefsAttClose_Click()
    If DialogCloud.NextFriday() Then
        DefsAttClose.Enabled = False
        FixAttSyncFriday
        PaintSyncData
    End If
End Sub
' >>> enable auto cloud sync
Private Sub DefsAttAuto_Click()
    InitAutoSync
End Sub


Attribute VB_Name = "ModuleVars"
Option Explicit
' >>> constants
Public Const CN_version = "2.46"
Public Const CN_file_template = "shahaf YYYY_MM_DD - vVVV.xlsm" ' this has to have YYYY MM DD VVV
Public Const CN_yes = "כן"
Public Const CN_no = "לא"
Public Const CN_sure = "האם את/ה בטוח ?"
Public Const CN_male = "זכר"
Public Const CN_female = "נקבה"
Public Const CN_files_url = "https://drive.google.com/uc?export=download&id=1SW1Zwx-yecxgONA0AXSRDkBJfBEOKl4c"
Public Const CN_files_size = 20000000
Public Const CN_app_url = "http://tinyurl.com/y8rn79da"
Public Const CN_timer_tick = "00:02:00"
' >>> variables
Public GBL_started As Boolean
Public GBL_update_stack As Integer
Public GBL_filter_save As String
Public GBL_auto_ver As Date ' next timestamp to perform version check
Public GBL_auto_lock As Date ' next timestamp to perform autolock
Public GBL_auto_sync As Date ' next timestamp to perform autosync
Public GBL_do_ver As Boolean ' control if can check version (in focus) or need to wait (not in focus)
Public GBL_do_lock As Boolean ' control if can lock (in focus) or need to wait (not in focus)
Public GBL_do_sync As Boolean ' control if can sync (in focus) or need to wait (not in focus)
Public GBL_Is_saved As Boolean
Public GBL_deployment As String
Public GBL_current_user As String
Public GBL_file_date As String
Public GBL_file_ver As String
Public GBL_file_is_latest As Long
Public GBL_suspend_checks As Boolean
Public GBL_scheduled_timer As Date
Public GBL_screen_width As Long
Public GBL_screen_height As Long
Public GBL_message_backup As String
Public GBL_quit_next As Boolean ' if true will mark save operation to clean user from cloud
Public GBL_new_year_on As Boolean ' used when doing new-year to disable certain maintenance code
' >>> attendance variables
Public GBL_att_friday As Double ' timestamp
Public GBL_att_last_sync As Double ' timestamp
Public GBL_att_changed As Boolean
Public GBL_att_synced As Integer
' >>> integrity variables
Public GBL_int_ppl As String
Public GBL_int_cls As String
Public GBL_int_grd As String
' >>> [pupils] range definitions (columns/rows)
Public Const GRN_ppl_all_data = "pupils_data" ' whole pupils data
Public Const GRN_ppl_grd_data = "pupils_grade_data"
Public Const GRN_ppl_kid_data = "pupils_kid_data" ' kid number data
Public Const GRN_ppl_prb_data = "pupils_prob_data" ' problems data
Public Const GRN_ppl_prb_stt = "pupils_problems" ' problems status
Public Const GRN_ppl_dtl_data = "pupils_details_data" ' details data
Public Const GRN_ppl_pay_data = "pupils_pay_data" ' payments data (X)
Public Const GRN_ppl_msc_data = "pupils_misc_data" ' misc data
Public Const GRN_ppl_cls_data = "pupils_changes" ' classes data
Public Const GRN_ppl_cls_alts = "pupils_alts_data" ' alt classes data
Public Const GRN_ppl_cls_save = "pupils_changes_saved" ' previous classes data
Public Const GRN_ppl_person_ids = "pupils_person_ids" ' all ids on pupils tab
Public Const GRN_ppl_kids_info = "pupils_kid_data" ' kids main info (name, grade, ID)
Public Const GRN_ppl_parent_names = "pupils_parent_names" ' both parents name
Public Const GRN_ppl_phones_all = "pupils_phones" ' all phones on pupils tab
Public Const GRN_ppl_payments_all = "pupils_pay_data" ' all user entered payment data (not kid number)
Public Const GRN_ppl_clear = "pupils_clear" ' all columns that can be cleared
Public Const GRN_ppl_pay_clear = "pupils_pay_clear" ' columns to delete for payments
Public Const GRN_ppl_last_line = "pupils_last_line"
' >>> [pupils] range definitions (titles)
Public Const GRN_ppl_marks = "pupils_marks"
Public Const GRN_ppl_empty = "pupils_empty"
Public Const GRN_ppl_hours = "pupils_hours"
Public Const GRN_ppl_family_code = "pupils_family"
Public Const GRN_ppl_name_last = "pupils_name_last"
Public Const GRN_ppl_name_first = "pupils_name_first"
Public Const GRN_ppl_grade = "pupils_grade"
Public Const GRN_ppl_id = "pupils_col_id"
Public Const GRN_ppl_gender = "pupils_gender"
Public Const GRN_ppl_birth_date = "pupils_birth_date"
Public Const GRN_ppl_kid_age = "pupils_kid_age"
Public Const GRN_ppl_kid_phone = "pupils_phone_kid"
Public Const GRN_ppl_sens = "pupils_sensitivity"
Public Const GRN_ppl_class_1 = "pupils_class_1"
Public Const GRN_ppl_class_2 = "pupils_class_2"
Public Const GRN_ppl_class_3 = "pupils_class_3"
Public Const GRN_ppl_class_4 = "pupils_class_4"
Public Const GRN_ppl_kid_number = "pupils_kid_number" '
Public Const GRN_ppl_actual_pay = "pupils_pay_act"
Public Const GRN_ppl_payment_rem = "pupils_pay_rem"
Public Const GRN_ppl_payment_type = "pupils_pay_type"
Public Const GRN_ppl_payment_inv = "pupils_invoice"
Public Const GRN_ppl_rem_curr = "pupils_rem_curr"
Public Const GRN_ppl_rem_init = "pupils_rem_init"
Public Const GRN_ppl_dad_nm = "pupils_dad"
Public Const GRN_ppl_dad_eml = "pupils_email_d"
Public Const GRN_ppl_dad_phm = "pupils_phone_d"
Public Const GRN_ppl_mom_nm = "pupils_mom"
Public Const GRN_ppl_mom_eml = "pupils_email_m"
Public Const GRN_ppl_mom_phm = "pupils_phone_m"
Public Const GRN_ppl_layout = "pupils_layout"
Public Const GRN_ppl_prm_exit = "pupils_prm_exit"
Public Const GRN_ppl_prm_photo = "pupils_prm_photo"
Public Const GRN_ppl_prm_takanon = "pupils_prm_takanon"
Public Const GRN_ppl_edge = "pupils_edge"
' >>> [classes] range definitions
Public Const GRN_cls_all_data = "class_data"
Public Const GRN_cls_all_classes = "class_items"
Public Const GRN_cls_clear_all = "class_clear_all"
Public Const GRN_cls_clear_details = "class_clear_details"
Public Const GRN_cls_count_1 = "class_count_1"
Public Const GRN_cls_count_2 = "class_count_2"
Public Const GRN_cls_count_3 = "class_count_3"
Public Const GRN_cls_count_4 = "class_count_4"
Public Const GRN_cls_length = "class_length"
Public Const GRN_cls_full_name_1 = "class_name_1"
Public Const GRN_cls_full_name_2 = "class_name_2"
Public Const GRN_cls_full_name_3 = "class_name_3"
Public Const GRN_cls_full_name_4 = "class_name_4"
Public Const GRN_cls_group = "class_group"
Public Const GRN_cls_order = "class_sort"
Public Const GRN_cls_room = "class_room"
Public Const GRN_cls_gen_grade = "class_grade_"
Public Const GRN_cls_gen_extra = "class_extra_"
Public Const GRN_cls_gen_room = "class_room_"
Public Const GRN_cls_gen_length = "class_len_"
Public Const GRN_cls_gen_count = "class_count_"
Public Const GRN_cls_gen_full = "class_name_"
Public Const GRN_cls_edge = "class_edge"
' >>> [grades] range definitions
Public Const GRN_grd_data = "grade_data"
Public Const GRN_grd_levels = "grade_levels"
Public Const GRN_grd_name = "grade_name_"
Public Const GRN_grd_full = "grade_full_"
Public Const GRN_grd_set_4 = "grade_set_4"
Public Const GRN_grd_set_5 = "grade_set_5"
Public Const GRN_grd_edge = "grade_edge"
' >>> [defs] range definitions
Public Const GRN_def_development = "defs_development"
Public Const GRN_def_testing = "defs_testing"
Public Const GRN_def_auto_lock = "defs_auto_lock"
Public Const GRN_def_auto_sync = "defs_auto_sync"
Public Const GRN_def_year_end = "defs_year_end"
Public Const GRN_def_panel_pos_misc = "defs_win_misc_pos"
Public Const GRN_def_assist_ppl_cls = "defs_ass_ppl_cls"
Public Const GRN_def_assist_ppl_width = "defs_ass_ppl_wdh"
Public Const GRN_def_assist_ppl_tran = "defs_ass_ppl_trn"
Public Const GRN_def_no_participation = "defs_no_part" ' text for no participation
Public Const GRN_def_attendance_file = "defs_attendance_file"
Public Const GRN_def_attendance_head = "defs_attendance_head"
Public Const GRN_def_attendance_cell = "defs_attendance_cell"
Public Const GRN_def_attendance_add = "defs_attendance_add"
Public Const GRN_def_attendance_many = "defs_attendance_many"
Public Const GRN_def_attendance_sens = "defs_attendance_sens"
Public Const GRN_def_attendance_sens_gen = "defs_attendance_sens_gen"
Public Const GRN_def_attendance_sens_imp = "defs_attendance_sens_imp"
Public Const GRN_def_assignment_file = "defs_assignment_file"
Public Const GRN_def_assignment_sort = "defs_assignment_sort"
Public Const GRN_def_assignment_merge = "defs_assignment_merge"
Public Const GRN_def_img_pos = "defs_img_pos"
Public Const GRN_def_img_dir = "defs_img_dir"
Public Const GRN_def_img_size = "defs_img_size"
Public Const GRN_def_help_file = "defs_help_file"
Public Const GRN_def_ppl_filt_sec = "defs_pupils_filter_second"
Public Const GRN_def_att_app_url = "defs_attapp_url"
Public Const GRN_def_att_app_last = "defs_attapp_last"
Public Const GRN_def_data_ver = "defs_data_version"
Public Const GRN_def_cloud_status = "defs_cloud_status"
Public Const GRN_def_cloud_save = "defs_cloud_save"
Public Const GRN_def_ver_check_init = "defs_ver_check_init"
Public Const GRN_def_ver_check = "defs_ver_check"
Public Const GRN_def_cloud_store = "defs_cloud_store_url"
Public Const GRN_def_cloud_timeout = "defs_cloud_timeout"
Public Const GRN_def_cloud_mark_exit = "defs_cloud_mark_exit"
Public Const GRN_def_cloud_debug = "defs_cloud_debug"
Public Const GRN_def_cloud_debug_msg = "defs_cloud_debug_msg"
' >>> [events] range definitions
Public Const GRN_event_data = "event_data"
Public Const GRN_event_id = "event_ids"
Public Const GRN_event_validate = "event_validate"
Public Const GRN_event_name_grade = "event_name_grade"
Public Const GRN_event_date = "event_date"
Public Const GRN_event_time = "event_time"
Public Const GRN_event_type = "event_type"
Public Const GRN_event_where = "event_where"
Public Const GRN_event_name_first = "event_name_first"
Public Const GRN_event_name_last = "event_name_last"
Public Const GRN_event_grade = "event_grade"
Public Const GRN_event_reported = "event_reported"
Public Const GRN_event_details = "event_details"
Public Const GRN_event_action = "event_action"
Public Const GRN_event_last_line = "event_last_line"
' >>> [payments] range definitions
Public Const GRN_payment_data = "payment_data"
Public Const GRN_payment_id = "payment_ids"
Public Const GRN_payment_inv_no = "payment_inv_no"
Public Const GRN_payment_inv_date = "payment_inv_date"
Public Const GRN_payment_pay_no = "payment_pay_no"
Public Const GRN_payment_pay_date = "payment_pay_date"
Public Const GRN_payment_company = "payment_company"
Public Const GRN_payment_activity = "payment_activity"
Public Const GRN_payment_clause = "payment_clause"
Public Const GRN_payment_class = "payment_class"
Public Const GRN_payment_remarks = "payment_remarks"
Public Const GRN_payment_last_line = "payment_last_line"
Public Const GRN_payment_months = "menu_payments_months"
' >>> [waiting] range definitions
Public Const GRN_wait_data = "wait_data"
Public Const GRN_wait_restricted = "wait_restricted"
Public Const GRN_wait_id = "wait_id"
Public Const GRN_wait_date = "wait_date"
Public Const GRN_wait_time = "wait_time"
Public Const GRN_wait_name_first = "wait_name_first"
Public Const GRN_wait_name_last = "wait_name_last"
Public Const GRN_wait_name_grade = "wait_name_grade"
Public Const GRN_wait_hour = "wait_hour"
Public Const GRN_wait_class = "wait_class"
Public Const GRN_wait_formulas = "wait_formulas"
Public Const GRN_wait_delete = "wait_delete"
Public Const GRN_wait_last_line = "wait_last_line"
' >>> [staff] range definitions
Public Const GRN_stf_data = "staff_data"
Public Const GRN_stf_year = "staff_year"
Public Const GRN_stf_type = "staff_type"
Public Const GRN_stf_job = "staff_job"
Public Const GRN_stf_class = "staff_class"
Public Const GRN_stf_name = "staff_name"
Public Const GRN_stf_phones = "staff_phones"
Public Const GRN_stf_emails = "staff_emails"
Public Const GRN_stf_last = "staff_last"
' >>> [changes] range definitions
Public Const GRN_cng_body = "changes_body"
Public Const GRN_cng_date = "changes_date"
Public Const GRN_cng_time = "changes_time"
Public Const GRN_cng_fam_code = "changes_fam_code"
Public Const GRN_cng_kid_no = "changes_kid_no"
Public Const GRN_cng_kid = "changes_kid"
Public Const GRN_cng_grade = "changes_grade"
Public Const GRN_cng_hour = "changes_hour"
Public Const GRN_cng_class_1 = "changes_class_1"
Public Const GRN_cng_class_2 = "changes_class_2"
Public Const GRN_cng_rem = "changes_remarks"
' >>> [menu] range definitions
Public Const GRN_men_grades = "menu_grade"
Public Const GRN_men_class_1 = "menu_class_1"
Public Const GRN_men_class_2 = "menu_class_2"
Public Const GRN_men_class_3 = "menu_class_3"
Public Const GRN_men_class_4 = "menu_class_4"
Public Const GRN_men_event_type = "menu_events_type"
Public Const GRN_men_event_sort = "menu_events_sorts"
Public Const GRN_men_payment_sort = "menu_payments_sorts"
Public Const GRN_men_staff_type = "menu_staff_type"
Public Const GRN_men_staff_job = "menu_staff_job"
Public Const GRN_men_banned_mails = "menu_banned_mails"
Public Const GRN_men_banned_phones = "menu_banned_phones"
' >>> version check async fetc object
Public xVerCheckHttp As UrlFetch
Public Sub initVerCheckHttp()
    Set xVerCheckHttp = New UrlFetch
    xVerCheckHttp.TimeOut = 5000
End Sub
' >>> stub sub to ensure this script is loaded
Public Sub vars_ensure_load()
    Dim x As String
    x = "123"
End Sub


Attribute VB_Name = "ModuleDefs"
Option Explicit
' >>> range definitions
Private Const RNG_def_lock = "defs_lock_protected"
Private Const RNG_def_tabs = "defs_hide_sensitive"
Private Const RNG_def_panel = "defs_hide_dangerous"
' >>> initialize defaults and behaviors
Public Sub InitializeDefs()
    ControlDefs.DefsCheckLock.Value = (Range(RNG_def_lock).Text = CN_yes)
    ControlDefs.DefsCheckTabs.Value = (Range(RNG_def_tabs).Text = CN_yes)
    ControlDefs.DefsCheckPages.Value = (Range(RNG_def_panel).Text = CN_yes)
    SetProtection ControlDefs.DefsCheckLock.Value
    HideTabs ControlDefs.DefsCheckTabs.Value
    HidePanels ControlDefs.DefsCheckPages.Value
End Sub
' >>> protect or unprotect worksheets
Public Sub SetProtection(prt As Boolean)
    Dim ws As Worksheet
    UpdatesOff
    For Each ws In Worksheets
        If prt Then
            ws.Protect UserInterfaceOnly:=True
        Else
            ws.Unprotect
        End If
    Next
    UpdatesOn
End Sub
' >>> show/hide sensitive tabs
Public Sub HideTabs(hde As Boolean)
    Dim ws As Worksheet
    Dim cd As String
    UpdatesOff
    For Each ws In Worksheets
        cd = ws.CodeName
        If InStr("[sheet5],[sheet6],[sheet7],[sheet8],[sheet9],[sheet91]", cd) > 0 Then
            If hde Then
                ws.Visible = False
            Else
                ws.Visible = True
            End If
        End If
    Next
    UpdatesOn
End Sub
' >>> show/hide sensitive panels
Public Sub HidePanels(hde As Boolean)
    ControlPupils.MultiPage1.Pages(2).Visible = Not hde
    ControlPupils.MultiPage1.Pages(3).Visible = Not hde
    ControlClasses.MultiPage1.Pages(1).Visible = Not hde
    ControlClasses.MultiPage1.Pages(2).Visible = Not hde
    ControlGrades.MultiPage1.Pages(1).Visible = Not hde
    ControlGrades.MultiPage1.Pages(2).Visible = Not hde
' more panels ...
    ControlWait.WAIT_del_all.Enabled = Not hde
    ControlEvents.BT_del.Enabled = Not hde
    ControlExpenses.BT_del.Enabled = Not hde
    ControlChanges.BT_del.Enabled = Not hde
    ControlChanges.BT_erase.Enabled = Not hde
    ControlStaff.BT_del.Enabled = Not hde
    ControlDefs.DefsResetComments.Enabled = Not hde
' even more panels ...
    ControlDefs.MultiPage1.Pages(3).Visible = Not hde
    ControlDefs.DefsNewYear.Enabled = Not hde
    ControlDefs.DefsReset.Enabled = Not hde
    ControlDefs.DefsResetFormulas.Enabled = Not hde
End Sub
' >>> properly change defs layout position according to either -/+ values
Public Sub ChangeLayoutPos(ctl As Object, rng As String)
    Dim s As String, x As Long, y As Long
    s = Range(rng).Text
    x = ctl.Left
    y = ctl.Top
    If x < 1 Then x = 1
    If x + ctl.Width >= Application.Width Then x = Application.Width - ctl.Width - 1
    If y < 1 Then y = 1
    If y + ctl.Height >= Application.Height Then y = Application.Height - ctl.Height - 1
    ctl.Left = x
    ctl.Top = y
    If InStr(s, ",") > 0 Then
        If CInt(Left(s, InStr(s, ",") - 1)) < 0 Then
            x = ctl.Left + ctl.Width - Application.Width
        End If
        If CInt(Mid(s, InStr(s, ",") + 1)) < 0 Then
            y = ctl.Top + ctl.Height - Application.Height
        End If
    End If
    Range(rng) = CStr(x) + "," + CStr(y)
End Sub
' >>> mark the file as an "year end" file (this separate it from the workflow)
Public Sub MarkAsYearEnd()
    If Range(GRN_def_year_end) = CN_yes Then
' ***#***
        ControlPupils.SaveVersion.Enabled = False
        Range(GRN_def_cloud_status) = CN_no
        Range(GRN_def_cloud_save) = CN_no
        Range(GRN_def_ver_check_init) = CN_no
        Range(GRN_def_ver_check) = ""
        Range(GRN_def_cloud_mark_exit) = CN_no
' ***#***
    End If
End Sub


Attribute VB_Name = "ModuleAsk"
Option Explicit
' >>> variables
Public PUBaskResult As String ' >>> result for ask dialog
' >>> ask the user what to do
Function AskDialog(tx As String, Optional bt As String = "asyn") As String
    If bt <> "" Then
        DialogAsk.ButtonAll.Visible = (InStr(bt, "a") > 0)
        DialogAsk.ButtonStop.Visible = (InStr(bt, "s") > 0)
        DialogAsk.ButtonYes.Visible = (InStr(bt, "y") > 0)
        DialogAsk.ButtonNo.Visible = (InStr(bt, "n") > 0)
        DialogAsk.ButtonOk.Visible = (InStr(bt, "o") > 0)
    End If
    If PUBaskResult <> "a" And PUBaskResult <> "s" Then
        DialogAsk.Ask.Caption = tx
        DialogAsk.Show (vbModal)
    End If
    If PUBaskResult = "a" Then
        AskDialog = "y"
    Else
        If PUBaskResult = "s" Then
            AskDialog = "n"
        Else
            AskDialog = PUBaskResult
        End If
    End If
End Function
' >>> get previous ask result
Function AskPrevRes() As String
    AskPrevRes = PUBaskResult
End Function
' >>> reset dialog remember mode
Public Sub AskReset()
    PUBaskResult = ""
End Sub


Attribute VB_Name = "ControlWait"
Attribute VB_Base = "0{4D48EDF4-49B2-4F43-BBD0-4B29446466E5}{661731EF-AD73-4543-8BCF-4834A697AA24}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private filter_on As Boolean
Private filter_save As String
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(GRN_def_panel_pos_misc).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    filter_on = False
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
' stub
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> maximize the waiting window
Private Sub WaitMaxi_Click()
    Me.Width = 255
    Me.Height = 99
    Me.Caption = "פונקציות רשימות המתנה"
    Me.WaitMaxi.Visible = False
    Me.WaitMini.Visible = True
    Me.WaitHelp.Visible = True
    Me.LabelName.Visible = True
    Me.FilterName.Visible = True
End Sub
' >>> minimize the waiting window
Private Sub WaitMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "המתנה"
    Me.WaitMini.Visible = False
    Me.WaitMaxi.Top = Me.WaitMini.Top
    Me.WaitMaxi.Visible = True
    Me.WaitHelp.Visible = False
    Me.LabelName.Visible = False
    Me.FilterName.Visible = False
End Sub
' >>> show help for waiting list
Private Sub WaitHelp_Click()
    PanelHelp.ShowHelp ("המתנה")
End Sub
' >>> go to the bottom of the list
Private Sub WaitBottom_Click()
    GoToListBottom Range(GRN_wait_name_first)
End Sub
' >>> add a new waiting record
Private Sub WAIT_new_Click()
    FilterReset
    WaitRowAdd
    SheetFocus
End Sub
' >>> del one waiting record
Private Sub WAIT_del_Click()
    Dim rng As Range
    Set rng = Intersect(Selection, Range(GRN_wait_data))
    If Not (rng Is Nothing) Then
        If AskDialog(CN_sure, "yn") = "y" Then
            FilterReset
            WaitRowDel Selection
        End If
    End If
    SheetFocus
End Sub
' >>> delete all waiting records
Private Sub WAIT_del_all_Click()
    If AskDialog(CN_sure, "yn") = "y" Then
        FilterReset
        WaitClearAll
    End If
    SheetFocus
End Sub
' >>> goto kid record in pupils table
Private Sub WAIT_goto_Click()
    Dim rng As Range
    Set rng = CalcKid()
    If Not (rng Is Nothing) Then
        sheet1.Activate
        rng.Select
    End If
    SheetFocus
End Sub
' >>> filter by kid name
Private Sub FilterName_Change()
    If Not filter_on Then
        filter_on = True
        FilterClass.Value = ""
        FilterWaitList
    End If
    FixElements
End Sub
' >>> filter by class name
Private Sub FilterClass_Change()
    If Not filter_on Then
        filter_on = True
        FilterName.Value = ""
        FilterWaitList
    End If
    FixElements
End Sub
' >>> clear kid name filter
Private Sub ClearName_Click()
    FilterName.Value = ""
    SheetFocus
End Sub
' >>> clear class name filter
Private Sub ClearClass_Click()
    FilterClass.Value = ""
    SheetFocus
End Sub
' >>> filter records
Private Sub FilterWaitList()
    Dim cl As Range
    Dim save As String, name As String, Class As String
    Dim row As Integer
    Dim hide As Boolean
    name = Trim(FilterName.Value)
    Class = Trim(FilterClass.Value)
    UpdatesOff
    save = name + Class ' ignore if same filter as last
    If filter_save <> save Then
        For Each cl In Range(GRN_wait_id).Rows ' loop rows
            hide = False
            row = cl.row
            hide = FilterTestName(hide, name, row, Range(GRN_wait_name_last).Column, Range(GRN_wait_name_first).Column)
            hide = FilterTestClass(hide, Class, row, Range(GRN_wait_class).Column)
            hide = FilterTestLast(hide, row)
            cl.EntireRow.Hidden = hide
        Next
    End If
    filter_save = save ' save current filter
    UpdatesOn
    filter_on = False
    GoToCorner
End Sub
' >>> reset filter
Public Sub FilterReset()
    If FilterName.Value <> "" Then FilterName.Value = ""
    If FilterClass.Value <> "" Then FilterClass.Value = ""
End Sub
' >>> test name filter and return (true) if matched
Private Function FilterTestName(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer) As Boolean
    Dim n1 As String, n2 As String, v1 As String, v2 As String
    Dim sp As Integer
    FilterTestName = hide
    If fl <> "" Then
        sp = InStr(fl, " ")
        If sp > 0 Then ' 2 substrings in filter
            n1 = Trim(Left(fl, sp))
            n2 = Trim(Mid(fl, sp + 1))
        Else ' 1 substring in filter
            n1 = fl
            n2 = ""
        End If
        v1 = Trim(sheet92.Cells(rw, c1).Value)
        v2 = Trim(sheet92.Cells(rw, c2).Value)
        If n2 <> "" Then ' check to do if 2 substrings
            If (Left(v1, Len(n1)) <> n1 Or Left(v2, Len(n2)) <> n2) And (Left(v2, Len(n1)) <> n1 Or Left(v1, Len(n2)) <> n2) Then FilterTestName = True
        Else ' check to do if 1 substring
            If Left(v1, Len(n1)) <> n1 And Left(v2, Len(n1)) <> n1 Then FilterTestName = True
        End If
    End If
End Function
' >>> test class filter and return (true) if matched
Private Function FilterTestClass(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestClass = hide
    If fl <> "" Then
        If InStr(sheet92.Cells(rw, c1).Value, fl) = 0 Then FilterTestClass = True
    End If
End Function
' >>> test for last line and make sure it's not hidden
Private Function FilterTestLast(hide As Boolean, rw As Integer)
    FilterTestLast = hide
    If Range(GRN_wait_last_line).row = rw Then FilterTestLast = False
End Function
' >>> sort waiting list
Private Sub WaitListSort()
    Range(GRN_wait_data).sort key1:=Range(GRN_wait_id), order1:=xlAscending
End Sub
' >>> fix elements
Private Sub FixElements()
    Dim filt As Boolean
    filt = (FilterName <> "" Or FilterClass <> "")
    ClearName.Visible = (FilterName <> "")
    ClearClass.Visible = (FilterClass <> "")
End Sub
' >>> add a row
Private Sub WaitRowAdd()
    Dim cl As Range, rng As Range
    Dim emp As Boolean
    GBL_suspend_checks = True
    Set rng = Range(GRN_wait_id).SpecialCells(xlCellTypeBlanks).Cells(1)
    GBL_suspend_checks = False
    emp = (rng.row = Range(GRN_wait_id).Cells(1).row)
    If emp Then Set rng = rng.Offset(1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromRightOrBelow
    If emp Then Set rng = rng.Offset(-1, 0)
    Set cl = rng.Offset(-1, 0)
    cl = GetUniqueID()
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_date))
    cl = Format(Now(), "yyyy/MM/dd")
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_time))
    cl = Format(Now(), "hh:mm")
    Set cl = Intersect(cl.EntireRow, Range(GRN_wait_name_first))
    cl.Select
End Sub
' >>> delete a row
Private Sub WaitRowDel(sl As Range)
    Dim cl As Range, rng As Range
    Set rng = Intersect(sl.EntireRow, Range(GRN_wait_data))
    If Not (rng Is Nothing) Then
        If Range(GRN_wait_id).Rows.count - rng.Rows.count >= 5 Then
            rng.EntireRow.Delete
        Else
            Set rng = Intersect(rng, Range(GRN_wait_delete))
            rng.ClearContents
            WaitListSort
        End If
    End If
End Sub
' >>> clear a row
Private Sub WaitClearAll()
    Dim rw1 As Integer, rw2 As Integer
    Dim rng As Range
    Set rng = Range(GRN_wait_data)
    If rng.Rows.count > 5 Then
        rw1 = rng.Cells(1).row
        rw2 = rw1 + rng.Rows.count - 1 - 5
        Set rng = Range("$A$" + CStr(rw1) + ":$A$" + CStr(rw2))
        rng.EntireRow.Delete
    End If
    Range(GRN_wait_delete).ClearContents
End Sub
' >>> shift focus to the first visible row
Sub GoToCorner()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet92" Then
        Set cl = Intersect(Range(GRN_wait_data).Cells(1).Offset(-1).EntireRow, Range(GRN_wait_name_first).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1).Select
    End If
End Sub
' >>> calc if a kid can be located
Public Function CalcKid() As Range
    Dim nml As String, nmf As String, grd As String, hr As String
    Dim rng As Range, cl As Range
    Set CalcKid = Nothing
    Set rng = Range(GRN_wait_data)
    Set cl = Intersect(rng, ActiveCell)
    If Not (cl Is Nothing) Then
        Set rng = cl.EntireRow
        Set cl = Intersect(rng, Range(GRN_wait_name_grade))
        nmf = Trim(cl.Cells(1).Value)
        nml = Trim(cl.Cells(2).Value)
        grd = Trim(cl.Cells(3).Value)
        Set cl = Intersect(rng, Range(GRN_wait_hour))
        hr = Left(Trim(cl.Value), 1)
        Set rng = FindKid(nml, nmf, grd)
        If Not (rng Is Nothing) Then
            If hr <> "" And InStr("4321", hr) > 0 Then
                Set CalcKid = Intersect(rng, Range(GRN_ppl_class_1).Offset(0, CInt(hr) - 1).EntireColumn)
            Else
                Set CalcKid = Intersect(rng, Range(GRN_ppl_name_last).EntireColumn)
            End If
        End If
    End If
    Me.WAIT_goto.Enabled = Not (CalcKid Is Nothing)
End Function
' >>> find a kid in the pupils table
Private Function FindKid(nml As String, nmf As String, grd As String) As Range
    Dim cxl As Integer, cxf As Integer, cxg As Integer
    Dim rng As Range, cl As Range
    Dim c As Integer
    Set FindKid = Nothing
    If nml <> "" And nmf <> "" And grd <> "" Then
        Set rng = Range(GRN_ppl_all_data)
        cxl = Range(GRN_ppl_name_last).Column
        cxf = Range(GRN_ppl_name_first).Column
        cxg = Range(GRN_ppl_grd_data).Column
        c = 0
        For Each cl In rng.Rows
            If nml = Trim(cl.Cells(cxl)) And nmf = Trim(cl.Cells(cxf)) And grd = Trim(cl.Cells(cxg)) Then
                Set FindKid = cl
                c = c + 1
            End If
        Next
        If c <> 1 Then Set FindKid = Nothing
    End If
End Function
' >>> reset & clear this tab
Public Sub init_tab()
    FilterReset
    sheet92.Activate
    WaitClearAll
    GoToCorner
End Sub


Attribute VB_Name = "ControlExpenses"
Attribute VB_Base = "0{B8A5A860-D3E7-4538-BA40-3EF29289C713}{4D712CD1-FE1E-40B6-88B1-5F77F6C3FB5C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private filter_save As String
Private event_month As Boolean
' >>> ------- <<<
' >>> GENERAL <<<
' >>> ------- <<<
' >>> initialization
Private Sub UserForm_Initialize()
    Dim ar() As String
    Dim s As String
    Me.RightToLeft = True
    s = Range(GRN_def_panel_pos_misc).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    Me.CB_sort.RowSource = GRN_men_payment_sort
    Me.CB_sort.ListIndex = -1
    ar = MakeUniqueArray(Range(GRN_payment_clause))
    If Not IsStringArrayEmpty(ar) Then Me.CB_clause.List = ar
    Me.CB_clause.ListIndex = -1
    ar = MakeUniqueArray(Range(GRN_payment_class))
    If Not IsStringArrayEmpty(ar) Then Me.CB_class.List = ar
    Me.CB_class.ListIndex = -1
    ar = MonthsArray()
    If Not IsStringArrayEmpty(ar) Then Me.CB_month.List = ar
    Me.CB_month.ListIndex = -1
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
    event_month = False
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> enable/disable elements
Sub FixElements()
    BT_clear.Enabled = (Trim(TB_company.Text) <> "" Or Trim(CB_clause.Text) <> "" Or Trim(CB_class.Text) <> "" Or Trim(CB_month.Text) <> "" Or Trim(TB_date_from.Text) <> "" Or Trim(TB_date_to.Text) <> "" Or Trim(TB_text.Text) <> "" Or Trim(TB_number.Text) <> "")
End Sub
' >>> shift focus to the first visible row
Sub GoToCorner()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet91" Then
        Set cl = Intersect(Range(GRN_payment_data).Cells(1).Offset(-1).EntireRow, Range(GRN_payment_inv_no).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1).Select
    End If
End Sub
' >>> maximize the expenses window
Private Sub ExpensesMaxi_Click()
    Me.Width = 500
    Me.Height = 99
    Me.Caption = "ניהול הוצאות"
    Me.ExpensesMaxi.Visible = False
    Me.ExpensesMini.Visible = True
    Me.ExpensesHelp.Visible = True
    Me.Label1.Visible = True
    Me.CB_sort.Visible = True
End Sub
' >>> minimize the expenses window
Private Sub ExpensesMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "הוצאות"
    Me.ExpensesMini.Visible = False
    Me.ExpensesMaxi.Top = Me.ExpensesMini.Top
    Me.ExpensesMaxi.Visible = True
    Me.ExpensesHelp.Visible = False
    Me.Label1.Visible = False
    Me.CB_sort.Visible = False
End Sub
' >>> show help for expenses
Private Sub ExpensesHelp_Click()
    PanelHelp.ShowHelp ("תשלומים")
End Sub
' >>> go to the bottom of the list
Private Sub ExpensesBottom_Click()
    GoToListBottom Range(GRN_payment_inv_no)
End Sub
' >>> make the months list
Private Function MonthsArray() As String()
    Dim months(1 To 12) As String
    months(1) = "ינואר"
    months(2) = "פברואר"
    months(3) = "מרץ"
    months(4) = "אפריל"
    months(5) = "מאי"
    months(6) = "יוני"
    months(7) = "יולי"
    months(8) = "אוגוסט"
    months(9) = "ספטמבר"
    months(10) = "אוקטובר"
    months(11) = "נובמבר"
    months(12) = "דצמבר"
    MonthsArray = months
End Function
' >>> ------- <<<
' >>> RECORDS <<<
' >>> ------- <<<
' >>> add a new [invoice] record
Private Sub BT_new_invoice_Click()
    FilterReset
    RowAddNew "i"
    SheetFocus
End Sub
' >>> add a new [salary] record
Private Sub BT_new_salary_Click()
    FilterReset
    RowAddNew "s"
    SheetFocus
End Sub
' >>> delete one or more records
Private Sub BT_del_Click()
    Dim rng As Range
    Set rng = Intersect(Selection, Range(GRN_payment_data))
    If Not (rng Is Nothing) Then
        If AskDialog(CN_sure, "yn") = "y" Then
            FilterReset
            RowDelete Selection
        End If
    End If
    SheetFocus
End Sub
' >>> add a record
' >>>   [typ] = either "i" or "s" for invoice or salary
Private Sub RowAddNew(typ As String)
    Dim cl As Range, rng As Range
    Dim emp As Boolean
    UpdatesOff
    Set rng = Range(GRN_payment_id).SpecialCells(xlCellTypeBlanks).Cells(1)
    emp = (rng.row = Range(GRN_payment_id).Cells(1).row)
    If emp Then Set rng = rng.Offset(1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromRightOrBelow
    UpdatesOn
    If emp Then Set rng = rng.Offset(-1, 0)
    Set cl = rng.Offset(-1, 0)
    cl = GetUniqueID()
    If LCase(typ) = "s" Then
        Set cl = Intersect(cl.EntireRow, Range(GRN_payment_inv_no))
        cl = "---"
        Set cl = Intersect(cl.EntireRow, Range(GRN_payment_inv_date))
        cl = "---"
        Set cl = Intersect(cl.EntireRow, Range(GRN_payment_pay_no))
        cl = "---"
        Set cl = Intersect(cl.EntireRow, Range(GRN_payment_company))
    Else
        Set cl = Intersect(cl.EntireRow, Range(GRN_payment_inv_no))
    End If
    cl.Select
End Sub
' >>> delete a record or records
Private Sub RowDelete(sl As Range)
    Dim cl As Range, rng As Range
    Set rng = Intersect(sl.EntireRow, Range(GRN_payment_data))
    If Not (rng Is Nothing) Then
        If Range(GRN_payment_id).Rows.count - rng.Rows.count >= 5 Then
            rng.EntireRow.Delete
        Else
            Set rng = Intersect(rng, Range(GRN_payment_data))
            rng.ClearContents
            SortList
        End If
    End If
End Sub
' >>> ------- <<<
' >>> FILTER  <<<
' >>> ------- <<<
' >>> filter by company
Private Sub TB_company_Change()
    FilterList
    FixElements
End Sub
' >>> filter by expense clause
Private Sub CB_clause_Change()
    FilterList
    FixElements
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_clause_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_clause.ListIndex = -1
    FixElements
End Sub
' >>> filter by class
Private Sub CB_class_Change()
    FilterList
    FixElements
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_class_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_class.ListIndex = -1
    FixElements
End Sub
' >>> filter by month
Private Sub CB_month_Change()
    If Not event_month Then
        FixDateFromTo
        FilterList
        FixElements
    End If
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_month_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_month.ListIndex = -1
    FixElements
End Sub
' >>> filter by date from
Private Sub TB_date_from_Change()
    validate_date
    FilterList
    FixElements
End Sub
' >>> validate and format date from value
Private Sub TB_date_from_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim dt As Date
    dt = str_to_date(Me.TB_date_from.Text)
    If dt > DateSerial(2000, 1, 1) Then
        Me.TB_date_from.Text = Format(dt, "dd/mm/yyyy")
    End If
End Sub
' >>> filter by date to
Private Sub TB_date_to_Change()
    validate_date
    FilterList
    FixElements
End Sub
' >>> validate and format date to value
Private Sub TB_date_to_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim dt As Date
    dt = str_to_date(Me.TB_date_to.Text)
    If dt > DateSerial(2000, 1, 1) Then
        Me.TB_date_to.Text = Format(dt, "dd/mm/yyyy")
    End If
End Sub
' >>> filter by free text
Private Sub TB_text_Change()
    FilterList
    FixElements
End Sub
' >>> filter by invoice or payment number
Private Sub TB_number_Change()
    FilterList
    FixElements
End Sub
' >>> reset filters
Private Sub BT_clear_Click()
    FilterReset
    FixElements
    SheetFocus
End Sub
' >>> fix the from/to date filters acording to month
Private Sub FixDateFromTo()
    Dim mn As Integer, yr As Integer
    Dim d As Date
    yr = Int(Format(Date, "yyyy"))
    mn = Me.CB_month.ListIndex + 1
    If mn > 0 Then
        d = DateSerial(yr, mn, 1)
        Me.TB_date_from = Format(d, "dd/mm/yyyy")
        d = DateSerial(yr, mn + 1, 1) - 1
        Me.TB_date_to = Format(d, "dd/mm/yyyy")
    Else
        Me.TB_date_from = ""
        Me.TB_date_to = ""
    End If
End Sub
' >>> validate the filtered dates
Private Sub validate_date()
    Dim d1 As Date, d2 As Date
' validate from date
    d1 = str_to_date(Me.TB_date_from.Text)
    If d1 > DateSerial(2000, 1, 1) Then
        Me.TB_date_from.ForeColor = vbBlack
    Else
        Me.TB_date_from.ForeColor = vbRed
    End If
' validate to date
    d2 = str_to_date(Me.TB_date_to.Text)
    If d2 > DateSerial(2000, 1, 1) Then
        Me.TB_date_to.ForeColor = vbBlack
    Else
        Me.TB_date_to.ForeColor = vbRed
    End If
' check months span
    If Me.TB_date_from.ForeColor = vbBlack And Me.TB_date_to.ForeColor = vbBlack Then
        If Me.TB_date_to.Text <> "" And Me.TB_date_from.Text <> "" Then
            If Month(d2) - Month(d1) > 0 Then
                event_month = True
                Me.CB_month.ListIndex = -1
                event_month = False
            End If
        End If
    End If
End Sub
' >>> convert a date string to a date
Private Function str_to_date(str As String) As Date
    Dim p As Integer
    Dim yr As Integer, mn As Integer, dy As Integer
    On Error GoTo ErrorHandler
    str_to_date = DateSerial(1900, 1, 1)
    yr = year(Now())
    mn = 0
    dy = 0
    p = InStr(str, "/")
    If p > 0 Then
        dy = CInt(Left(str, p - 1))
        str = Mid(str, p + 1, 999)
    End If
    p = InStr(str, "/")
    If p > 0 Then
        mn = CInt(Left(str, p - 1))
        str = Mid(str, p + 1, 999)
    Else
        mn = CInt(str)
        str = ""
    End If
    If str <> "" Then
        yr = CInt(str)
        If yr < 100 Then yr = 2000 + yr
    End If
    If yr > 1999 And yr < 2100 And mn > 0 And mn < 13 And dy > 0 And dy < 32 Then
        str_to_date = DateSerial(yr, mn, dy)
    End If
ErrorHandler:
End Function
' >>> filter records
Private Sub FilterList()
    Dim cl As Range
    Dim save As String, cmp As String, typ As String, cls As String, txt As String, nmb As String
    Dim dfr As String, dto As String
    Dim row As Integer
    Dim hide As Boolean
    cmp = Trim(Me.TB_company.Text)
    typ = Trim(Me.CB_clause.Text)
    cls = Trim(Me.CB_class.Text)
    dfr = Trim(Me.TB_date_from.Text)
    dto = Trim(Me.TB_date_to.Text)
    txt = Trim(Me.TB_text.Text)
    nmb = Trim(Me.TB_number.Text)
    UpdatesOff
    save = cmp + typ + cls + dfr + dto + txt + nmb ' ignore if same filter as last
    If filter_save <> save Then
        For Each cl In Range(GRN_payment_id).Rows ' loop rows
            hide = False
            row = cl.row
            hide = FilterTestCompany(hide, cmp, row, Range(GRN_payment_company).Column)
            hide = FilterTestType(hide, typ, row, Range(GRN_payment_clause).Column)
            hide = FilterTestClass(hide, cls, row, Range(GRN_payment_class).Column)
            hide = FilterTestDateFrom(hide, dfr, row, Range(GRN_payment_pay_date).Column)
            hide = FilterTestDateTo(hide, dto, row, Range(GRN_payment_pay_date).Column)
            hide = FilterTestText(hide, txt, row, Range(GRN_payment_activity).Column, Range(GRN_payment_remarks).Column)
            hide = FilterTestNumber(hide, nmb, row, Range(GRN_payment_inv_no).Column, Range(GRN_payment_pay_no).Column)
            hide = FilterTestLast(hide, row)
            cl.EntireRow.Hidden = hide
        Next
    End If
    filter_save = save ' save current filter
    UpdatesOn
    GoToCorner
End Sub
' >>> reset filter
Public Sub FilterReset()
    Me.TB_company = ""
    Me.CB_clause.ListIndex = -1
    Me.CB_class.ListIndex = -1
    Me.CB_month.ListIndex = -1
    Me.TB_date_from = ""
    Me.TB_date_to = ""
    Me.TB_text = ""
    Me.TB_number = ""
End Sub
' >>> test [company] filter and return (true) to hide
Private Function FilterTestCompany(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    Dim txt As String
    FilterTestCompany = hide
    If fl <> "" Then
        txt = Trim(sheet91.Cells(rw, c1).Value)
        If InStr(txt, fl) = 0 Then FilterTestCompany = True
    End If
End Function
' >>> test [clause] filter and return (true) to hide
Private Function FilterTestType(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestType = hide
    If fl <> "" Then
        If fl <> Trim(sheet91.Cells(rw, c1).Value) Then FilterTestType = True
    End If
End Function
' >>> test [class] filter and return (true) to hide
Private Function FilterTestClass(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestClass = hide
    If fl <> "" Then
        If fl <> Trim(sheet91.Cells(rw, c1).Value) Then FilterTestClass = True
    End If
End Function
' >>> text [date from] filter and return (true) to hide
Private Function FilterTestDateFrom(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    Dim d1 As Date, d2 As Date, x As String
    On Error GoTo ErrorHandler
    FilterTestDateFrom = hide
    If fl <> "" Then
        x = Trim(sheet91.Cells(rw, c1).Value)
        d1 = str_to_date(fl + "")
        d2 = str_to_date(x)
        If d2 < d1 Then FilterTestDateFrom = True
    End If
ErrorHandler:
End Function
' >>> text [date to] filter and return (true) to hide
Private Function FilterTestDateTo(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    Dim d1 As Date, d2 As Date, x As String
    On Error GoTo ErrorHandler
    FilterTestDateTo = hide
    If fl <> "" Then
        x = Trim(sheet91.Cells(rw, c1).Value)
        d1 = str_to_date(fl + "")
        d2 = str_to_date(x)
        If d2 > d1 Then FilterTestDateTo = True
    End If
ErrorHandler:
End Function
' >>> test [text] filter and return (true) to hide
Private Function FilterTestText(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer) As Boolean
    Dim txt As String
    FilterTestText = hide
    If fl <> "" Then
        txt = Trim(Trim(sheet91.Cells(rw, c1).Value) + " " + Trim(Cells(rw, c2).Text))
        If InStr(txt, fl) = 0 Then FilterTestText = True
    End If
End Function
' >>> test [number] filter and return (true) to hide
Private Function FilterTestNumber(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer) As Boolean
    Dim txt As String
    FilterTestNumber = hide
    If fl <> "" Then
        txt = Trim(Trim(sheet91.Cells(rw, c1).Value) + " " + Trim(Cells(rw, c2).Text))
        If InStr(txt, fl) = 0 Then FilterTestNumber = True
    End If
End Function
' >>> test for last line and make sure it's not hidden
Private Function FilterTestLast(hide As Boolean, rw As Integer)
    FilterTestLast = hide
    If Range(GRN_payment_last_line).row = rw Then FilterTestLast = False
End Function
' >>> ------- <<<
' >>> SORT    <<<
' >>> ------- <<<
' >>> activate selected sort order
Private Sub CB_sort_Change()
    SortList
    SheetFocus
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_sort_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_sort.ListIndex = -1
    FixElements
    SheetFocus
End Sub
' >>> sort list
Private Sub SortList()
    Dim id As String
    id = GetCurrentLineID()
    Select Case Me.CB_sort.Text
        Case "מס' חשבונית"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_inv_no), order1:=xlAscending
        Case "תאריך חשבונית"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_inv_date), order1:=xlAscending
        Case "מס' הוראה"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_pay_no), order1:=xlAscending
        Case "תאריך הוראה"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_pay_date), order1:=xlAscending
        Case "חברה"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_company), order1:=xlAscending, key2:=Range(GRN_payment_pay_no), order2:=xlAscending
        Case "סעיף הוצאה"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_clause), order1:=xlAscending, key2:=Range(GRN_payment_pay_no), order2:=xlAscending
        Case "חוג"
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_class), order1:=xlAscending, key2:=Range(GRN_payment_pay_no), order2:=xlAscending
        Case Else
            Range(GRN_payment_data).sort key1:=Range(GRN_payment_id), order1:=xlAscending, key2:=Range(GRN_payment_pay_no), order2:=xlAscending
    End Select
    GoToLine (id)
End Sub
' >>> get current line ID
Private Function GetCurrentLineID() As String
    Dim cl As Range
    Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_payment_id))
    GetCurrentLineID = Trim(cl.Value)
End Function
' >>> goto a line ID
Private Sub GoToLine(id As String)
    Dim cl As Range
    If id <> "" Then
        Set cl = Range(GRN_payment_id).Find(id, lookat:=xlWhole)
        Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
        cl.Select
    End If
End Sub
' >>> delete all records
Private Sub DeleteAll()
    Dim rng As Range
    Set rng = Range(GRN_payment_data)
    If Not (rng Is Nothing) Then
        rng.ClearContents
        If rng.Rows.count > 5 Then
            Range(rng.Cells(6, 1), rng.Cells(rng.Rows.count, 1)).EntireRow.Delete
        End If
    End If
End Sub
' >>> reset & clear this tab
Public Sub init_tab()
    FilterReset
    sheet91.Activate
    DeleteAll
    GoToCorner
End Sub


Attribute VB_Name = "ControlEvents"
Attribute VB_Base = "0{A62D3C49-9189-4EA3-A7EF-96AC0B568042}{7BB4AA63-ED05-45C1-B865-28F80D231203}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private filter_save As String
' >>> ------- <<<
' >>> GENERAL <<<
' >>> ------- <<<
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(GRN_def_panel_pos_misc).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    Me.CB_sort.RowSource = GRN_men_event_sort
    Me.CB_sort.ListIndex = -1
    Me.CB_type.RowSource = GRN_men_event_type
    Me.CB_type.ListIndex = -1
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
' stub
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> enable/disable elements
Sub FixElements()
    BT_clear.Enabled = (Trim(TB_name.Text) <> "" Or Trim(CB_type.Text) <> "" Or Trim(TB_class.Text) <> "" Or Trim(TB_text.Text) <> "")
End Sub
' >>> shift focus to the first visible row
Sub GoToCorner()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet7" Then
        Set cl = Intersect(Range(GRN_event_data).Cells(1).Offset(-1).EntireRow, Range(GRN_event_date).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1).Select
    End If
End Sub
' >>> maximize the events window
Private Sub EventsMaxi_Click()
    Me.Width = 335
    Me.Height = 99
    Me.Caption = "ניהול יומן אירועים"
    Me.EventsMaxi.Visible = False
    Me.EventsMini.Visible = True
    Me.EventsHelp.Visible = True
    Me.Label1.Visible = True
End Sub
' >>> minimize the events window
Private Sub EventsMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "אירועים"
    Me.EventsMini.Visible = False
    Me.EventsMaxi.Top = Me.EventsMini.Top
    Me.EventsMaxi.Visible = True
    Me.EventsHelp.Visible = False
    Me.Label1.Visible = False
End Sub
' >>> show help for events
Private Sub EventsHelp_Click()
    PanelHelp.ShowHelp ("אירועים")
End Sub
' >>> go to the bottom of the list
Private Sub EventsBottom_Click()
    GoToListBottom Range(GRN_event_date)
End Sub
' >>> ------- <<<
' >>> RECORDS <<<
' >>> ------- <<<
' >>> add a new record
Private Sub BT_new_Click()
    FilterReset
    RowAddNew
    SheetFocus
End Sub
' >>> delete one or more records
Private Sub BT_del_Click()
    Dim rng As Range
    Set rng = Intersect(Selection, Range(GRN_event_data))
    If Not (rng Is Nothing) Then
        If AskDialog(CN_sure, "yn") = "y" Then
            FilterReset
            RowDelete Selection
        End If
    End If
    SheetFocus
End Sub
' >>> add a record
Private Sub RowAddNew()
    Dim cl As Range, rng As Range
    Dim emp As Boolean
    GBL_suspend_checks = True
    Set rng = Range(GRN_event_id).SpecialCells(xlCellTypeBlanks).Cells(1)
    GBL_suspend_checks = False
    emp = (rng.row = Range(GRN_event_id).Cells(1).row)
    If emp Then Set rng = rng.Offset(1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromRightOrBelow
    If emp Then Set rng = rng.Offset(-1, 0)
    Set cl = rng.Offset(-1, 0)
    cl = GetUniqueID()
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_date))
    cl = Format(Now(), "yyyy/MM/dd")
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_time))
    cl = Format(Now(), "hh:mm")
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_type))
    cl = "תלמיד"
    Set cl = Intersect(cl.EntireRow, Range(GRN_event_where))
    cl.Select
End Sub
' >>> delete a record or records
Private Sub RowDelete(sl As Range)
    Dim cl As Range, rng As Range
    Set rng = Intersect(sl.EntireRow, Range(GRN_event_data))
    If Not (rng Is Nothing) Then
        If Range(GRN_event_id).Rows.count - rng.Rows.count >= 5 Then
            rng.EntireRow.Delete
        Else
            Set rng = Intersect(rng, Range(GRN_event_data))
            rng.ClearContents
            SortList
        End If
    End If
End Sub
' >>> ------- <<<
' >>> FILTER <<<
' >>> ------- <<<
' >>> filter by name
Private Sub TB_name_Change()
    FilterList
    FixElements
End Sub
' >>> filter by type
Private Sub CB_type_Change()
    FilterList
    FixElements
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_type_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_type.ListIndex = -1
    FixElements
End Sub
' >>> filter by class
Private Sub TB_class_Change()
    FilterList
    FixElements
End Sub
' >>> filter by free text
Private Sub TB_text_Change()
    FilterList
    FixElements
End Sub
' >>> reset filter
Private Sub BT_clear_Click()
    FilterReset
    FixElements
    SheetFocus
End Sub
' >>> filter records
Private Sub FilterList()
    Dim cl As Range
    Dim save As String, nam As String, typ As String, cls As String, txt As String
    Dim row As Integer
    Dim hide As Boolean
    nam = Trim(Me.TB_name.Text)
    typ = Trim(Me.CB_type.Text)
    cls = Trim(Me.TB_class.Text)
    txt = Trim(Me.TB_text.Text)
    UpdatesOff
    save = nam + typ + cls + txt ' ignore if same filter as last
    If filter_save <> save Then
        For Each cl In Range(GRN_event_id).Rows ' loop rows
            hide = False
            row = cl.row
            hide = FilterTestName(hide, nam, row, Range(GRN_event_name_last).Column, Range(GRN_event_name_first).Column)
            hide = FilterTestType(hide, typ, row, Range(GRN_event_type).Column)
            hide = FilterTestWhere(hide, cls, row, Range(GRN_event_where).Column)
            hide = FilterTestText(hide, txt, row, Range(GRN_event_reported).Column, Range(GRN_event_details).Column, Range(GRN_event_action).Column)
            hide = FilterTestLast(hide, row)
            cl.EntireRow.Hidden = hide
        Next
    End If
    filter_save = save ' save current filter
    UpdatesOn
    GoToCorner
End Sub
' >>> reset filter
Public Sub FilterReset()
    Me.TB_name = ""
    Me.CB_type.ListIndex = -1
    Me.TB_class = ""
    Me.TB_text = ""
End Sub
' >>> test [name] filter and return (true) to hide
Private Function FilterTestName(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer) As Boolean
    Dim n1 As String, n2 As String, v1 As String, v2 As String
    Dim sp As Integer
    FilterTestName = hide
    If fl <> "" Then
        sp = InStr(fl, " ")
        If sp > 0 Then ' 2 substrings in filter
            n1 = Trim(Left(fl, sp))
            n2 = Trim(Mid(fl, sp + 1))
        Else ' 1 substring in filter
            n1 = fl
            n2 = ""
        End If
        v1 = Trim(sheet7.Cells(rw, c1).Value)
        v2 = Trim(sheet7.Cells(rw, c2).Value)
        If n2 <> "" Then ' check to do if 2 substrings
            If (Left(v1, Len(n1)) <> n1 Or Left(v2, Len(n2)) <> n2) And (Left(v2, Len(n1)) <> n1 Or Left(v1, Len(n2)) <> n2) Then FilterTestName = True
        Else ' check to do if 1 substring
            If Left(v1, Len(n1)) <> n1 And Left(v2, Len(n1)) <> n1 Then FilterTestName = True
        End If
    End If
End Function
' >>> test [type] filter and return (true) to hide
Private Function FilterTestType(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestType = hide
    If fl <> "" Then
        If fl <> Trim(sheet7.Cells(rw, c1).Value) Then FilterTestType = True
    End If
End Function
' >>> test [where] filter and return (true) to hide
Private Function FilterTestWhere(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    Dim txt As String
    FilterTestWhere = hide
    If fl <> "" Then
        txt = Trim(Trim(sheet7.Cells(rw, c1).Value))
        If InStr(txt, fl) = 0 Then FilterTestWhere = True
    End If
End Function
' >>> test [text] filter and return (true) to hide
Private Function FilterTestText(hide As Boolean, fl As String, rw As Integer, c1 As Integer, c2 As Integer, c3 As Integer) As Boolean
    Dim txt As String
    FilterTestText = hide
    If fl <> "" Then
        txt = Trim(Trim(sheet7.Cells(rw, c1).Value) + " " + Trim(Cells(rw, c2).Text) + " " + Trim(Cells(rw, c3).Text))
        If InStr(txt, fl) = 0 Then FilterTestText = True
    End If
End Function
' >>> test for last line and make sure it's not hidden
Private Function FilterTestLast(hide As Boolean, rw As Integer)
    FilterTestLast = hide
    If Range(GRN_event_last_line).row = rw Then FilterTestLast = False
End Function
' >>> ------- <<<
' >>> SORT <<<
' >>> ------- <<<
' >>> activate selected sort order
Private Sub CB_sort_Change()
    SortList
    SheetFocus
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_sort_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_sort.ListIndex = -1
    FixElements
    SheetFocus
End Sub
' >>> sort list
Private Sub SortList()
    Dim id As String
    id = GetCurrentLineID()
    Select Case Me.CB_sort.Text
        Case "תאריך / שעה"
            Range(GRN_event_data).sort key1:=Range(GRN_event_date), order1:=xlAscending, key2:=Range(GRN_event_time), order2:=xlAscending, key3:=Range(GRN_event_id), order3:=xlAscending
        Case "חוג / מקום"
            Range(GRN_event_data).sort key1:=Range(GRN_event_where), order1:=xlAscending, key2:=Range(GRN_event_date), order2:=xlAscending, key3:=Range(GRN_event_time), order3:=xlAscending
        Case "כיתה + שם"
            Range(GRN_event_data).sort key1:=Range(GRN_event_grade), order1:=xlAscending, key2:=Range(GRN_event_name_last), order2:=xlAscending, key3:=Range(GRN_event_name_first), order3:=xlAscending
        Case "שם"
            Range(GRN_event_data).sort key1:=Range(GRN_event_name_last), order1:=xlAscending, key2:=Range(GRN_event_name_first), order2:=xlAscending
        Case Else
            Range(GRN_event_data).sort key1:=Range(GRN_event_id), order1:=xlAscending
    End Select
    GoToLine (id)
End Sub
' >>> get current line ID
Private Function GetCurrentLineID() As String
    Dim cl As Range
    Set cl = Intersect(ActiveCell.EntireRow, Range(GRN_event_id))
    GetCurrentLineID = Trim(cl.Value)
End Function
' >>> goto a line ID
Private Sub GoToLine(id As String)
    Dim cl As Range
    If id <> "" Then
        Set cl = Range(GRN_event_id).Find(id, lookat:=xlWhole)
        Set cl = Intersect(cl.EntireRow, ActiveCell.EntireColumn)
        cl.Select
    End If
End Sub
' >>> delete all records
Private Sub DeleteAll()
    Dim rng As Range
    Set rng = Range(GRN_event_data)
    If Not (rng Is Nothing) Then
        rng.ClearContents
        If rng.Rows.count > 5 Then
            Range(rng.Cells(6, 1), rng.Cells(rng.Rows.count, 1)).EntireRow.Delete
        End If
    End If
End Sub
' >>> reset & clear this tab
Public Sub init_tab()
    FilterReset
    sheet7.Activate
    DeleteAll
    GoToCorner
End Sub


Attribute VB_Name = "ControlStaff"
Attribute VB_Base = "0{3BE80D4B-462D-4E16-B5AA-2C75534BFC53}{D789E08F-477F-4652-919C-4CC55493D74D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private filter_save As String
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(GRN_def_panel_pos_misc).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    Me.TB_year = Format(Date, "yyyy")
    If Format(Date, "mm/dd") > "08/00" Then Me.TB_year = str(Int(Me.TB_year + 1))
    Me.CB_type.RowSource = GRN_men_staff_type
    Me.CB_type.ListIndex = -1
    Me.CB_job.RowSource = GRN_men_staff_job
    Me.CB_job.ListIndex = -1
    Me.CB_sort.List = Array("רגיל", "שם", "חוג")
    Me.CB_sort.ListIndex = 0
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
' stub
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> enable/disable elements
Sub FixElements()
    Me.BT_clear.Enabled = (Trim(TB_name.Text) <> "" Or Trim(CB_job.Text) <> "" Or Trim(TB_class.Text) <> "" Or Trim(CB_type.Text) <> "" Or Trim(TB_year.Text) <> "")
End Sub
' >>> shift focus to the first visible row
Sub GoToCorner()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet8" Then
        Set cl = Intersect(Range(GRN_stf_data).Cells(1).Offset(-1).EntireRow, Range(GRN_stf_year).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1, 2).Select
    End If
End Sub
' >>> maximize the staff window
Private Sub StaffMaxi_Click()
    Me.Width = 336
    Me.Height = 99
    Me.Caption = "ניהול צוות"
    Me.StaffMaxi.Visible = False
    Me.StaffMini.Visible = True
    Me.StaffHelp.Visible = True
    Me.Label1.Visible = True
    Me.Label2.Visible = True
    Me.CB_type.Visible = True
End Sub
' >>> minimize the staff window
Private Sub StaffMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "צוות"
    Me.StaffMini.Visible = False
    Me.StaffMaxi.Top = Me.StaffMini.Top
    Me.StaffMaxi.Visible = True
    Me.StaffHelp.Visible = False
    Me.Label1.Visible = False
    Me.Label2.Visible = False
    Me.CB_type.Visible = False
End Sub
' >>> show help for staff
Private Sub StaffHelp_Click()
    PanelHelp.ShowHelp ("צוות")
End Sub
' >>> go to the bottom of the list
Private Sub StaffBottom_Click()
    GoToListBottom Range(GRN_stf_type)
End Sub
' >>> ------- <<<
' >>> RECORDS <<<
' >>> ------- <<<
' >>> add a new record
Private Sub BT_new_Click()
    FilterReset
    RowAddNew
    SheetFocus
End Sub
' >>> delete one or more records
Private Sub BT_del_Click()
    Dim rng As Range
    Set rng = Intersect(Selection, Range(GRN_stf_data))
    If Not (rng Is Nothing) Then
        If AskDialog(CN_sure, "yn") = "y" Then
            RowDelete Selection
            FilterReset
        End If
    End If
    SheetFocus
End Sub
' >>> add a record
Private Sub RowAddNew()
    Dim cl As Range, rng As Range
    Dim emp As Boolean
    Set rng = Range(GRN_stf_year).SpecialCells(xlCellTypeBlanks).Cells(1)
    emp = (rng.row = Range(GRN_stf_data).Cells(1).row)
    If emp Then Set rng = rng.Offset(1, 0)
    rng.EntireRow.Insert CopyOrigin:=xlFormatFromRightOrBelow
    If emp Then Set rng = rng.Offset(-1, 0)
    Set cl = rng.Offset(-1, 0)
    cl = Format(Date, "yyyy")
    If Format(Date, "mm/dd") > "08/00" Then cl = str(Int(cl + 1))
    cl.Cells(1, 2).Select
End Sub
' >>> delete a record or records
Private Sub RowDelete(sl As Range)
    Dim cl As Range, rng As Range
    Set rng = Intersect(sl.EntireRow, Range(GRN_stf_data))
    If Not (rng Is Nothing) Then
        If Range(GRN_stf_year).Rows.count - rng.Rows.count >= 5 Then
            rng.EntireRow.Delete
        Else
            Set rng = Intersect(rng, Range(GRN_stf_data))
            rng.ClearContents
            SortList
        End If
    End If
End Sub
' >>> ------- <<<
' >>> FILTER  <<<
' >>> ------- <<<
' >>> reset filters
Private Sub BT_clear_Click()
    FilterReset
    FixElements
    SheetFocus
End Sub
' >>> filter by job
Private Sub CB_job_Change()
    FilterList
    FixElements
    SheetFocus
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_job_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_job.ListIndex = -1
    FixElements
    SheetFocus
End Sub
' >>> filter by type
Private Sub CB_type_Change()
    FilterList
    FixElements
    SheetFocus
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_type_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_type.ListIndex = -1
    FixElements
    SheetFocus
End Sub
' >>> filter by class
Private Sub TB_class_Change()
    FilterList
    FixElements
End Sub
' >>> filter by name
Private Sub TB_name_Change()
    FilterList
    FixElements
End Sub
' >>> filter by year
Private Sub TB_year_Change()
    FilterList
    FixElements
End Sub
' >>> filter records
Private Sub FilterList()
    Dim cl As Range
    Dim save As String, name As String, typ As String, job As String, cls As String, year As String
    Dim row As Integer
    Dim hide As Boolean
    name = Trim(Me.TB_name.Text)
    typ = Trim(Me.CB_type.Text)
    job = Trim(Me.CB_job.Text)
    cls = Trim(Me.TB_class.Text)
    year = Trim(Me.TB_year.Text)
    UpdatesOff
    save = name + typ + job + cls + year ' ignore if same filter as last
    If filter_save <> save Then
        For Each cl In Range(GRN_stf_year).Rows ' loop rows
            hide = False
            row = cl.row
            hide = FilterTestName(hide, name, row, Range(GRN_stf_name).Column)
            hide = FilterTestType(hide, typ, row, Range(GRN_stf_type).Column)
            hide = FilterTestJob(hide, job, row, Range(GRN_stf_job).Column)
            hide = FilterTestClass(hide, cls, row, Range(GRN_stf_class).Column)
            hide = FilterTestYear(hide, year, row, Range(GRN_stf_year).Column)
            hide = FilterTestLast(hide, row)
            cl.EntireRow.Hidden = hide
        Next
    End If
    filter_save = save ' save current filter
    UpdatesOn
    GoToCorner
End Sub
' >>> reset filter
Public Sub FilterReset()
    Me.TB_name = ""
    Me.CB_job.ListIndex = -1
    Me.TB_class = ""
    Me.CB_type.ListIndex = -1
    Me.TB_year = Format(Date, "yyyy")
    If Format(Date, "mm/dd") > "08/00" Then Me.TB_year = str(Int(Me.TB_year + 1))
End Sub
' >>> test [name] filter and return (true) to hide
Private Function FilterTestName(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestName = hide
    If fl <> "" Then
        If Not InstrAll(sheet8.Cells(rw, c1).Value, fl) Then FilterTestName = True
    End If
End Function
' >>> test [type] filter and return (true) to hide
Private Function FilterTestType(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestType = hide
    If fl <> "" Then
        If fl <> Trim(sheet8.Cells(rw, c1).Value) Then FilterTestType = True
    End If
End Function
' >>> test [job] filter and return (true) to hide
Private Function FilterTestJob(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestJob = hide
    If fl <> "" Then
        If fl <> Trim(sheet8.Cells(rw, c1).Value) Then FilterTestJob = True
    End If
End Function
' >>> test [class] filter and return (true) to hide
Private Function FilterTestClass(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    Dim txt As String
    FilterTestClass = hide
    If fl <> "" Then
        txt = Trim(sheet8.Cells(rw, c1).Value)
        If InStr(txt, fl) = 0 Then FilterTestClass = True
    End If
End Function
' >>> test [year] filter and return (true) to hide
Private Function FilterTestYear(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestYear = hide
    If fl <> "" Then
        If fl <> Trim(sheet8.Cells(rw, c1).Value) And Trim(sheet8.Cells(rw, c1).Text) <> "" Then FilterTestYear = True
    End If
End Function
' >>> test for last line and make sure it's not hidden
Private Function FilterTestLast(hide As Boolean, rw As Integer)
    FilterTestLast = hide
    If Range(GRN_stf_last).row = rw Then FilterTestLast = False
End Function
' >>> ------- <<<
' >>> SORT    <<<
' >>> ------- <<<
' >>> activate selected sort order
Private Sub CB_sort_Change()
    SortList
    SheetFocus
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_sort_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_sort.ListIndex = -1
    FixElements
    SheetFocus
End Sub
' >>> sort list
Private Sub SortList()
    Dim id As String
    Select Case Me.CB_sort.Text
        Case "שם"
            Range(GRN_stf_data).sort key1:=Range(GRN_stf_year), order1:=xlDescending, key2:=Range(GRN_stf_name), order2:=xlAscending
        Case "חוג"
            Range(GRN_stf_data).sort key1:=Range(GRN_stf_year), order1:=xlDescending, key2:=Range(GRN_stf_class), order2:=xlAscending, key3:=Range(GRN_stf_name), order3:=xlAscending
        Case Else
            Range(GRN_stf_data).sort key1:=Range(GRN_stf_job), order1:=xlAscending
            Range(GRN_stf_data).sort key1:=Range(GRN_stf_year), order1:=xlDescending, key2:=Range(GRN_stf_type), order2:=xlDescending, key3:=Range(GRN_stf_class), order3:=xlAscending
    End Select
End Sub


Attribute VB_Name = "ControlChanges"
Attribute VB_Base = "0{15F71594-07F0-41CC-BFA0-20D857FEEB02}{C1CFC1B5-66D2-4B65-A6E1-92A72AF3C281}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private filter_save As String
Private rows_to_del As Integer
' >>> ------- <<<
' >>> GENERAL <<<
' >>> ------- <<<
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    rows_to_del = 0
    s = Range(GRN_def_panel_pos_misc).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    Me.CB_grade.RowSource = GRN_men_grades
    FixElements
End Sub
' >>> do each time the panel is shown
Private Sub UserForm_Activate()
' stub
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> fix elements
Private Sub FixElements()
    BT_clear.Visible = (TB_name.Value <> "" Or CB_grade.Value <> "" Or TB_class_1.Value <> "" Or TB_class_2.Value <> "")
End Sub
' >>> shift focus to the first visible row
Sub GoToCorner()
    Dim cl As Range, rng As Range
    If ActiveWorkbook.ActiveSheet.CodeName = "sheet9" Then
        Set cl = Intersect(Range(GRN_cng_body).Cells(1).Offset(-1).EntireRow, Range(GRN_cng_date).EntireColumn)
        cl.Select
        Set rng = Range(Cells(cl.row + 1, cl.Column), Cells(Rows.count, cl.Column))
        rng.SpecialCells(xlCellTypeVisible).Cells(1).Select
    End If
End Sub
' >>> go to the bottom of the list
Private Sub ChangesBottom_Click()
    GoToListBottom Range(GRN_cng_date)
End Sub
' >>> maximize the changes window
Private Sub ChangesMaxi_Click()
    Me.Width = 300
    Me.Height = 99
    Me.Caption = "ניהול שינויים בחוגים"
    Me.ChangesMaxi.Visible = False
    Me.ChangesMini.Visible = True
    Me.ChangesHelp.Visible = True
    Me.BT_condense.Visible = True
End Sub
' >>> minimize the changes window
Private Sub ChangesMini_Click()
    Me.Width = 40
    Me.Height = 38
    Me.Caption = "שינויים"
    Me.ChangesMini.Visible = False
    Me.ChangesMaxi.Top = Me.ChangesMini.Top
    Me.ChangesMaxi.Visible = True
    Me.ChangesHelp.Visible = False
    Me.BT_condense.Visible = False
End Sub
' >>> show help fpr changes panel
Private Sub ChangesHelp_Click()
    PanelHelp.ShowHelp ("שינויים")
End Sub
' >>> show/hide [family code] column
Private Sub CheckFamCode_Click()
    Range(GRN_cng_fam_code).EntireColumn.Hidden = Not CheckFamCode.Value
    SheetFocus
End Sub
' >>> show/hide [kid's no#] column
Private Sub CheckKidNo_Click()
    Range(GRN_cng_kid_no).EntireColumn.Hidden = Not CheckKidNo.Value
    SheetFocus
End Sub
' >>> ------- <<<
' >>> RECORDS <<<
' >>> ------- <<<
' >>> delete one or more records
Private Sub BT_del_Click()
    Dim rng As Range
    Set rng = Intersect(Selection, Range(GRN_cng_body))
    If Not (rng Is Nothing) Then
        If AskDialog(CN_sure, "yn") = "y" Then
            FilterReset
            RowDelete Selection
        End If
    End If
    SheetFocus
End Sub
' >>> delete all records
Private Sub BT_erase_Click()
    If AskDialog(CN_sure, "yn") = "y" Then
        FilterReset
        DeleteAll
        GoToCorner
    End If
    SheetFocus
End Sub
' >>> delete a record or records
Private Sub RowDelete(sl As Range)
    Dim rng As Range
    Set rng = Intersect(sl.EntireRow, Range(GRN_cng_body))
    If Not (rng Is Nothing) Then
        rng.EntireRow.Delete
    End If
End Sub
' >>> delete all records
Private Sub DeleteAll()
    Dim rng As Range
    Set rng = Range(GRN_cng_body)
    If Not (rng Is Nothing) Then
        rng.ClearContents
        If rng.Rows.count > 5 Then
            Range(rng.Cells(6, 1), rng.Cells(rng.Rows.count, 1)).EntireRow.Delete
        End If
    End If
End Sub
' >>> ------- <<<
' >>> FILTER <<<
' >>> ------- <<<
' >>> filter by kid name
Private Sub TB_name_Change()
    FilterList
    FixElements
End Sub
' >>> filter by kid grade
Private Sub CB_grade_Change()
    FilterList
    FixElements
End Sub
' >>> clear field's selection when [delete] is pressed
Private Sub CB_grade_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_grade.ListIndex = -1
    FixElements
End Sub
' >>> filter by class (from)
Private Sub TB_class_1_Change()
    FilterList
    FixElements
End Sub
' >>> filter by class (to)
Private Sub TB_class_2_Change()
    FilterList
    FixElements
End Sub
' >>> reset filters
Private Sub BT_clear_Click()
    FilterReset
    FixElements
    SheetFocus
End Sub
' >>> filter records
Private Sub FilterList()
    Dim cl As Range
    Dim save As String, name As String, grade As String, cls1 As String, cls2 As String
    Dim row As Integer
    Dim hide As Boolean
    name = Trim(TB_name.Value)
    grade = Trim(CB_grade.Value)
    cls1 = Trim(TB_class_1.Value)
    cls2 = Trim(TB_class_2.Value)
    UpdatesOff
    save = name + grade + cls1 + cls2 ' ignore if same filter as last
    If filter_save <> save Then
        For Each cl In Range(GRN_cng_date).Rows ' loop rows
            hide = False
            row = cl.row
            If InStr(name, "#") > 0 Then
                hide = FilterTestRem(hide, Mid(name, 2, 99), row, Range(GRN_cng_rem).Column)
            Else
                hide = FilterTestName(hide, name, row, Range(GRN_cng_kid).Column)
            End If
            hide = FilterTestGrade(hide, grade, row, Range(GRN_cng_grade).Column)
            hide = FilterTestClass(hide, cls1, row, Range(GRN_cng_class_1).Column)
            hide = FilterTestClass(hide, cls2, row, Range(GRN_cng_class_2).Column)
            cl.EntireRow.Hidden = hide
        Next
    End If
    filter_save = save ' save current filter
    UpdatesOn
    GoToCorner
End Sub
' >>> reset filter
Public Sub FilterReset()
    Me.TB_name = ""
    Me.CB_grade.ListIndex = -1
    Me.TB_class_1 = ""
    Me.TB_class_2 = ""
End Sub
' >>> test [name] filter and return (true) if matched
Private Function FilterTestName(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestName = hide
    If fl <> "" Then
        If Not InstrAll(sheet9.Cells(rw, c1).Value, fl) Then FilterTestName = True
    End If
End Function
' >>> test [remark] filter and return (true) if matched
Private Function FilterTestRem(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestRem = hide
    If fl <> "" Then
        If Not InstrAll(sheet9.Cells(rw, c1).Value, fl) Then FilterTestRem = True
    Else
        If Trim(sheet9.Cells(rw, c1).Value) = "" Then FilterTestRem = True
    End If
End Function
' >>> test [grade] filter and return (true) if matched
Private Function FilterTestGrade(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestGrade = hide
    If fl <> "" Then
        If sheet9.Cells(rw, c1).Value <> Trim(fl) Then FilterTestGrade = True
    End If
End Function
' >>> test [class] filter and return (true) if matched
Private Function FilterTestClass(hide As Boolean, fl As String, rw As Integer, c1 As Integer) As Boolean
    FilterTestClass = hide
    If fl <> "" Then
        If Not InstrAll(sheet9.Cells(rw, c1).Value, fl) Then FilterTestClass = True
    End If
End Function
' >>> ------- <<<
' >>> SPECIAL <<<
' >>> ------- <<<
' >>> condense records
Private Sub BT_condense_Click()
    Dim c As Long, i As Long
    Dim cl As Range
    UpdatesOff
    FilterReset
    SortList "spc"
    Me.BT_condense.Visible = False
    Me.Label_condense.Visible = True
    rows_to_del = 0
    c = Range(GRN_cng_body).Rows.count
    i = 1
    For Each cl In Range(GRN_cng_body).Rows
        Condense cl.EntireRow, cl.Offset(1, 0).EntireRow
        Eliminate cl.EntireRow
        If Trim(cl.Cells(1, 1)) = "" Then rows_to_del = rows_to_del + 1
        Me.Label_condense.Caption = CStr(Int(100 * i / c)) + " %"
        ControlChanges.Repaint
        i = i + 1
    Next
    SortList
    If rows_to_del > 4 Then rows_to_del = rows_to_del - 5
    DeleteLastRows
    Me.Label_condense.Visible = False
    Me.BT_condense.Visible = True
    UpdatesOn
    ChangesBottom_Click
    SheetFocus
End Sub
' >>> check two rows and condense if required
Private Sub Condense(rw1 As Range, rw2 As Range)
    Dim nm1 As String, gr1 As String, hr1 As String
    Dim nm2 As String, gr2 As String, hr2 As String
    Dim cls As String, cl2 As String, cmt As String
    Dim rng As Range
    Set rng = Intersect(rw1, Range(GRN_cng_kid).EntireColumn)
    nm1 = Trim(rng.Value)
    Set rng = Intersect(rw1, Range(GRN_cng_grade).EntireColumn)
    gr1 = Trim(rng.Value)
    Set rng = Intersect(rw1, Range(GRN_cng_hour).EntireColumn)
    hr1 = Trim(rng.Value)
    If Trim(nm1 + gr1 + hr1) <> "" Then
        Set rng = Intersect(rw2, Range(GRN_cng_kid).EntireColumn)
        nm2 = Trim(rng.Value)
        Set rng = Intersect(rw2, Range(GRN_cng_grade).EntireColumn)
        gr2 = Trim(rng.Value)
        Set rng = Intersect(rw2, Range(GRN_cng_hour).EntireColumn)
        hr2 = Trim(rng.Value)
        If Trim(nm1 + gr1 + hr1) = Trim(nm2 + gr2 + hr2) Then
            Set rng = Intersect(rw1, Range(GRN_cng_class_2).EntireColumn)
            cls = Trim(rng.Value)
            Set rng = Intersect(rw2, Range(GRN_cng_class_2).EntireColumn)
            rng.Value = cls
            Set rng = Intersect(rw1, Range(GRN_cng_rem).EntireColumn)
            cmt = Trim(rng.Value)
            If cmt <> "" Then
                Set rng = Intersect(rw2, Range(GRN_cng_rem).EntireColumn)
                rng.Value = Trim(rng.Value) & " / " & cmt
            End If
            rw1.EntireRow.ClearContents
        End If
    End If
End Sub
' >>> eliminate a row if both from/to classes are the same
Private Sub Eliminate(rw As Range)
    Dim cl1 As String, cl2 As String, cmt As String
    Dim rng As Range
    Set rng = Intersect(rw, Range(GRN_cng_class_1).EntireColumn)
    cl1 = Trim(rng.Value)
    Set rng = Intersect(rw, Range(GRN_cng_class_2).EntireColumn)
    cl2 = Trim(rng.Value)
    Set rng = Intersect(rw, Range(GRN_cng_rem).EntireColumn)
    cmt = Trim(rng.Value)
    If cl1 = cl2 And cmt = "" Then rw.EntireRow.ClearContents
End Sub
' >>> delete condensed rows from the bottom of the list
Private Sub DeleteLastRows()
    Dim rng As Range
    While (rows_to_del > 0)
        Set rng = Range(GRN_cng_date)
        Set rng = rng.Rows(rng.Rows.count - 1)
        rng.EntireRow.Delete
        rows_to_del = rows_to_del - 1
    Wend
    rows_to_del = 0
End Sub
' >>> sort list
Private Sub SortList(Optional sort As String = "")
    Dim id As String
    Select Case sort
        Case "spc"
            Range(GRN_cng_body).sort key1:=Range(GRN_cng_hour), order1:=xlAscending, key2:=Range(GRN_cng_time), order2:=xlDescending
            Range(GRN_cng_body).sort key1:=Range(GRN_cng_date), order1:=xlAscending, key2:=Range(GRN_cng_kid), order2:=xlAscending
        Case Else
            Range(GRN_cng_body).sort key1:=Range(GRN_cng_date), order1:=xlAscending, key2:=Range(GRN_cng_time), order2:=xlAscending
    End Select
End Sub
' >>> reset & clear this tab
Public Sub init_tab()
    FilterReset
    sheet9.Activate
    DeleteAll
    GoToCorner
End Sub


Attribute VB_Name = "ModuleAssist"
Option Explicit
' >>> transparency definitions
#If VBA7 Then
    Private Declare PtrSafe Function FindWindow Lib "USER32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "User32.dll" (ByVal hWnd As LongPtr, ByVal crKey As LongPtr, ByVal bAlpha As Byte, ByVal dwFlags As LongPtr) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function GetWindowLongPtr Lib "USER32" Alias "GetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
        Private Declare PtrSafe Function SetWindowLongPtr Lib "USER32" Alias "SetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function GetWindowLongPtr Lib "USER32" Alias "GetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
        Private Declare PtrSafe Function SetWindowLongPtr Lib "USER32" Alias "SetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Public hWnd As LongPtr
#Else
    Private Declare Function FindWindow Lib "USER32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetLayeredWindowAttributes Lib "USER32" (ByVal hWnd As Long, ByVal crey As Byte, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
    Private Declare Function GetWindowLong Lib "USER32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
    Private Declare Function SetWindowLong Lib "USER32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Public hWnd As Long
#End If
Private Const GWL_EXSTYLE = (-20)
Private Const WS_EX_LAYERED = &H80000
Private Const LWA_ALPHA = &H2&
' >>> dynamic labels variables
Public LabelArray(50) As New AssistLabelEvent
Public LabelArrayCount As Integer
' >>> control the transparency of a form
Public Sub TransparentPanel(frm As Object, opc As Byte)
    If opc < 10 Then opc = 10
    If opc > 250 Then opc = 250
    hWnd = FindWindow("ThunderDFrame", frm.Caption)
#If VBA7 Then
    Call SetWindowLongPtr(hWnd, GWL_EXSTYLE, GetWindowLongPtr(hWnd, GWL_EXSTYLE) Or WS_EX_LAYERED)
#Else
    Call SetWindowLong(hWnd, GWL_EXSTYLE, GetWindowLong(hWnd, GWL_EXSTYLE) Or WS_EX_LAYERED)
#End If
    Call SetLayeredWindowAttributes(hWnd, 0, opc, LWA_ALPHA)
End Sub
' >>> handle all label clicks for dynamic labels
Public Sub HandleLavelClick(s As String)
    ActiveCell.Value = s
    SheetFocus
End Sub


Attribute VB_Name = "PanelAssist"
Attribute VB_Base = "0{231C9F7E-528A-4417-A19B-EF4E7B2DB223}{2153BA27-406C-4473-A120-A5B22FB8535B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const transparency = 200
Private Const panelWidth = 170
Private what As String
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    LabelArrayCount = 0
    what = ""
    Me.RightToLeft = True
    Me.Width = panelWidth
    Me.Label_00 = Me.Width - 16
    Me.TransBar = Me.Width - 16
    Me.TransBar.Value = transparency
End Sub
' >>> do when panel is shown
Private Sub UserForm_Activate()
    Dim w As Integer, t As Integer
    w = CInt(Range(GRN_def_assist_ppl_width))
    t = CInt(Range(GRN_def_assist_ppl_tran))
    t = IIf(t < 100, 100, IIf(t > 250, 250, t))
    Me.Width = w
    Me.Label_00 = Me.Width - 16
    Me.TransBar = Me.Width - 16
    Me.TransBar.Value = t
End Sub
' >>> allow changes to transparency
Private Sub TransBar_Change()
    TransparentPanel Me, TransBar.Value
    UpdateDefs
End Sub
' >>> remember form location
Private Sub UserForm_Layout()
    UpdateDefs
End Sub
' >>> update defs
Private Sub UpdateDefs()
    UpdatesOff
    Select Case what
    Case "ppl_cls"
        ChangeLayoutPos Me, GRN_def_assist_ppl_cls
        Range(GRN_def_assist_ppl_tran) = CStr(TransBar.Value)
    End Select
    UpdatesOn
End Sub
' >>> add a clickable label to the form
Private Sub AddLabel(c As MSForms.Label, n As String, x As Integer, y As Integer)
    Dim cnt As MSForms.Label
    Dim i As Long, ii As Integer
    ii = 0
    For i = 1 To LabelArrayCount
        If LabelArray(i).name = n Then ii = i
    Next i
    If ii = 0 Then
        Set cnt = Me.Controls.add("Forms.Label.1", n)
        With cnt
            cnt.BackColor = c.BackColor
            cnt.BackStyle = c.BackStyle
            cnt.BorderColor = c.BorderColor
            cnt.BorderStyle = c.BorderStyle
            cnt.Font = c.Font
            cnt.Font.Size = c.Font.Size
            cnt.Font.Bold = c.Font.Bold
            cnt.ForeColor = c.ForeColor
            cnt.Height = c.Height
            cnt.TextAlign = c.TextAlign
            cnt.Width = c.Width
            cnt.WordWrap = c.WordWrap
        End With
        LabelArrayCount = LabelArrayCount + 1
        i = LabelArrayCount
        Set LabelArray(i).labelEvents = cnt
        LabelArray(i).name = n
    Else
        i = ii
        Set cnt = LabelArray(i).labelEvents
    End If
    With cnt
        .Left = x
        .Top = y
        .Caption = ""
        .Visible = True
    End With
End Sub
' >>> fix form's height
Private Sub FixHeight()
    Dim i As Long, t As Integer
    For i = 1 To LabelArrayCount
        If LabelArray(i).labelEvents.Visible = False Then
            t = LabelArray(i).labelEvents.Top
            Exit For
        End If
    Next i
    If i > LabelArrayCount Then t = LabelArray(i - 1).labelEvents.Top + LabelArray(i - 1).labelEvents.Height
    Me.Height = t + 32
    Me.TransBar.Top = Me.Height - 28
End Sub
' >>> initialize assist position and size
Private Sub InitAssist(x As Integer, y As Integer, Optional w As Integer = panelWidth, Optional c As String = "בחירת ערך")
    Me.Left = x
    Me.Top = y
    Me.Width = w
    Me.Label_00.Width = w - 16
    Me.TransBar.Width = w - 16
    Me.Caption = c
End Sub
' >>> fill assist panel with values
Private Sub FillAssist(arr() As String)
    Dim i As Integer
    Dim n As String
    For i = 1 To LabelArrayCount
        LabelArray(i).labelEvents.Visible = False
    Next i
    For i = LBound(arr) To UBound(arr)
        n = "Label_" + Right("00" + CStr(i + 1), 2)
        AddLabel Me.Label_00, n, Me.Label_00.Left, Me.Label_00.Top + 11 * i
        Me.Controls(n).Width = Me.Width - 16
        Me.Controls(n).Caption = arr(i)
    Next i
End Sub
' >>> --------------------
' >>> pupils assist
' >>> --------------------
Public Sub PupilClassMenu(rng As Range)
    Dim x As Integer, y As Integer
    Dim p As String, t As Integer
    Dim w As Integer
    p = Trim(Range(GRN_def_assist_ppl_cls).Text)
    t = CInt(Range(GRN_def_assist_ppl_tran))
    w = CInt(Range(GRN_def_assist_ppl_width))
    t = IIf(t < 100, 100, IIf(t > 250, 250, t))
    w = IIf(w < 110, 110, IIf(w > 200, 200, w))
    If p <> "" Then
        what = "ppl_cls"
        Me.TransBar.Value = t
        FillAssist RangeToStrArr(rng)
        FixHeight
        x = 600
        y = Application.Height - Me.Height - 10
        If InStr(p, ",") > 0 Then
            x = GetPositionX(PanelAssist, p)
            y = GetPositionY(PanelAssist, p)
        End If
        InitAssist x, y, w, "בחר חוג"
        If Not Me.Visible Then Me.Show (vbModeless)
        SheetFocus
    End If
End Sub


Attribute VB_Name = "AssistLabelEvent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public WithEvents labelEvents As MSForms.Label
Attribute labelEvents.VB_VarHelpID = -1
Public name As String

Private Sub labelEvents_click()
    HandleLavelClick (PanelAssist.Controls(name).Caption)
End Sub



Attribute VB_Name = "PanelStability"
Attribute VB_Base = "0{471E61D5-38DF-4EE8-B59E-B6ECCED3D8E1}{76494229-E87C-4D53-B88D-C61044287A1F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Const line_height = 12
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    MakeList
End Sub
' >>> sort by [1st hour] column
Private Sub Label_1_00_Click()
    SortList "1"
End Sub
' >>> sort by [2nd hour] column
Private Sub Label_2_00_Click()
    SortList "2"
End Sub
' >>> sort by [3rd hour] column
Private Sub Label_3_00_Click()
    SortList "3"
End Sub
' >>> sort by [4th hour] column
Private Sub Label_4_00_Click()
    SortList "4"
End Sub
' >>> sort by [name] column
Private Sub Label_n_00_Click()
    SortList "n"
End Sub
' >>> sort by [total] column
Private Sub Label_t_00_Click()
    SortList "t"
End Sub
' >>> show help for stability panel
Private Sub StableHelp_Click()
    PanelHelp.ShowHelp ("יציבות-חוגים")
End Sub
' >>> ------------ <<<
' >>> CALC & BUILD <<<
' >>> ------------ <<<
' >>> build the stats list
Private Sub MakeList()
    Dim arr() As String, i As Integer
    Dim key As String, vls() As String
    Dim rw As String
    arr = CalcStability
    SortStrArray arr, "a"
    For i = LBound(arr) To UBound(arr)
        key = Mid(arr(i), 2, InStr(arr(i), "]") - 2)
        vls = Split(Mid(arr(i), InStr(arr(i), "=") + 1), ",")
        rw = Right("00" + CStr(i + 1), 2)
        If Not TestControlExists("Label_n_" + rw) Then AddRow i + 1
        Me.Controls("Label_n_" + rw).Caption = key
        Me.Controls("Label_n_" + rw).Visible = True
        Me.Controls("Label_t_" + rw).Caption = IIf(vls(0) <> "0", vls(0), "")
        Me.Controls("Label_t_" + rw).Visible = True
        Me.Controls("Label_1_" + rw).Caption = IIf(vls(1) <> "0", vls(1), "")
        Me.Controls("Label_1_" + rw).Visible = True
        Me.Controls("Label_2_" + rw).Caption = IIf(vls(2) <> "0", vls(2), "")
        Me.Controls("Label_2_" + rw).Visible = True
        Me.Controls("Label_3_" + rw).Caption = IIf(vls(3) <> "0", vls(3), "")
        Me.Controls("Label_3_" + rw).Visible = True
        Me.Controls("Label_4_" + rw).Caption = IIf(vls(4) <> "0", vls(4), "")
        Me.Controls("Label_4_" + rw).Visible = True
    Next i
    i = i + 1
' fix list scroll height
    Me.PCSframe.ScrollHeight = i * line_height - 4
' hide any leftover rows
    Do While HideRow(i)
        i = i + 1
    Loop
End Sub
' >>> calc the stability array
Private Function CalcStability() As String()
    Dim arr() As String, cl As Range
    Dim k As String, h As String
    arr = Split("")
    For Each cl In Range(GRN_cng_class_1)
        k = TrimStr(cl.Value, 2)
        If k <> "" Then
            If Not IsKey(arr, k) Then AddKey arr, k
                h = Trim(Mid(cl.Value, InStrRev(cl.Value, " ") + 1, 1))
                IncKey arr, k, h
        End If
    Next
    CalcStability = arr
End Function
' >>> ---- <<<
' >>> SORT <<<
' >>> ---- <<<
' >>> sort the list by column
Private Sub SortList(col As String)
    Dim r1 As String, r2 As String
    Dim v1 As String, v2 As String
    Dim i As Integer, r As Integer
    Dim s As Boolean
    s = True
    r = GetLastRow()
    Do While s
        s = False
        For i = 1 To r - 1
            r1 = Right("00" + CStr(i), 2)
            r2 = Right("00" + CStr(i + 1), 2)
            Select Case col
            Case "n"
                v2 = Me.Controls("Label_n_" + r1).Caption
                v1 = Me.Controls("Label_n_" + r2).Caption
            Case "t"
                v1 = Me.Controls("Label_t_" + r1).Caption
                v2 = Me.Controls("Label_t_" + r2).Caption
            Case "1"
                v1 = Me.Controls("Label_1_" + r1).Caption
                v2 = Me.Controls("Label_1_" + r2).Caption
            Case "2"
                v1 = Me.Controls("Label_2_" + r1).Caption
                v2 = Me.Controls("Label_2_" + r2).Caption
            Case "3"
                v1 = Me.Controls("Label_3_" + r1).Caption
                v2 = Me.Controls("Label_3_" + r2).Caption
            Case "4"
                v1 = Me.Controls("Label_4_" + r1).Caption
                v2 = Me.Controls("Label_4_" + r2).Caption
            End Select
            If v1 < v2 Then
                SwapValue "Label_n_" + r1, "Label_n_" + r2
                SwapValue "Label_t_" + r1, "Label_t_" + r2
                SwapValue "Label_1_" + r1, "Label_1_" + r2
                SwapValue "Label_2_" + r1, "Label_2_" + r2
                SwapValue "Label_3_" + r1, "Label_3_" + r2
                SwapValue "Label_4_" + r1, "Label_4_" + r2
                s = True
            End If
        Next i
    Loop
End Sub
' >>> get the index of the last row of labels
Private Function GetLastRow()
    Dim r As Integer, n As String
    r = 1
    Do While True
    n = "Label_n_" + Right("00" + CStr(r), 2)
        If Not TestControlExists(n) Then Exit Do
        r = r + 1
    Loop
    GetLastRow = r - 1
End Function
' >>> swap to control's values
Private Sub SwapValue(c1 As String, c2 As String)
    Dim v As String
    v = Me.Controls(c1).Caption
    Me.Controls(c1).Caption = Me.Controls(c2).Caption
    Me.Controls(c2).Caption = v
End Sub
' >>> ---- <<<
' >>> KEYS <<<
' >>> ---- <<<
' >>> checks if a key is already in the array
Private Function IsKey(arr() As String, key As String) As Boolean
    Dim i As Integer, l As Integer, k As String
    IsKey = False
    k = "[" + key + "]="
    l = Len(k)
    For i = LBound(arr) To UBound(arr)
        If Left(arr(i), l) = k Then
            IsKey = True
            Exit For
        End If
    Next i
End Function
' >>> add an empty key to the array
Private Sub AddKey(arr() As String, key As String)
    Dim c As Integer
    c = UBound(arr) + 1
    ReDim Preserve arr(c)
    arr(c) = "[" + key + "]=0,0,0,0,0"
End Sub
' >>> increment key's value per hour and total
Private Sub IncKey(arr() As String, key As String, hour As String)
    Dim i As Integer, l As Integer, k As String
    Dim vls() As String
    k = "[" + key + "]="
    l = Len(k)
    For i = LBound(arr) To UBound(arr)
        If Left(arr(i), l) = k Then
            vls = Split(Mid(arr(i), l + 1), ",")
            Select Case hour
                Case "1"
                    arr(i) = k + CStr(CInt(vls(0)) + 1) + "," + CStr(CInt(vls(1)) + 1) + "," + vls(2) + "," + vls(3) + "," + vls(4)
                Case "2"
                    arr(i) = k + CStr(CInt(vls(0)) + 1) + "," + vls(1) + "," + CStr(CInt(vls(2)) + 1) + "," + vls(3) + "," + vls(4)
                Case "3"
                    arr(i) = k + CStr(CInt(vls(0)) + 1) + "," + vls(1) + "," + vls(2) + "," + CStr(CInt(vls(3)) + 1) + "," + vls(4)
                Case "4"
                    arr(i) = k + CStr(CInt(vls(0)) + 1) + "," + vls(1) + "," + vls(2) + "," + vls(3) + "," + CStr(CInt(vls(4)) + 1)
            End Select
            Exit For
        End If
    Next i
'    arr(c) = "[" + key + "]=0,0,0,0,0"
End Sub
' >>> -------- <<<
' >>> CONTROLS <<<
' >>> -------- <<<
' >>> add a 6 cells label row to list (if not already there)
Private Sub AddRow(ind As Integer)
    Dim ref As MSForms.Label
    Dim lbl As MSForms.Label
    Dim rw As String
    rw = Right("00" + CStr(ind), 2)
    AddLabel "n", ind
    AddLabel "t", ind
    AddLabel "1", ind
    AddLabel "2", ind
    AddLabel "3", ind
    AddLabel "4", ind
End Sub
' >>> add a single label control
Private Sub AddLabel(no As String, ind As Integer)
    Dim ref As MSForms.Label
    Dim lbl As MSForms.Label
    Dim rw As String
    rw = Right("00" + CStr(ind), 2)
    Set ref = PCSframe.Controls("Label_" + no + "_01")
    Set lbl = PCSframe.Controls.add("Forms.Label.1", "Label_" + no + "_" + rw)
    With lbl
        .Left = ref.Left
        .Top = ref.Top + (ind - 1) * line_height
        .Height = ref.Height
        .Width = ref.Width
        .TextAlign = ref.TextAlign
        .BackColor = ref.BackColor
        .BorderStyle = ref.BorderStyle
        .Visible = True
    End With
End Sub
' >>> hide row #(ind) and return false when row doesn't exist
Private Function HideRow(ind As Integer) As Boolean
    Dim rw As String
    HideRow = True
    rw = Right("00" + CStr(ind), 2)
    If TestControlExists("Label_n_" + rw) Then
        Me.Controls("Label_n_" + rw).Visible = False
        Me.Controls("Label_t_" + rw).Visible = False
        Me.Controls("Label_1_" + rw).Visible = False
        Me.Controls("Label_2_" + rw).Visible = False
        Me.Controls("Label_3_" + rw).Visible = False
        Me.Controls("Label_4_" + rw).Visible = False
    Else
        HideRow = False
    End If
End Function
' >>> check if a control exist
Public Function TestControlExists(name As String) As Boolean
    Dim ctrl As Control
    TestControlExists = False
    For Each ctrl In Me.Controls
        If ctrl.name = name Then TestControlExists = True
    Next
End Function


Attribute VB_Name = "ModuleForms"
Option Explicit
' >>> constants
Public Const TP_att_col_1 = "[1]"
Public Const TP_att_col_2 = "[2]"
Public Const TP_att_col_3 = "[3]"
Public Const TP_att_col_4 = "[4]"
Public Const TP_att_col_5 = "[5]"
Public Const TP_att_gen_sens = "[*]"
Public Const TP_att_kid_no = "[#]"
Public Const TP_att_kid_last = "[משפחה]"
Public Const TP_att_kid_first = "[פרטי]"
Public Const TP_att_kid_grade = "[כיתה]"
Public Const TP_ass_kid_first = "[שם פרטי]"
Public Const TP_ass_kid_last = "[שם משפחה]"
Public Const TP_ass_kid_grade = "[כיתה]"
Public Const TP_ass_class = "[חוג 1]"
Public Const TP_ass_room = "[חדר 1]"
Public Const TP_ass_time = "[שעות 1]"
' >>> variables
Private appWord As Object
Private def_folder As String
Private att_file As String
Private att_head As String
Private att_cell As String
Private att_add As Integer
Private att_many As Double
Private ass_file As String
Private ass_sort As String
Private ass_merge As Boolean
Private no_part As String
' >>> ---------- <<<
' >>> ATTENDANCE <<<
' >>> ---------- <<<
' >>> create the [Attendance] forms
Public Sub MakeAttendanceForms()
    Dim ts1 As Worksheet, ts2 As Worksheet
    Dim tables As Integer, lines As Integer
    Dim WD As Object
    Dim tdata As Collection
    Dim stay As Boolean
    Dim file As String
    Dim msg As String
    If AreAllValidClasses() Then
        SetAttDefs
        stay = False
        file = WordPickFile(att_file, "בחר תבנית וורד לבניית דפי נוכחות")
        If file <> "" Then
            Set WD = WordOpenFile(file, "r")
            Set tdata = FetchTemplateData(WD)
            msg = ValidateAttendanceTemplate(tdata)
            If msg = "" Then
                DialogAttendance.Show (vbModal)
                UpdatesOff
                If DialogAttendance.Result <> "" Then
                    Set ts1 = MakeTempSheet("temp_sheet_1")
                    Set ts2 = MakeTempSheet("temp_sheet_2")
                    DoCounter True
                    UpdateCounter 0, 100
                    MakeClassList ts1, (tdata("kid_count") + att_add)
                    UpdateCounter 1, 100
                    MakePupilList ts2
                    UpdateCounter 2, 100
                    LinkClassPage ts1, ts2
                    UpdateCounter 3, 100
                    SortPupilList ts2
                    UpdateCounter 4, 100
                    FixAttFields WD, tdata, DialogAttendance.Result
                    UpdateCounter 5, 100
                    TransAttFields WD
                    UpdateCounter 6, 100
                    WordMailMerge WD, "temp_sheet_1"
                    WordCloseFile WD
                    UpdateCounter 10, 100
                    Set WD = appWord.Activedocument
                    ApplyPupils WD, ts1, ts2, tdata, att_add
                    AttSave WD, DialogAttendance.CB_month.Value
                    UpdateCounter 100, 100
                    DelTempSheet ts2
                    DelTempSheet ts1
                    DoCounter False
                    appWord.Visible = True
                    stay = True
                End If
                UpdatesOn
            Else
                ShowMsg (msg)
            End If
            If Not stay Then
                WordCloseFile WD
                WordClose
            End If
        End If
    Else
        ShowMsg ("לא ניתן לבצע!** **כל הצבות החוגים חייבים להתאים בדיוק לחוגים כפי שהם מופיעים בגליון החוגים** **תקן את הבעיה ונסה שוב")
    End If
End Sub
' >>> save the attendance doc with proper name
Private Sub AttSave(WD As Object, dt As String)
    Dim name As String, yr As String, mn As String
    yr = Trim(Left(dt, InStr(dt, "-") - 1))
    mn = Trim(Mid(dt, InStr(dt, "-") + 1))
    name = ActiveWorkbook.path + "\דפי נוכחות - " + mn + " " + yr
    WD.SaveAs (name)
End Sub
' >>> add the pupil list into the word file and apply
Private Sub ApplyPupils(WD As Object, tsc As Worksheet, tsp As Worksheet, tdata As Collection, add As Integer)
    Dim rng As Range, cl As Range
    Dim pg As Range, cnt As Range
    Dim tc As Integer, tf As Integer
    Dim ci As Long, cc As Long
    Dim p As Integer, c As Integer
    Set rng = tsc.Range("$A2:$Z999")
    Set pg = tsc.Range("$1:$1").Find("page", , xlValues, xlWhole).EntireColumn
    Set cnt = tsc.Range("$1:$1").Find("kids", , xlValues, xlWhole).EntireColumn
    cc = pg.SpecialCells(xlCellTypeConstants).count + 10
    ci = 10
    tc = tdata("tables")
    tf = tdata("table")
    For Each cl In rng.Rows
        If Trim(cl.Cells(1)) <> "" Then
            p = cl.Cells(pg.Column)
            c = cl.Cells(cnt.Column)
            If c > tdata("kid_count") Then FixClassPageSize WD, tdata, (tf + tc * (p - 1)), add
            If att_cell <> "[ריק]" Then FixClassPageVacation WD, tdata, (tf + tc * (p - 1)), DialogAttendance.Result
            ApplyClassPage WD, tsp, tdata, p, (tf + tc * (p - 1)), c
        Else
            Exit For
        End If
        UpdateCounter ci, cc
        ci = ci + 1
    Next
End Sub
' >>> add the pupils for a single class page
Private Sub ApplyClassPage(WD As Object, ts As Worksheet, tdata As Collection, pg As Integer, tb As Integer, cn As Integer)
    Dim xl As Integer, xf As Integer, xg As Integer
    Dim sns As Integer, act As String
    Dim rng As Range, cl As Range
    Dim rw As Integer
    sns = 0
    Set cl = ts.Range("A$1:$A$9999").Find(pg, , xlValues, xlWhole)
    If Not (cl Is Nothing) Then
        xl = GetCoord(tdata("kid_last"), "x")
        xf = GetCoord(tdata("kid_first"), "x")
        xg = GetCoord(tdata("kid_grade"), "x")
        rw = tdata("kid_line")
        Set rng = Range(cl, cl.Offset(cn - 1, 0)).EntireRow
        For Each cl In rng.Rows
            WordTableCell WD, tb, rw, xg, Trim(cl.Cells(3))
            WordTableCell WD, tb, rw, xl, Trim(cl.Cells(4))
            WordTableCell WD, tb, rw, xf, Trim(cl.Cells(5))
            If Trim(cl.Cells(6)) <> "" And Left(Trim(cl.Cells(6)), 1) <> "-" Then
                act = Trim(Range(GRN_def_attendance_sens).Value)
                If Left(Trim(cl.Cells(6)), 1) = "+" Then ' important
                    If act = CN_no Then
                        act = Trim(Range(GRN_def_attendance_sens_imp).Value)
                        If act = "" Then act = "כוכבית"
                    End If
                    sns = 2
                End If
                Select Case act
                    Case "כוכבית"
                        WordTableCell WD, tb, rw, xl, "* " + Trim(cl.Cells(4))
                    Case "הדגשה"
                        WordTableCellBold WD, tb, rw, xg
                        WordTableCellBold WD, tb, rw, xl
                        WordTableCellBold WD, tb, rw, xf
                    Case "רקע כהה"
                        WordTableCellFill WD, tb, rw, xg, 200
                        WordTableCellFill WD, tb, rw, xl, 200
                        WordTableCellFill WD, tb, rw, xf, 200
                    Case Else
                        ' do nothing
                End Select
                If sns = 0 Then sns = 1
            End If
            rw = rw + 1
        Next
        rng.Delete
    End If
    If sns = 0 Or (Trim(Range(GRN_def_attendance_sens_gen).Value) = CN_no And sns < 2) Then
        WordTableCell WD, tb, GetCoord(tdata("gen_sens"), "y"), GetCoord(tdata("gen_sens"), "x"), " "
    End If
End Sub
' >>> fix line count & height
Private Sub FixClassPageSize(WD As Object, tdata As Collection, tb As Integer, add As Integer)
    Dim h As Integer, i As Integer, c As Integer, r As Integer
    h = WordTableRowHeight(WD, tb, tdata("kid_line"), tdata("kid_line"))
    h = Int(h * tdata("kid_count") / (tdata("kid_count") + add))
    c = GetCoord(tdata("kid_no"), "x")
    Call WordTableRowHeight(WD, tb, tdata("kid_line"), tdata("kid_line") + tdata("kid_count") - 1, h)
    WordTableAddRows WD, tb, add
    For i = 0 To add
        r = tdata("kid_count") + i
        WordTableCell WD, tb, tdata("kid_line") + r - 1, c, r
    Next i
End Sub
' >>> fix class page vacations
Private Sub FixClassPageVacation(WD As Object, cl As Collection, tb As Integer, dt As String)
    Dim ar() As String, i As Integer, f As Integer, l As Integer
    ar = Split(dt, ",")
    f = cl("kid_line")
    l = WordGetTableLines(WD, tb)
    FixAttColData WD, tb, GetCoord(cl("col_1"), "x"), f, l, ar(0)
    FixAttColData WD, tb, GetCoord(cl("col_2"), "x"), f, l, ar(1)
    FixAttColData WD, tb, GetCoord(cl("col_3"), "x"), f, l, ar(2)
    FixAttColData WD, tb, GetCoord(cl("col_4"), "x"), f, l, ar(3)
    FixAttColData WD, tb, GetCoord(cl("col_5"), "x"), f, l, ar(4)
End Sub
' >>> replace column title cell fields with proper values
Private Sub FixAttColData(WD As Object, tb As Integer, col As Integer, fst As Integer, lns As Integer, val As String)
    Dim c As Boolean
    Dim i As Integer
    Dim d As String
    d = Trim(Mid(val, 2, InStr(val, "]=") - 2))
    c = IIf(Right(val, 1) = "1", True, False)
    If d <> "" And Not c Then
        For i = fst To lns
            WordTableCell WD, tb, i, col, att_cell
        Next i
    End If
End Sub
' >>> replace cell fields with proper values
Private Sub FixAttFields(WD As Object, cl As Collection, dates As String)
    Dim ar() As String
    ar = Split(dates, ",")
    SetWordTableCellDelChars WD, cl("gen_sens"), Len(TP_att_gen_sens) + 1
    SetWordTableCell WD, cl("kid_no"), "1"
    SetWordTableCell WD, cl("kid_last"), ""
    SetWordTableCell WD, cl("kid_first"), ""
    SetWordTableCell WD, cl("kid_grade"), ""
    FixAttColTitle WD, cl("col_1"), ar(0)
    FixAttColTitle WD, cl("col_2"), ar(1)
    FixAttColTitle WD, cl("col_3"), ar(2)
    FixAttColTitle WD, cl("col_4"), ar(3)
    FixAttColTitle WD, cl("col_5"), ar(4)
End Sub
' >>> replace column title cell fields with proper values
Private Sub FixAttColTitle(WD As Object, pos As String, val As String)
    Dim x As String, y As String
    Dim c As Boolean
    Dim d As String
    x = "[תאריך]"
    y = "[ריק]"
    d = Trim(Mid(val, 2, InStr(val, "]=") - 2))
    c = IIf(Right(val, 1) = "1", True, False)
    SetWordTableCell WD, pos, IIf(c, d, IIf(att_head = x Or d = "", d, IIf(att_head <> y, att_head, "")))
End Sub
' >>> transform [marks] into mail merge fields
Private Sub TransAttFields(WD As Object)
    WordPlantField WD, "[דף]", "page"
    WordPlantField WD, "[סקטור]", "section"
    WordPlantField WD, "[חלק]", "part"
    WordPlantField WD, "[ילדים]", "kids"
    WordPlantField WD, "[קבוצה]", "group"
    WordPlantField WD, "[מיון]", "order"
    WordPlantField WD, "[שם חוג]", "class"
    WordPlantField WD, "[כיתות]", "grade"
    WordPlantField WD, "[שם מלא]", "name"
    WordPlantField WD, "[תוספת]", "extra"
    WordPlantField WD, "[חדר]", "room"
    WordPlantField WD, "[שעות 1]", "hours"
    WordPlantField WD, "[שעות 2]", "time"
    WordPlantField WD, "[זמנים]", "span"
    WordPlantField WD, "[ספירה]", "count"
    WordPlantField WD, "[אורך]", "length"
End Sub
' >>> create the cpupil list for [Attendance] mail merge
Private Sub MakePupilList(ts As Worksheet)
    Dim cls As String, grd As String, lst As String, fst As String, sns As String
    Dim cl As Range, rng As Range
    Dim ind As Integer
    ts.Cells(1, 1) = "page" ' page to place this kid on
    ts.Cells(1, 2) = "class"
    ts.Cells(1, 3) = "grade"
    ts.Cells(1, 4) = "last"
    ts.Cells(1, 5) = "first"
    ts.Cells(1, 6) = "sensitivity"
    ind = 2
    Set rng = Range(GRN_ppl_all_data)
    For Each cl In rng.Rows
        grd = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_grd_data).Column))
        lst = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_name_last).Column))
        fst = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_name_first).Column))
        sns = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_sens).Column))
        cls = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_class_1).Column))
        MakePupilListItem ts, ind, cls, grd, lst, fst, sns
        cls = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_class_2).Column))
        MakePupilListItem ts, ind, cls, grd, lst, fst, sns
        cls = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_class_3).Column))
        MakePupilListItem ts, ind, cls, grd, lst, fst, sns
        cls = Trim(Range(GRN_ppl_all_data).Worksheet.Cells(cl.row, Range(GRN_ppl_class_4).Column))
        MakePupilListItem ts, ind, cls, grd, lst, fst, sns
    Next
End Sub
' >>> create the pupil row item
Private Sub MakePupilListItem(ts As Worksheet, ind As Integer, cls As String, grd As String, lst As String, fst As String, sns As String)
    Dim pg As Integer
    If cls <> "" Then
        ts.Cells(ind, 1) = ""
        ts.Cells(ind, 2) = cls
        ts.Cells(ind, 3) = grd
        ts.Cells(ind, 4) = lst
        ts.Cells(ind, 5) = fst
        ts.Cells(ind, 6) = sns
        ind = ind + 1
    End If
End Sub
' >>> link the proper class page number to each pupil
Private Sub LinkClassPage(tsc As Worksheet, tsp As Worksheet)
    Dim pg As Range, cls As Range, kds As Range
    Dim r As Integer, k As Integer, c As String
    Dim rng As Range, cl As Range
    Dim fnd As Range
    Set pg = tsc.Range("$1:$1").Find("page", , xlValues, xlWhole).EntireColumn
    Set cls = tsc.Range("$1:$1").Find("name", , xlValues, xlWhole).EntireColumn
    Set kds = tsc.Range("$1:$1").Find("util", , xlValues, xlWhole).EntireColumn
    Set rng = tsp.Range("$A$2:$Z$9999")
    For Each cl In rng.Rows
        c = Trim(cl.Cells(2))
        If c <> "" Then
            Set fnd = cls.Find(c, , xlValues, xlWhole)
            If Not (fnd Is Nothing) Then
                r = fnd.row
                k = kds.Cells(r, 1)
                If k > 0 Then
                    cl.Cells(1) = pg.Cells(r, 1)
                    kds.Cells(r, 1) = k - 1
                Else
                    cl.Cells(1) = pg.Cells(r + 1, 1)
                End If
            Else
                cl.Cells(1) = -1
            End If
        Else
            Exit For
        End If
    Next
End Sub
' >>> sort temp pupil list by page number + grade + last & first names
Private Sub SortPupilList(ts As Worksheet)
    ts.Range("$A$2:$F$9999").sort key1:=Range("$D$2"), order1:=xlAscending, key2:=Range("$E$2"), order2:=xlAscending
    ts.Range("$A$2:$F$9999").sort key1:=Range("$A$2"), order1:=xlAscending, key2:=Range("$C$2"), order2:=xlAscending
End Sub
' >>> create the class list for [Attendance] mail merge
Private Sub MakeClassList(ts As Worksheet, max As Integer)
    Dim cl As Range, rng As Range
    Dim ind As Integer
    ts.Cells(1, 1) = "page" ' page number
    ts.Cells(1, 2) = "section" ' formatted as "x/n"
    ts.Cells(1, 3) = "part" ' empty for 1 only or "part #" for 2 parts
    ts.Cells(1, 4) = "kids" ' number of kids for page
    ts.Cells(1, 5) = "group"
    ts.Cells(1, 6) = "order"
    ts.Cells(1, 7) = "class"
    ts.Cells(1, 8) = "grade"
    ts.Cells(1, 9) = "name"
    ts.Cells(1, 10) = "extra"
    ts.Cells(1, 11) = "room"
    ts.Cells(1, 12) = "hours"
    ts.Cells(1, 13) = "time"
    ts.Cells(1, 14) = "span"
    ts.Cells(1, 15) = "count"
    ts.Cells(1, 16) = "length"
    ts.Cells(1, 17) = "util"
    ind = 2
    Set rng = Range(GRN_cls_all_data)
    For Each cl In rng.Rows
        MakeClassListSub ts, ind, cl.row, "1", max, "2"
        MakeClassListSub ts, ind, cl.row, "2", max
        MakeClassListSub ts, ind, cl.row, "3", max, "4"
        MakeClassListSub ts, ind, cl.row, "4", max
        If ind > 6 And Trim(Range(GRN_def_testing).Value) = CN_yes Then Exit For
    Next
End Sub
' >>> create the class row for a class column
Private Sub MakeClassListSub(ts As Worksheet, ind As Integer, row As Integer, col As String, max As Integer, Optional col_ext As String = "")
    Dim pg As String, pr As String, kd As String
    Dim grp As String, ord As String, cls As String
    Dim grd As String, nam As String, ext As String
    Dim rom As String, hrs As String, tim As String
    Dim spn As String, cnt As String, lng As String
    Dim cnt_ext As Integer
    Dim rng As Range
    pg = CStr(ind - 1)
    Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_all_classes).Column)
    cls = Trim(rng.Value)
    If cls <> "" Then
        Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_grade + col).Column)
        grd = Trim(rng.Value)
        If grd <> "" Then
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_group).Column)
            grp = Trim(rng.Value)
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_order).Column)
            ord = Trim(rng.Value)
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_full + col).Column)
            nam = Trim(rng.Value)
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_extra + col).Column)
            ext = Trim(rng.Value)
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_room + col).Column)
            rom = Trim(rng.Value)
            If rom = "" Then
                Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_room).Column)
                rom = Trim(rng.Value)
            End If
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_length + col).Column)
            lng = Trim(rng.Value)
            Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_count + col).Column)
            cnt = Zero(Trim(rng.Value))
            If lng = "2" And col_ext <> "" Then
                Set rng = Range(GRN_cls_all_data).Worksheet.Cells(row, Range(GRN_cls_gen_count + col_ext).Column)
                cnt_ext = Zero(Trim(rng.Value))
                If cnt_ext > cnt Then cnt = cnt_ext
            End If
            hrs = col
            If lng = 2 Then hrs = hrs + IIf(hrs = "1", "2", IIf(hrs = "3", "4", ""))
            tim = ""
            spn = ""
            Select Case hrs
                Case "1"
                    tim = "שעה ראשונה"
                    spn = TransHourToSpan("1")
                Case "2"
                    tim = "שעה שנייה"
                    spn = TransHourToSpan("2")
                Case "3"
                    tim = "שעה שלישית"
                    spn = TransHourToSpan("3")
                Case "4"
                    tim = "שעה רביעית"
                    spn = TransHourToSpan("4")
                Case "12"
                    tim = "שעה ראשונה + שנייה"
                    spn = TransHourToSpan("12")
                Case "34"
                    tim = "שעה שלישית + רביעית"
                    spn = TransHourToSpan("34")
            End Select
            pr = "1/1"
            kd = cnt
            If cnt > max Then
                pr = "1/2"
                If att_many <= 1 Then
                    kd = Int(cnt * att_many)
                Else
                    kd = att_many
                End If
                If kd > max Then kd = max
            End If
            MakeClassListItem ts, ind, pg, pr, kd, grp, ord, cls, grd, nam, ext, rom, hrs, tim, spn, cnt, lng
            If cnt > max Then
                pg = CStr(ind - 1)
                pr = "2/2"
                kd = cnt - kd
                MakeClassListItem ts, ind, pg, pr, kd, grp, ord, cls, grd, nam, ext, rom, hrs, tim, spn, cnt, lng
            End If
        End If
    End If
End Sub
' >>> create a class row item
Private Sub MakeClassListItem(ts As Worksheet, ind As Integer, page As String, part As String, kids As String, group As String, order As String, Class As String, grade As String, name As String, extra As String, room As String, hours As String, Time As String, span As String, count As String, length As String)
    ts.Cells(ind, 1) = page
    ts.Cells(ind, 2) = "'" + part
    ts.Cells(ind, 3) = IIf(part = "1/1", "", IIf(part = "1/2", "חלק א'", "חלק ב'"))
    ts.Cells(ind, 4) = kids
    ts.Cells(ind, 5) = group
    ts.Cells(ind, 6) = order
    ts.Cells(ind, 7) = Class
    ts.Cells(ind, 8) = grade
    ts.Cells(ind, 9) = name
    ts.Cells(ind, 10) = extra
    ts.Cells(ind, 11) = room
    ts.Cells(ind, 12) = hours
    ts.Cells(ind, 13) = Time
    ts.Cells(ind, 14) = span
    ts.Cells(ind, 15) = count
    ts.Cells(ind, 16) = length
    ts.Cells(ind, 17) = kids
    ind = ind + 1
End Sub
' >>> set the defs values for attendance
Private Sub SetAttDefs()
    def_folder = Trim(Range(GRN_def_img_dir).Value)
    att_file = Trim(Range(GRN_def_attendance_file).Value)
    att_head = Trim(Range(GRN_def_attendance_head).Value)
    att_cell = Trim(Range(GRN_def_attendance_cell).Value)
    att_add = CInt(Range(GRN_def_attendance_add).Value)
    att_many = CDbl(Range(GRN_def_attendance_many).Value)
End Sub
' >>> get the template fields data
Private Function FetchTemplateData(WD As Object) As Collection
    Dim cl As Collection
    Dim c As Integer
    Dim t As Integer
    Dim l As Integer
    Dim f As Integer
    Dim x As String
    Set cl = New Collection
    c = WordGetTableCount(WD)
    cl.add c, "tables"
    If c > 0 Then
        x = WordGetTableCoord(WD, TP_att_col_1)
        cl.add x, "col_1"
        If x <> "" Then
            t = GetCoord(x, "t")
            cl.add t, "table"
            l = WordGetTableLines(WD, t)
            cl.add l, "lines"
            x = WordGetTableCoord(WD, TP_att_col_2)
            cl.add x, "col_2"
            x = WordGetTableCoord(WD, TP_att_col_3)
            cl.add x, "col_3"
            x = WordGetTableCoord(WD, TP_att_col_4)
            cl.add x, "col_4"
            x = WordGetTableCoord(WD, TP_att_col_5)
            cl.add x, "col_5"
            x = WordGetTableCoord(WD, TP_att_gen_sens)
            cl.add x, "gen_sens"
            x = WordGetTableCoord(WD, TP_att_kid_no)
            cl.add x, "kid_no"
            f = GetCoord(x, "y")
            cl.add f, "kid_line"
            c = l - f + 1
            cl.add c, "kid_count"
            x = WordGetTableCoord(WD, TP_att_kid_last)
            cl.add x, "kid_last"
            x = WordGetTableCoord(WD, TP_att_kid_first)
            cl.add x, "kid_first"
            x = WordGetTableCoord(WD, TP_att_kid_grade)
            cl.add x, "kid_grade"
            c = WordTableRowHeight(WD, t, f, l)
            cl.add c, "height"
        Else
            cl.add 0, "table"
        End If
    End If
    Set FetchTemplateData = cl
End Function
' >>> checks if all pupils class assignments are valid classes that are in the class table
Private Function AreAllValidClasses()
    Dim cls() As String, ass() As String
    Dim rng As Range, rn2 As Range
    Dim i As Integer, j As Integer
    Dim nop As String
    Dim okk As Boolean
    AreAllValidClasses = True
    nop = Trim(Range(GRN_def_no_participation).Value)
    Set rn2 = Union(Range(GRN_cls_full_name_1).EntireColumn, Range(GRN_cls_full_name_2).EntireColumn, Range(GRN_cls_full_name_3).EntireColumn, Range(GRN_cls_full_name_4).EntireColumn)
    Set rng = Intersect(Range(GRN_cls_all_data), rn2)
    cls = MakeUniqueArray(rng)
    Set rn2 = Union(Range(GRN_ppl_class_1).EntireColumn, Range(GRN_ppl_class_2).EntireColumn, Range(GRN_ppl_class_3).EntireColumn, Range(GRN_ppl_class_4).EntireColumn)
    Set rng = Intersect(Range(GRN_ppl_all_data), rn2)
    ass = MakeUniqueArray(rng)
    If IsStringArrayEmpty(ass) Then
        AreAllValidClasses = False
        Exit Function
    End If
    For i = LBound(ass) To UBound(ass)
        If ass(i) <> nop Then
            okk = False
            For j = LBound(cls) To UBound(cls)
                If ass(i) = cls(j) Then
                    okk = True
                    Exit For
                End If
            Next j
            If Not okk Then
                AreAllValidClasses = False
                Exit Function
            End If
        End If
    Next i
End Function
' >>> validate an [Attendance] template
Private Function ValidateAttendanceTemplate(cl As Collection) As String
    Dim msg As String
    msg = ""
    If cl("table") > 0 Then
        If cl("lines") > 20 Then
            If cl("col_1") <> "" Then
                If cl("col_2") <> "" Then
                    If cl("col_3") <> "" Then
                        If cl("col_4") <> "" Then
                            If cl("col_5") <> "" Then
                                If cl("kid_no") <> "" Then
                                    If cl("kid_last") <> "" Then
                                        If cl("kid_first") <> "" Then
                                            If cl("kid_grade") = "" Then
                                                msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [כיתה] לנתון כיתה !"
                                            End If
                                        Else
                                            msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [פרטי] לנתון שם פרטי !"
                                        End If
                                    Else
                                        msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [משפחה] לנתון שם משפחה !"
                                    End If
                                Else
                                    msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [#] לנתון מספר שורה !"
                                End If
                            Else
                                msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [5] לעמודת תאריך מס 5 !"
                            End If
                        Else
                            msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [4] לעמודת תאריך מס 4 !"
                        End If
                    Else
                        msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [3] לעמודת תאריך מס 3 !"
                    End If
                Else
                    msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [2] לעמודת תאריך מס 2 !"
                End If
            Else
                msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [1] לעמודת תאריך מס 1 !"
            End If
        Else
            msg = "הטבלה בקובץ התבנית חייבת להכיל לפחות 20 שורות !"
        End If
    Else
        msg = "קובץ התבנית חייב להכיל טבלה לשמות התלמידים + סמנים לשיוך נתונים !"
    End If
    If msg <> "" Then msg = msg + "** **" + "אנא בחר קובץ תקין"
    ValidateAttendanceTemplate = msg
End Function
' >>> ----------- <<<
' >>> ASSIGNMENTS <<<
' >>> ----------- <<<
' >>> create the [Assignments] forms
Public Sub MakeAssignmentsForms()
    Dim WD As Object
    Dim tdata As Collection
    Dim ts As Worksheet
    Dim stay As Boolean
    Dim file As String
    Dim msg As String
    If AreAllValidClasses() Then
        SetAssDefs
        stay = False
        file = WordPickFile(ass_file, "בחר תבנית וורד לבניית דפי שיבוץ")
        If file <> "" Then
            Set WD = WordOpenFile(file, "r")
            Set tdata = FetchAssTemplateData(WD)
            msg = ValidateAssignmentsTemplate(tdata)
            If msg = "" Then
                UpdatesOff
                Set ts = MakeTempSheet("temp_sheet_3")
                DoCounter True
                UpdateCounter 0, 100
                MakeAssignmentsList ts
                UpdateCounter 2, 100
                SortAssignmentsList ts
                UpdateCounter 4, 100
                TransAssFields WD
                UpdateCounter 5, 100
                WordMailMerge WD, "temp_sheet_3"
                WordCloseFile WD
                UpdateCounter 6, 100
                Set WD = appWord.Activedocument
                If ass_merge Then ApplyAssignmentsMerge WD, tdata
                AssSave WD
                UpdateCounter 100, 100
                DelTempSheet ts
                DoCounter False
                appWord.Visible = True
                stay = True
                UpdatesOn
            Else
                ShowMsg (msg)
            End If
            If Not stay Then
                WordCloseFile WD
                WordClose
            End If
        End If
    Else
        ShowMsg ("לא ניתן לבצע!** **כל הצבות החוגים חייבים להתאים בדיוק לחוגים כפי שהם מופיעים בגליון החוגים** **תקן את הבעיה ונסה שוב")
    End If
End Sub
' >>> merge assignment rows that belong to double classes
Private Sub ApplyAssignmentsMerge(WD As Object, td As Collection)
    Dim ttc As Integer, ptc As Integer
    Dim tc As Integer, ti As Integer
    Dim i As Integer
    ttc = WordGetTableCount(WD)
    tc = td("tables")
    ti = td("table")
    ptc = ttc / tc
    For i = 1 To ptc
        ApplyTableMerge WD, ti + (i - 1) * tc, td("time"), td("class"), td("room")
        UpdateCounter (i + 30), (ptc + 30)
    Next i
End Sub
' >>> merge the rows of a specific table
Private Sub ApplyTableMerge(WD As Object, tb As Integer, tim As String, cls As String, room As String)
    Dim ln As Integer, ct As Integer, cc As Integer, cr As Integer
    Dim tm As String, cl As String, rm As String
    Dim tm2 As String, cl2 As String
    Dim rw As Integer, nt As String
    ln = GetCoord(tim, "y")
    ct = GetCoord(tim, "x")
    cc = GetCoord(cls, "x")
    cr = GetCoord(room, "x")
    For rw = 0 To 2 Step 2
        tm = WordTableCell(WD, tb, ln + rw, ct)
        cl = WordTableCell(WD, tb, ln + rw, cc)
        rm = WordTableCell(WD, tb, ln + rw, cr)
        tm2 = WordTableCell(WD, tb, ln + rw + 1, ct)
        cl2 = WordTableCell(WD, tb, ln + rw + 1, cc)
        If cl = cl2 Then
            nt = Trim(Left(tm, InStr(tm, "-") - 1)) + "-" + Trim(Mid(tm2, InStr(tm2, "-") + 1))
            WordCellsMerge WD, tb, ln + rw, ct, ln + rw + 1, ct
            WordCellsMerge WD, tb, ln + rw, cc, ln + rw + 1, cc
            WordCellsMerge WD, tb, ln + rw, cr, ln + rw + 1, cr
            Call WordTableCell(WD, tb, ln + rw, ct, nt)
            Call WordTableCell(WD, tb, ln + rw, cc, cl)
            Call WordTableCell(WD, tb, ln + rw, cr, rm)
        End If
    Next rw
End Sub
' >>> transform [marks] into mail merge fields
Private Sub TransAssFields(WD As Object)
    WordPlantField WD, "[שם פרטי]", "last"
    WordPlantField WD, "[שם משפחה]", "first"
    WordPlantField WD, "[כיתה]", "grade"
    WordPlantField WD, "[שעות 1]", "time_1"
    WordPlantField WD, "[חוג 1]", "class_1"
    WordPlantField WD, "[חדר 1]", "room_1"
    WordPlantField WD, "[שעות 2]", "time_2"
    WordPlantField WD, "[חוג 2]", "class_2"
    WordPlantField WD, "[חדר 2]", "room_2"
    WordPlantField WD, "[שעות 3]", "time_3"
    WordPlantField WD, "[חוג 3]", "class_3"
    WordPlantField WD, "[חדר 3]", "room_3"
    WordPlantField WD, "[שעות 4]", "time_4"
    WordPlantField WD, "[חוג 4]", "class_4"
    WordPlantField WD, "[חדר 4]", "room_4"
End Sub
' >>> save the assignments doc with proper name
Private Sub AssSave(WD As Object)
    Dim name As String, yr As String
    yr = CStr(year(Now()))
    name = ActiveWorkbook.path + "\דפי שיבוץ - " + yr
    WD.SaveAs (name)
End Sub
' >>> create the list for [Assignments] mail merge
Private Sub MakeAssignmentsList(ts As Worksheet)
    Dim cl1 As String, cl2 As String, cl3 As String, cl4 As String
    Dim nml As String, nmf As String, grd As String
    Dim cl As Range, rng As Range, tmp As Range
    Dim ind As Integer
    ts.Cells(1, 1) = "last" ' kid's family name
    ts.Cells(1, 2) = "first" ' kid's first name
    ts.Cells(1, 3) = "grade" ' kid's grade
    ts.Cells(1, 4) = "time_1" ' kid's first hour times
    ts.Cells(1, 5) = "class_1" ' kid's first hour class
    ts.Cells(1, 6) = "room_1" ' kid's first hour room
    ts.Cells(1, 7) = "time_2" '
    ts.Cells(1, 8) = "class_2"
    ts.Cells(1, 9) = "room_2"
    ts.Cells(1, 10) = "time_3" '
    ts.Cells(1, 11) = "class_3"
    ts.Cells(1, 12) = "room_3"
    ts.Cells(1, 13) = "time_4" '
    ts.Cells(1, 14) = "class_4"
    ts.Cells(1, 15) = "room_4"
    ind = 2
    Set rng = Range(GRN_ppl_all_data)
    For Each cl In rng.Rows
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_name_last).EntireColumn)
        nml = Trim(tmp.Value)
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_name_first).EntireColumn)
        nmf = Trim(tmp.Value)
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_grd_data).EntireColumn)
        grd = Trim(tmp.Value)
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_class_1).EntireColumn)
        cl1 = Trim(tmp.Value)
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_class_2).EntireColumn)
        cl2 = Trim(tmp.Value)
        If cl2 = "" And InStr(cl1, "12") > 0 Then cl2 = cl1
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_class_3).EntireColumn)
        cl3 = Trim(tmp.Value)
        Set tmp = Intersect(cl.EntireRow, Range(GRN_ppl_class_4).EntireColumn)
        cl4 = Trim(tmp.Value)
        If cl4 = "" And InStr(cl3, "34") > 0 Then cl4 = cl3
        If Trim(cl1 + cl2 + cl3 + cl4) <> "" Then
            ts.Cells(ind, 1) = nml
            ts.Cells(ind, 2) = nmf
            ts.Cells(ind, 3) = grd
            MakeAssListClass ts, ind, 4, cl1, "1"
            MakeAssListClass ts, ind, 7, cl2, "2", IIf(cl1 = cl2, "1", "")
            MakeAssListClass ts, ind, 10, cl3, "3"
            MakeAssListClass ts, ind, 13, cl4, "4", IIf(cl3 = cl4, "3", "")
            ind = ind + 1
        End If
        If ind > 6 And Trim(Range(GRN_def_testing).Value) = CN_yes Then Exit For
    Next
End Sub
' >>> create the list item for [Assignments] mail merge
Private Sub MakeAssListClass(ts As Worksheet, row As Integer, col As Integer, cls As String, hr As String, Optional hrd As String = "")
    Dim rng As Range, cl As Range
    Dim room As String
    Set rng = Range(GRN_cls_gen_full + IIf(hrd <> "", hrd, hr)).EntireColumn
    ts.Cells(row, col) = TransHourToSpan(hr)
    If cls <> "" Then
        If cls <> no_part Then
            Set cl = rng.Find(cls, , xlFormulas, xlWhole)
            If Not (cl Is Nothing) Then
                ts.Cells(row, col + 1) = TrimStr(cls, 2)
                room = Trim(Range(GRN_cls_gen_room + hr).EntireColumn.Cells(cl.row, 1))
                If room = "" Then room = Trim(Range(GRN_cls_room).EntireColumn.Cells(cl.row, 1))
                ts.Cells(row, col + 2) = room
            End If
        Else
            ts.Cells(row, col + 1) = no_part
        End If
    End If
End Sub
' >>> sort temp assignments list by desired order
Private Sub SortAssignmentsList(ts As Worksheet)
    Select Case ass_sort
        Case "כיתה + משפחה + פרטי"
            ts.Range("$A$2:$Z$9999").sort key1:=Range("$C$2"), order1:=xlAscending, key2:=Range("$A$2"), order2:=xlAscending, key3:=Range("$B$2"), order3:=xlAscending
        Case "כיתה + פרטי + משפחה"
            ts.Range("$A$2:$Z$9999").sort key1:=Range("$C$2"), order1:=xlAscending, key2:=Range("$B$2"), order2:=xlAscending, key3:=Range("$A$2"), order3:=xlAscending
        Case "משפחה + פרטי + כיתה"
            ts.Range("$A$2:$Z$9999").sort key1:=Range("$A$2"), order1:=xlAscending, key2:=Range("$B$2"), order2:=xlAscending, key3:=Range("$C$2"), order3:=xlAscending
        Case "פרטי + משפחה + כיתה"
            ts.Range("$A$2:$Z$9999").sort key1:=Range("$B$2"), order1:=xlAscending, key2:=Range("$A$2"), order2:=xlAscending, key3:=Range("$C$2"), order3:=xlAscending
    End Select
End Sub
Private Function TransHourToSpan(hrs As String) As String
    Dim spn As String
    spn = ""
    Select Case hrs
        Case "1"
            spn = "08:30-09:15"
        Case "2"
            spn = "09:20-10:05"
        Case "3"
            spn = "10:35-11:20"
        Case "4"
            spn = "11:25-12:10"
        Case "12"
            spn = "08:30-10:05"
        Case "34"
            spn = "10:35-12:10"
    End Select
    TransHourToSpan = spn
End Function
' >>> get the template fields data
Private Function FetchAssTemplateData(WD As Object) As Collection
    Dim cl As Collection
    Dim c As Integer
    Dim t As Integer
    Dim l As Integer
    Dim x As String
    Set cl = New Collection
    c = WordGetTableCount(WD)
    cl.add c, "tables"
    If c > 0 Then
        x = WordGetTableCoord(WD, TP_ass_class)
        cl.add x, "class"
        If x <> "" Then
            t = GetCoord(x, "t")
            cl.add t, "table"
            l = WordGetTableLines(WD, t)
            cl.add l, "lines"
            x = WordGetTableCoord(WD, TP_ass_room)
            cl.add x, "room"
            x = WordGetTableCoord(WD, TP_ass_time)
            cl.add x, "time"
            x = WordGetTableCoord(WD, TP_ass_kid_first)
            cl.add x, "kid_first"
            x = WordGetTableCoord(WD, TP_ass_kid_last)
            cl.add x, "kid_last"
            x = WordGetTableCoord(WD, TP_ass_kid_grade)
            cl.add x, "kid_grade"
        Else
            cl.add 0, "table"
        End If
    End If
    Set FetchAssTemplateData = cl
End Function
' >>> validate an [Assendance] template
Private Function ValidateAssignmentsTemplate(cl As Collection) As String
    Dim msg As String
    msg = ""
    If cl("table") > 0 Then
        If cl("lines") >= 5 Then
            If cl("class") <> "" Then
                If cl("room") <> "" Then
                    If cl("time") <> "" Then
                        If cl("kid_first") <> "" Then
                            If cl("kid_last") <> "" Then
                                If cl("kid_grade") = "" Then
                                    msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [כיתה] לזיהוי התלמיד בדף"
                                End If
                            Else
                                msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [שם משפחה] לזיהוי התלמיד בדף"
                            End If
                        Else
                            msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [שם פרטי] לזיהוי התלמיד בדף"
                        End If
                    Else
                        msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [שעות 1] לעמודת זמני החוג"
                    End If
                Else
                    msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [חדר 1] לעמודת מיקום החוג"
                End If
            Else
                msg = "הטבלה בקובץ התבנית, חייבת להכיל סמן [חוג 1] לעמודת שם החוג"
            End If
        Else
            msg = "הטבלה בקובץ התבנית חייבת להכיל לפחות 5 שורות !"
        End If
    Else
        msg = "קובץ התבנית חייב להכיל טבלה להצבות החוגים לתלמידים + סמנים לשיוך נתונים !"
    End If
    If msg <> "" Then msg = msg + "** **" + "אנא בחר קובץ תקין"
    ValidateAssignmentsTemplate = msg
End Function
' >>> set the defs values for assignment
Private Sub SetAssDefs()
    def_folder = Trim(Range(GRN_def_img_dir).Value)
    ass_file = Trim(Range(GRN_def_assignment_file).Value)
    ass_sort = Trim(Range(GRN_def_assignment_sort).Value)
    ass_merge = (Trim(Range(GRN_def_assignment_merge).Value) = CN_yes)
    no_part = Trim(Range(GRN_def_no_participation).Value)
End Sub
' >>> ------- <<<
' >>> GENERAL <<<
' >>> ------- <<<
' >>> show a message (replacing "**" with line breaks)
Private Sub ShowMsg(msg As String, Optional brk As String = "**")
    Dim tx As String
    tx = Replace(msg, brk, vbCr)
    AskReset
    Call AskDialog(tx, "o")
End Sub
' >>> create a temporary sheet
Public Function MakeTempSheet(sht As String) As Worksheet
    Dim ts As Worksheet
    If IsWorksheetExists(sht) Then
        Set ts = Worksheets(sht)
        ts.Cells.ClearContents
    Else
        Set ts = ThisWorkbook.Worksheets.add
        ts.name = sht
    End If
    ts.Visible = xlSheetVisible
    Set MakeTempSheet = ts
End Function
' >>> delete temp sheet
Public Sub DelTempSheet(ts As Worksheet)
    Application.DisplayAlerts = False
    ts.Delete
    Application.DisplayAlerts = True
End Sub
' >>> checks if a worksheet exists
Private Function IsWorksheetExists(sht As String) As Boolean
    IsWorksheetExists = Evaluate("ISREF('" & sht & "'!A1)")
End Function
' >>> start/stop verbose counter
Private Sub DoCounter(x As Boolean)
    ControlPupils.PupilsCheckAll.Visible = Not x
    ControlPupils.LabelProgress.Visible = x
End Sub
' >>> update counter
Private Sub UpdateCounter(i As Long, c As Long)
    ControlPupils.LabelProgress.Caption = CStr(Int(100 * i / c)) + "%"
    ControlPupils.Repaint
    Application.StatusBar = "Progress: " + ControlPupils.LabelProgress.Caption
    DoEvents
End Sub
' >>> -------------- <<<
' >>> WORD FUNCTIONS <<<
' >>> -------------- <<<
' >>> pick a word file
'       file = file name with no path or extension
'       text = title for dialog
Public Function WordPickFile(file As String, Text As String) As String
    Dim f As String
    f = ActiveWorkbook.path + "\" + file + IIf(InStr(file, ".") > 0, "", ".docx")
    If Not FileExists(f) Then
        f = def_folder + "\" + file + IIf(InStr(file, ".") > 0, "", ".docx")
    End If
    If Not FileExists(f) Then
        f = ""
        With Application.FileDialog(msoFileDialogFilePicker)
            .AllowMultiSelect = False
            .InitialFileName = ActiveWorkbook.path + "\*.docx"
            .Title = Text
            .Show
            If .SelectedItems.count > 0 Then f = .SelectedItems(1)
        End With
    End If
    WordPickFile = f
End Function
' >>> open a word file
Private Function WordOpenFile(file As String, Optional opt As String = "") As Object
    Dim vsb As Boolean, rdo As Boolean
    Dim WD As Object
    Set appWord = Nothing
    Set WordOpenFile = Nothing
    If FileExists(file) Then
        vsb = IIf(InStr(opt, "v") > 0, True, False)
        rdo = IIf(InStr(opt, "r") > 0, True, False)
        On Error Resume Next
        Set appWord = CreateObject("Word.Application")
'        If appWord Is Nothing Then Set appWord = CreateObject(, "Word.Application")
        On Error GoTo 0
        Set WD = appWord.Documents.Open(file, , rdo)
        appWord.Visible = vsb
        Set WordOpenFile = WD
    End If
End Function
' >>> save the main word file
Private Sub WordSaveFile(doc As Object, name As String)
    doc.SaveAs (ActiveWorkbook.path + "\" + name)
End Sub
' >>> close a word file
Private Sub WordCloseFile(doc As Object)
    doc.Close 0
    Set doc = Nothing
End Sub
' >>> close word
Private Sub WordClose()
    appWord.Quit 0
    Set appWord = Nothing
End Sub
' >>> checks if a file exists
Function FileExists(file As String) As Boolean
    FileExists = VBA.Len(VBA.dir(file)) > 0
End Function
' >>> find text in a word doc and returns found range
Private Function WordFind(ByVal doc As Object, txt As String) As Object
    Dim rng As Object
    Set rng = doc.Range
    rng.Find.ClearFormatting
    If rng.Find.Execute(txt) Then
        rng.Select
    Else
        Set rng = Nothing
    End If
    Set WordFind = rng
End Function
' >>> replace text in a word's range with another text
Private Sub WordReplaceText(rng As Object, txt As String)
    rng.Text = txt
End Sub
' >>> insert a field into a word's range
Private Sub WordInsertField(ByVal doc As Object, rng As Object, fld As String)
    doc.MailMerge.Fields.add Range:=rng, name:=fld
End Sub
' >>> insert a field into a word's range
Private Sub WordPlantField(ByVal doc As Object, txt As String, fld As String)
    Dim rng As Object
    Do While True
        Set rng = WordFind(doc, txt)
        If Not (rng Is Nothing) Then
            WordReplaceText rng, ""
            WordInsertField doc, rng, fld
        Else
            Exit Do
        End If
    Loop
End Sub
' >>> do a mail merge
Private Sub WordMailMerge(ByVal doc As Object, sht As String)
    With doc
        .MailMerge.OpenDataSource name:=ActiveWorkbook.path + "\" + ThisWorkbook.name, sqlstatement:="SELECT * FROM `" + sht + "$`"
        .MailMerge.Execute
    End With
End Sub
' >>> get tables count
Private Function WordGetTableCount(ByVal doc As Object) As Integer
    WordGetTableCount = doc.tables.count
End Function
' >>> get table's line count
Private Function WordGetTableLines(ByVal doc As Object, t As Integer) As Integer
    WordGetTableLines = doc.tables(t).Rows.count
End Function
' >>> get table's coordinates with text in cell as "t,y,x"
Private Function WordGetTableCoord(ByVal doc As Object, txt As String) As String
    Dim t As Integer, y As Integer, x As Integer
    Dim rng As Object
    WordGetTableCoord = ""
    Set rng = WordFind(doc, txt)
    If Not (rng Is Nothing) Then
        t = doc.Range(0, rng.End).tables.count
        y = rng.Cells(1).RowIndex
        x = rng.Cells(1).ColumnIndex
        WordGetTableCoord = CStr(t) + "," + CStr(y) + "," + CStr(x)
    End If
End Function
' >>> get/set the height of a word's table's rows
Private Function WordTableRowHeight(ByVal doc As Object, t As Integer, l1 As Integer, l2 As Integer, Optional h As Integer = Empty)
    Dim i As Integer, r As Integer
    r = 0
    For i = l1 To l2
        If h = Empty Then
            r = r + doc.tables(t).Rows(i).Height
        Else
            doc.tables(t).Rows(i).Height = h
            r = r + h
        End If
    Next i
    WordTableRowHeight = r
End Function
' >>> set a word's table cell background fill
Private Function WordTableCellFill(ByVal doc As Object, t As Integer, y As Integer, x As Integer, f As Integer)
    doc.tables(t).cell(y, x).Shading.Texture = f
End Function
' >>> set a word's table cell text to bold
Private Function WordTableCellBold(ByVal doc As Object, t As Integer, y As Integer, x As Integer)
    doc.tables(t).cell(y, x).Range.Font.BoldBi = True
End Function
' >>> set the font size for a table cell
Private Sub SetWordTableCellFontSize(ByVal doc As Object, t As Integer, y As Integer, x As Integer, s As Integer)
    doc.tables(t).cell(y, x).Range.Font.SizeBi = s
End Sub
' >>> get/set a word's table cell value
Private Function WordTableCell(ByVal doc As Object, t As Integer, y As Integer, x As Integer, Optional v As Variant = Empty)
    If v = Empty Then
        WordTableCell = doc.tables(t).cell(y, x)
        WordTableCell = Left(WordTableCell, Len(WordTableCell) - 2)
    Else
        doc.tables(t).cell(y, x).Range.Text = CStr(v)
    End If
End Function
' >>> delete # characters from start of a table cell
Private Sub SetWordTableCellDelChars(ByVal doc As Object, p As String, d As Integer)
    Dim t As Integer, y As Integer, x As Integer
    t = GetCoord(p, "t")
    y = GetCoord(p, "y")
    x = GetCoord(p, "x")
    doc.tables(t).cell(y, x).Range.Characters(1).Delete 1, d
End Sub
' >>> get a word's table cell value
'Private Function GetWordTableCell(ByVal doc As Object, p As String)
'    Dim t As Integer, y As Integer, x As Integer
'    t = GetCoord(p, "t")
'    y = GetCoord(p, "y")
'    x = GetCoord(p, "x")
'    GetWordTableCell = doc.tables(t).cell(y, x).Range.text
'End Function
' >>> set a word's table cell value
Private Sub SetWordTableCell(ByVal doc As Object, p As String, v As String)
    Dim t As Integer, y As Integer, x As Integer
    t = GetCoord(p, "t")
    y = GetCoord(p, "y")
    x = GetCoord(p, "x")
    doc.tables(t).cell(y, x).Range.Text = v
End Sub
' >>> add rows to a word table
Private Sub WordTableAddRows(ByVal doc As Object, t As Integer, ByVal l As Integer)
    Dim c As Integer
    c = WordGetTableLines(doc, t)
    While l > 0
        doc.tables(t).Rows.add (doc.tables(t).Rows(c))
        l = l - 1
    Wend
End Sub
' >>> merge cells of a word's table
Private Sub WordCellsMerge(ByVal doc As Object, tb As Integer, y1 As Integer, x1 As Integer, y2 As Integer, x2 As Integer)
    doc.tables(tb).cell(y1, x1).Merge doc.tables(tb).cell(y2, x2)
End Sub
' >>> get requested coordinate from a word's table coord
Private Function GetCoord(x As String, f As String) As Integer
    Dim ar() As String
    GetCoord = 0
    ar = Split(x, ",")
    Select Case f
        Case "t"
            GetCoord = Int(ar(0))
        Case "y"
            GetCoord = Int(ar(1))
        Case "x"
            GetCoord = Int(ar(2))
    End Select
End Function
' >>> read the content of a word file
Public Function ReadWordFile(fl As String) As String
    Dim WD As Object
    If FileExists(fl) Then
        Set WD = WordOpenFile(fl, "r")
        ReadWordFile = WD.Range(0, WD.Range.End).Text
        WordCloseFile WD
        WordClose
    End If
End Function


Attribute VB_Name = "DialogAttendance"
Attribute VB_Base = "0{86039841-EA47-4413-BDE4-EFE78705B118}{F996AF80-5B03-4F16-879E-9A06FC25CFEB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables
Private FormResult As String
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    FormResult = ""
    Me.CB_month.List = MonthsMenu()
    Me.CB_month.ListIndex = IIf(day(Now()) < 15, 0, 1)
    FixFridays
End Sub
' >>> cancel execution
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    FormResult = ""
End Sub
' >>> execute form
Private Sub Exec_Click()
    Dim x As String
    x = GetFriday(Me.Check_1) + "," + GetFriday(Me.Check_2) + "," + GetFriday(Me.Check_3) + "," + GetFriday(Me.Check_4) + "," + GetFriday(Me.Check_5)
    FormResult = x
    Me.hide
End Sub
' >>> returns the dialog's result
Public Function Result() As String
    Result = FormResult
End Function
' >>> change month and relevant dates
Private Sub CB_month_Change()
    FixFridays
End Sub
' >>>
Private Sub CB_month_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 46 Then CB_month.ListIndex = -1
    FixFridays
End Sub
' >>> make the months list
Private Function MonthsArray() As String()
    Dim months(1 To 12) As String
    months(1) = "ינואר"
    months(2) = "פברואר"
    months(3) = "מרץ"
    months(4) = "אפריל"
    months(5) = "מאי"
    months(6) = "יוני"
    months(7) = "יולי"
    months(8) = "אוגוסט"
    months(9) = "ספטמבר"
    months(10) = "אוקטובר"
    months(11) = "נובמבר"
    months(12) = "דצמבר"
    MonthsArray = months
End Function
' >>> make the months menu
Private Function MonthsMenu() As String()
    Dim y As Integer, m As Integer
    Dim arr(1 To 5) As String
    Dim months() As String
    Dim i As Integer
    months = MonthsArray()
    y = year(Now())
    m = Month(Now())
    For i = 1 To 5
        arr(i) = CStr(y) + " - " + months(m)
        m = m + 1
        If m > 12 Then
            m = 1
            y = y + 1
        End If
    Next i
    MonthsMenu = arr
End Function
' >>> calc month's date
Private Function CalcMonth(mon As String) As Date
    Dim y As Integer, m As Integer, i As Integer
    Dim months() As String, x As String
    Dim d As Date
    d = 0
    If mon <> "" Then
        months = MonthsArray()
        y = CInt(Trim(Left(mon, InStr(mon, " "))))
        x = Trim(Mid(mon, InStr(mon, "-") + 1))
        m = 1
        For i = LBound(months) To UBound(months)
            If months(i) = x Then Exit For
            m = m + 1
        Next i
        d = DateSerial(y, m, 1)
        While Weekday(d) <> 6
            d = d + 1
        Wend
    End If
    CalcMonth = d
End Function
' >>> fix Fridays check boxes
Private Sub FixFridays()
    Dim tx As String
    Dim d As Date
    tx = "יום שישי - "
    d = CalcMonth(Me.CB_month.Value)
    Me.Check_1.Caption = ""
    Me.Check_1.Visible = False
    Me.Check_2.Caption = ""
    Me.Check_2.Visible = False
    Me.Check_3.Caption = ""
    Me.Check_3.Visible = False
    Me.Check_4.Caption = ""
    Me.Check_4.Visible = False
    Me.Check_5.Caption = ""
    Me.Check_5.Visible = False
    If d > 0 Then
        Me.Check_1.Caption = tx + Format(d, "dd/mm")
        Me.Check_1.Value = True
        Me.Check_1.Visible = True
        Me.Check_2.Caption = tx + Format(d + 7, "dd/mm")
        Me.Check_2.Value = True
        Me.Check_2.Visible = True
        Me.Check_3.Caption = tx + Format(d + 14, "dd/mm")
        Me.Check_3.Value = True
        Me.Check_3.Visible = True
        Me.Check_4.Caption = tx + Format(d + 21, "dd/mm")
        Me.Check_4.Value = True
        Me.Check_4.Visible = True
        If Month(d) = Month(d + 28) Then
            Me.Check_5.Caption = tx + Format(d + 28, "dd/mm")
            Me.Check_5.Value = True
            Me.Check_5.Visible = True
        End If
    End If
    Me.Exec.Visible = Me.Check_1.Visible
End Sub
' >>> returns the proper title for a selected friday
Private Function GetFriday(o As Object) As String
    Dim x As String, r As String
    x = o.Caption
    x = Trim(Mid(x, InStr(x, "-") + 1))
    r = IIf(o.Visible And o.Value, "1", "0")
    GetFriday = "[" + x + "]=" + r
End Function


Attribute VB_Name = "PanelPhotos"
Attribute VB_Base = "0{AFA3E935-9949-4CDD-9DA1-C0F25B204D7E}{A533984C-F000-4C06-98D5-488ECFD8AB30}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Dim s As String
    Me.RightToLeft = True
    s = Range(GRN_def_img_pos).Text
    If InStr(s, ",") > 0 Then
        Me.Left = GetPositionX(Me, s)
        Me.Top = GetPositionY(Me, s)
    End If
    s = Range(GRN_def_img_size).Text
    Me.Width = CInt(s + 6)
    Me.Height = CInt(s + 20)
    Me.KidPhoto.Width = CInt(s)
    Me.KidPhoto.Height = CInt(s)
End Sub
' >>> remember form location
Private Sub UserForm_Layout()
    UpdatesOff
    ChangeLayoutPos Me, GRN_def_img_pos
    UpdatesOn
End Sub
' >>> show a kid's photo
Public Sub ShowKid(rng As Range)
    Dim cl As Range
    Dim id As String
    Dim fl As String
    If Trim(Range(GRN_def_img_pos).Text) <> "" Then
        Set cl = Intersect(rng.EntireRow, Range(GRN_ppl_id).EntireColumn)
        id = Trim(cl)
        fl = MakePasportPhoto(id)
        If dir(fl) <> "" Then
            Me.KidPhoto.Picture = LoadPicture(fl)
            Me.Show (vbModeless)
            SheetFocus
        Else
            Me.hide
        End If
    End If
End Sub
' >>> turn panel off
Public Sub TurnOff()
    Me.KidPhoto.Picture = Null
    Me.hide
End Sub


Attribute VB_Name = "PanelInfo"
Attribute VB_Base = "0{A2A8D41E-DAA0-4553-9B11-A1A22AB7FD1F}{91D36426-18EF-4335-833C-90A18C31836A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> show info panel
Private Sub UserForm_Activate()
    ShowSchoolYear
    ShowExcelVer
    ShowProgVer
    ShowDataVer
    ShowUser
    ShowProblems
    ShowLockStatus
End Sub
' >>> close info panel
Private Sub CommandOK_Click()
    Me.hide
End Sub
' >>> close info panel and show "problems" column
Private Sub CommandProb_Click()
    Me.hide
    ControlDefs.DefsCheckLock.Value = False
    ControlDefs.DefsCheckPages = False
    ControlDefs.DefsCheckTabs = False
    SheetFocus
End Sub
' >>> show the current school year
Private Sub ShowSchoolYear()
    Dim yr As String, txt As String
    txt = "שנת עבודה "
    yr = Left(Trim(Range("defs_cal_year").Value), 4)
    txt = txt + GetHebrewYear(CLng(yr))
    Me.LabelSchoolYear.Caption = txt
End Sub
' >>> show excel version
Private Sub ShowExcelVer()
    Dim x As String
    x = "גרסת אקסל: "
    x = x & Trim(CStr(Application.Version))
    Me.LabelExcelVer.Caption = x
End Sub
' >>> show program version
Private Sub ShowProgVer()
    Dim x As String
    x = "גרסת תוכנה: "
    x = x & CN_version
    Me.LabelProgVer.Caption = x
    If GBL_deployment <> "" Then
        Me.LabelDeployment.Caption = "מכונה: " & GBL_deployment
        Me.LabelDeployment.Visible = True
    Else
        Me.LabelDataVer.Top = Me.LabelUser.Top
    End If
End Sub
' >>> show data version
Private Sub ShowDataVer()
    Me.LabelDataVer.Caption = "נתונים: " & Range(GRN_def_data_ver)
End Sub
' >>> show data version
Private Sub ShowUser()
    Me.LabelUser.Caption = "יוזר: " & GBL_current_user
End Sub
' >>> show problems
Private Sub ShowProblems()
    Dim x As String
    Dim c As Integer
    Me.LabelProbStatus.ForeColor = vbBlue
    x = "לא נמצאו בעיות"
    c = CountProblems()
    If c > 0 Then
        x = "נמצאו "
        x = x & str(c)
        x = x & " בעיות"
    Else
        x = "לא נמצאו בעיות"
    End If
    Me.LabelProbStatus.ForeColor = vbRed
    Me.LabelProbStatus.Caption = x
End Sub
' >>> show lock status
Private Sub ShowLockStatus()
    Dim lk_c As Boolean, lk_p As Boolean, lk_t As Boolean
    Dim x As String
    lk_c = ControlDefs.DefsCheckLock.Value
    lk_p = ControlDefs.DefsCheckPages.Value
    lk_t = ControlDefs.DefsCheckTabs.Value
    x = "הקובץ פתוח חלקית"
    Me.LabelLockStatus.ForeColor = vbYellow
    If lk_c And lk_p And lk_t Then
        Me.LabelLockStatus.ForeColor = vbBlue
        x = "הקובץ נעול"
    End If
    If Not lk_c And Not lk_p And Not lk_t Then
        Me.LabelLockStatus.ForeColor = vbRed
        x = "הקובץ פתוח"
    End If
    Me.LabelLockStatus.Caption = x
End Sub
' >>> show main index help
Private Sub MainHelp_Click()
    Me.hide
    PanelHelp.ShowIndex
End Sub


Attribute VB_Name = "PanelHelp"
Attribute VB_Base = "0{F64D838E-5ED8-4838-8EF8-E7C743FEC233}{CD07AE80-0F0C-4328-9B54-08598E8AC50E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> separator line length
Private SepLen As Integer
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    Me.CalcBox.Text = "___"
    SepLen = 0
    While Me.CalcBox.Width < Me.HelpBox.Width
        Me.CalcBox.Text = Me.CalcBox.Text & "_"
        SepLen = SepLen + 1
    Wend
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
    Me.hide
    SheetFocus
End Sub
' >>> show index
Public Sub ShowIndex()
    SelectMode ("i")
End Sub
' >>> show specific help text
Public Sub ShowHelp(hlp As String)
    Dim fl As String, tx As String
    Dim p1 As Integer, p2 As Integer
    Dim sp As String, tl As String
    sp = String(SepLen, "_")
    tl = chr(13) & chr(13)
    fl = GetHelpFile()
    If fl <> "" Then
        tx = GetHelpSegment(fl, hlp)
        If tx <> "" Then
            Me.HelpBox.Value = tx
            Me.HelpBox.SelStart = 0
            SelectMode ("h")
        End If
    End If
End Sub
' >>> get help segment
Private Function GetHelpSegment(fl As String, hlp As String) As String
    Dim p1 As Long, p2 As Long
    Dim sp As String, tl As String
    Dim tx As String
    GetHelpSegment = ""
    sp = String(SepLen, "_")
    tl = chr(13) & chr(13)
    tx = ReadWordFile(fl)
    p1 = InStr(tx, "{{" & hlp & "}}")
    If p1 > 0 Then
        p1 = InStr(p1, tx, "}}")
        If p1 > 0 Then
            p1 = p1 + 2
            p2 = InStr(p1, tx, "{{")
            If p2 = 0 Then p2 = Len(tx)
            tx = Trim(Mid(tx, p1, p2 - p1))
            tx = Replace(tx, "{---}", sp)
            While Left(tx, 2) = tl ' remove double lines from start
                tx = Mid(tx, 2, Len(tx))
            Wend
            While Right(tx, 2) = tl ' remove double lines from end
                tx = Left(tx, Len(tx) - 1)
            Wend
            If Len(Trim(tx)) < 2 Then tx = "אין כרגע עזרה לנושא זה."
            GetHelpSegment = chr(13) + tx
        End If
    End If
End Function
' >>> get help file
Private Function GetHelpFile(Optional sl As Boolean = False) As String
    Dim fl As String
    fl = Trim(Range(GRN_def_help_file).Text)
    If fl = "" Or Not FileExists(fl) Then
        fl = ""
        If Not sl Then
            fl = WordPickFile("help.docx", "בחר קובץ וורד המכיל את העזרה")
            If fl <> "" Then
                UpdatesOff
                Range(GRN_def_help_file) = fl
                UpdatesOn
            End If
        End If
    End If
    GetHelpFile = fl
End Function
' >>> switch between help & index
Private Sub SelectMode(m As String)
    Dim ctrl As Control
    If m = "h" Or m = "i" Then
        For Each ctrl In Me.Controls
            If ctrl.Tag = "1" Then ctrl.Visible = (m = "h")
            If ctrl.Tag = "2" Then ctrl.Visible = (m = "i")
        Next
        If Not Me.Visible Then Me.Show
    End If
End Sub
' >>> show help index
Private Sub CommandIndex_Click()
    SelectMode ("i")
End Sub
' >>> show [general] help
Private Sub SubjGeneral_Click()
    ShowHelp ("מידע-כללי")
End Sub
' >>> show [pupils] help
Private Sub SubjPpl_Click()
    ShowHelp ("תלמידים")
End Sub
' >>> show [pupils-filter] help
Private Sub SubjPplFilter_Click()
    ShowHelp ("תלמידים-פילטר")
End Sub
' >>> show [pupils-columns] help
Private Sub SubjPplColumns_Click()
    ShowHelp ("תלמידים-עמודות")
End Sub
' >>> show [pupils-misc] help
Private Sub SubjPplMisc_Click()
    ShowHelp ("תלמידים-מיוחד")
End Sub
' >>> show [pupils-delete] help
Private Sub SubjPplDelete_Click()
    ShowHelp ("תלמידים-מחיקות")
End Sub
' >>> show [pupils-misc-assign-pages] help
Private Sub SubjPplMiscAssPages_Click()
    ShowHelp ("תלמידים-דפי-שיבוץ")
End Sub
' >>> show [pupils-misc-attendance-pages] help
Private Sub SubjPplMiscAttPages_Click()
    ShowHelp ("תלמידים-דפי-נוכחות")
End Sub
' >>> show [pupils-misc-assign] help
Private Sub SubjPplMiscAssign_Click()
    ShowHelp ("תלמידים-שיבוץ")
End Sub
' >>> show [pupils-stats] help
Private Sub SubjPplStats_Click()
    ShowHelp ("תלמידים-מצבת")
End Sub
' >>> show [pupils-problems] help
Private Sub SubjPplProblems_Click()
    ShowHelp ("תלמידים-בעיות")
End Sub
' >>> show [classes] help
Private Sub SubjClass_Click()
    ShowHelp ("חוגים")
End Sub
' >>> show [classes-columns] help
Private Sub SubjClassColumns_Click()
    ShowHelp ("חוגים-עמודות")
End Sub
' >>> show [classes-changes] help
Private Sub SubjClassChanges_Click()
    ShowHelp ("חוגים-שינוי")
End Sub
' >>> show [classes-misc] help
Private Sub SubjClassMisc_Click()
    ShowHelp ("חוגים-מיוחד")
End Sub
' >>> show [classes-misc-stability] help
Private Sub SubjClassMiscStable_Click()
    ShowHelp ("יציבות-חוגים")
End Sub
' >>> show [grades] help
Private Sub SubjGrade_Click()
    ShowHelp ("כיתות")
End Sub
' >>> show [grades-columns] help
Private Sub SubjGradeColumns_Click()
    ShowHelp ("כיתות-עמודות")
End Sub
' >>> show [grades-changes] help
Private Sub SubjGradeChanges_Click()
    ShowHelp ("כיתות-שינוי")
End Sub
' >>> show [grades-misc] help
Private Sub SubjGradeMisc_Click()
    ShowHelp ("כיתות-מיוחד")
End Sub
' >>> show [defs] help
Private Sub SubjDefs_Click()
    ShowHelp ("הגדרות")
End Sub
' >>> show [defs-security] help
Private Sub SubjDefsSecurity_Click()
    ShowHelp ("הגדרות-נעילות")
End Sub
' >>> show [defs-cloud] help
Private Sub SubjDefsCloud_Click()
    ShowHelp ("הגדרות-ענן")
End Sub
' >>> show [defs-resets] help
Private Sub SubjDefsResets_Click()
    ShowHelp ("הגדרות-איפוס")
End Sub
' >>> show [defs-checks] help
Private Sub SubjDefsChecks_Click()
    ShowHelp ("הגדרות-בדיקות")
End Sub
' >>> show [defs-export] help
Private Sub SubjDefsExport_Click()
    ShowHelp ("הגדרות-יצוא")
End Sub
' >>> show [defs-export-sms] help
Private Sub SubjDefsExportSms_Click()
ShowHelp ("הפקת-אסמסים")
End Sub
' >>> show [defs-export-mail] help
Private Sub SubjDefsExportMail_Click()
    ShowHelp ("רשימות-תפוצה")
End Sub
' >>> show [defs-assginments] help
Private Sub SubjDefsAssign_Click()
    ShowHelp ("הגדרות-נוכחות")
End Sub
' >>> show [track changes] help
Private Sub SubjChanges_Click()
    ShowHelp ("שינויים")
End Sub
' >>> show [events] help
Private Sub SubjEvents_Click()
    ShowHelp ("אירועים")
End Sub
' >>> show [waiting lists] help
Private Sub SubjWaiting_Click()
    ShowHelp ("המתנה")
End Sub
' >>> show [balance] help
Private Sub SubjBalance_Click()
    ShowHelp ("מאזן")
End Sub
' >>> show [payments] help
Private Sub SubjPayments_Click()
    ShowHelp ("תשלומים")
End Sub
' >>> show [staff info] help
Private Sub SubjStaff_Click()
    ShowHelp ("צוות")
End Sub
' >>> ---------------------------
' >>> cell comments functions <<<
' >>> ---------------------------
' >>> init all comments in the event they are missing
Public Sub InitComments()
    If Not TestCellComments() Then
        ResetAllComments
    End If
End Sub
' >>> init all cell comments from help file
Public Sub ResetAllComments()
    Dim fl As String, tx As String, cl As String
    Dim ar() As String, Sh As String
    Dim vl As Variant
    fl = GetHelpFile(True)
    If fl <> "" Then
        Sh = ""
        tx = GetHelpSegment(fl, "הערות")
        ar = Split(tx, chr(13))
        For Each vl In ar
            tx = Trim(CStr(vl))
            If Left(tx, 1) = "[" And InStr(2, tx, "]") > 2 Then
                cl = Mid(tx, 2, InStr(tx, "]") - 2)
                tx = Trim(Mid(tx, InStr(tx, "]") + 1, Len(tx)))
                If Left(cl, 1) = "*" Then
                    SetCellComment Mid(cl, 2, 99), tx
                Else
                    SetCellComment Sh & cl, tx
                End If
            Else
                If Left(tx, 1) = "{" And Right(tx, 1) = "}" Then
                    Sh = Trim(Mid(tx, 2, Len(tx) - 2)) & "!"
                End If
            End If
        Next
    End If
End Sub
' >>> set one cell comment
Private Sub SetCellComment(rng As String, txt As String)
    Dim ar As Long, ww As Integer
    Dim cl As Range
    ww = 0
    If InStr(rng, "|") > 0 Then
        ww = CInt(Mid(rng, InStr(rng, "|") + 1, 9))
        rng = Left(rng, InStr(rng, "|") - 1)
    End If
    Set cl = Range(rng)
    cl.ClearComments
    cl.AddComment (Replace(txt, "|", vbLf))
    With cl.Comment
        .Shape.AutoShapeType = msoShapeRoundedRectangle
        .Shape.TextFrame.HorizontalAlignment = xlHAlignRight
        .Shape.TextFrame.AutoSize = True
        .Shape.TextFrame.AutoSize = False
        ar = .Shape.Width * .Shape.Height
        If .Shape.Width > 200 Or ww > 0 Then
            .Shape.Width = 200
            If ww > 0 Then .Shape.Width = ww
            .Shape.Height = CInt(ar / .Shape.Width)
        End If
        .Shape.Width = .Shape.Width + 20
        .Shape.Height = .Shape.Height + 10
        .Shape.TextFrame.Characters.Font.name = "Tahoma"
        .Shape.TextFrame.Characters.Font.Size = 8
        .Shape.TextFrame.Characters.Font.ColorIndex = 2
        .Shape.TextFrame.Characters.Font.Bold = True
        .Shape.line.ForeColor.RGB = RGB(0, 0, 0)
        .Shape.line.BackColor.RGB = RGB(255, 255, 255)
        .Shape.Fill.Visible = msoTrue
        .Shape.Fill.ForeColor.RGB = RGB(58, 82, 184)
        .Shape.Fill.OneColorGradient msoGradientDiagonalUp, 1, 0.23
    End With
End Sub
' >>> test if cell comments exist
Private Function TestCellComments() As Boolean
    Dim ws As Worksheet
    Dim cm As Comment
    TestCellComments = False
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Comments.count > 0 Then
            TestCellComments = True
        End If
    Next
End Function


Attribute VB_Name = "DialogMail"
Attribute VB_Base = "0{FD35C1EF-E4AE-474E-9E90-E015B35BA673}{7B191423-E1D8-4A54-9481-FCF00F66D7FA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' UTF-8 functionality
Private Const CP_UTF8 = 65001
#If VBA7 Then
  Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As Long, ByVal lpMultiByteStr As LongPtr, ByVal cbMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
#Else
  Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, ByVal lpMultiByteStr As Long, ByVal cbMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
#End If
' >>> variables
Private kids As String
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    Me.OptionActive.Value = False
    Me.OptionActive.Value = True
    kids = ""
End Sub
' >>> cancel operation
Private Sub ButtonExit_Click()
    Me.hide
End Sub
' >>> show help for mailing lists
Private Sub MailHelp_Click()
    PanelHelp.ShowHelp ("רשימות-תפוצה")
End Sub
' >>> create the contacts file
Private Sub ButtonMake_Click()
    Dim fn
    fn = ActiveWorkbook.FullName
    fn = Left(fn, Len(fn) - Len(ActiveWorkbook.name))
    fn = fn & "contacts_list.csv"
    fn = Application.GetSaveAsFilename(FileFilter:="Comma separated values text files (*.csv), *.csv", InitialFileName:=fn)
    If fn <> False Then MakeContactsFile (fn)
    Me.hide
End Sub
' >>> make the contacts file
Private Sub MakeContactsFile(file As String)
    Dim lnm As String, fnm As String, eml As String, phn As String, cat As String
    Dim fn As Integer, i As Integer, txt As String
    Dim lst As Collection
    fn = FreeFile
    Open file For Output As #fn
    WriteTitles fn
    kids = ""
    Set lst = GetMailingList()
    For i = 1 To lst.count
        lnm = lst.Item(i)(0)
        fnm = lst.Item(i)(1)
        eml = lst.Item(i)(2)
        phn = lst.Item(i)(3)
        cat = GetActualCategory(CStr(lst.Item(i)(4)))
        WriteContact fn, lnm, fnm, eml, phn, cat
    Next i
    Close #fn
    txt = "קובץ רשימות תפוצה נשמר על הדיסק.||יש ליבא אותו לאנשי הקשר בגוגל."
    txt = Replace(txt, "|", vbCr)
    AskReset
    Call AskDialog(txt, "o")
End Sub
' >>> get the normalized email list
Private Function GetMailingList() As Collection
    Dim cid As Integer, cac As Integer, cgr As Integer, cfm As Integer, cnm As Integer, cem As Integer, cph As Integer
    Dim lst As Collection
    Dim banned As String
    Dim rng As Range
    Set lst = New Collection
    banned = get_banned_mails()
    Set rng = Range(GRN_ppl_all_data)
    cid = Range(GRN_ppl_id).Column
    cac = Range(GRN_ppl_hours).Column
    cgr = Range(GRN_ppl_grade).Column
    cfm = Range(GRN_ppl_name_last).Column
    cnm = Range(GRN_ppl_mom_nm).Column
    cem = Range(GRN_ppl_mom_eml).Column
    cph = Range(GRN_ppl_mom_phm).Column
    GetParentsMails lst, rng, cid, cac, cgr, cfm, cnm, cem, cph, banned
    cnm = Range(GRN_ppl_dad_nm).Column
    cem = Range(GRN_ppl_dad_eml).Column
    cph = Range(GRN_ppl_dad_phm).Column
    GetParentsMails lst, rng, cid, cac, cgr, cfm, cnm, cem, cph, banned
    Set rng = Range(GRN_stf_data)
    cac = Range(GRN_stf_year).Column
    cnm = Range(GRN_stf_name).Column
    cem = Range(GRN_stf_emails).Column
    cph = Range(GRN_stf_phones).Column
    GetStaffMails lst, rng, cac, cnm, cem, cph, banned
    Set GetMailingList = lst
End Function
' >>> collect parents mails
Private Sub GetParentsMails(lst As Collection, rng As Range, cid As Integer, cac As Integer, cgr As Integer, cfm As Integer, cnm As Integer, cem As Integer, cph As Integer, bnd As String)
    Dim id As String, act As Integer, grd As String, lnm As String, fnm As String, eml As String, phn As String
    Dim cat As String
    Dim row As Range
    For Each row In rng.Rows
        id = Trim(row.Cells(cid))
        act = Trim(row.Cells(cac))
        grd = Left(row.Cells(cgr), 1)
        lnm = Trim(row.Cells(cfm))
        fnm = Trim(row.Cells(cnm))
        eml = FixGmail(row.Cells(cem))
        phn = Trim(row.Cells(cph))
        If eml <> "" Then
            If InStr(bnd, eml) < 1 Then
                cat = "p" & IIf(act > 0, "+", "")
                If InStr("אבגדהו", grd) > 0 And (act > 0 Or Me.OptionAll.Value) Then
                    cat = cat & CStr(InStr("אבגדהו", grd))
                End If
                cat = cat & IIf(InStr(kids, id) < 1, "a", "b")
                kids = kids & "[" & id & "],"
                AddMailToList lst, lnm, fnm, eml, phn, cat
            End If
        End If
    Next
End Sub
' >>> generate and write staff contacts
Private Sub GetStaffMails(lst As Collection, rng As Range, cac As Integer, cnm As Integer, cem As Integer, cph As Integer, bnd As String)
    Dim act As Integer, lnm As String, fnm As String, eml As String, phn As String
    Dim row As Range
    Dim yr As Integer
    yr = CInt(Format(Date, "yyyy"))
    If Format(Date, "mm/dd") > "08/00" Then yr = yr + 1
    For Each row In rng.Rows
        act = ConvInt(Trim(row.Cells(cac)), 0)
        fnm = Trim(row.Cells(cnm))
        lnm = ""
        If InStr(fnm, " ") > 0 Then
            lnm = Trim(Mid(fnm, InStr(fnm, " ") + 1, 99))
            fnm = Trim(Left(fnm, InStr(fnm, " ") - 1))
        End If
        eml = FixGmail(row.Cells(cem))
        phn = Trim(row.Cells(cph))
        If eml <> "" Then
            If Me.OptionStaff.Value And CInt(act) = yr Then
                If InStr(bnd, eml) < 1 Then
                    AddMailToList lst, lnm, fnm, eml, phn, "s"
                End If
            End If
        End If
    Next
End Sub
' >>> add (or update) a mail to the list
Private Sub AddMailToList(lst As Collection, lnm As String, fnm As String, eml As String, phn As String, cat As String)
    Dim x As String
    If keyExists(lst, eml) Then
        x = lst(eml)(4)
        If InStr(cat, "p") > 0 And InStr(x, "p") < 1 Then x = x & "p"
        If InStr(cat, "+") > 0 And InStr(x, "+") < 1 Then x = x & "+"
        If InStr(cat, "1") > 0 And InStr(x, "1") < 1 Then x = x & "1"
        If InStr(cat, "2") > 0 And InStr(x, "2") < 1 Then x = x & "2"
        If InStr(cat, "3") > 0 And InStr(x, "3") < 1 Then x = x & "3"
        If InStr(cat, "4") > 0 And InStr(x, "4") < 1 Then x = x & "4"
        If InStr(cat, "5") > 0 And InStr(x, "5") < 1 Then x = x & "5"
        If InStr(cat, "6") > 0 And InStr(x, "6") < 1 Then x = x & "6"
        If InStr(cat, "a") > 0 And InStr(x, "a") < 1 Then x = x & "a"
        If InStr(cat, "b") > 0 And InStr(x, "b") < 1 And InStr(x, "a") < 1 Then x = x & "b"
        If InStr(cat, "s") > 0 And InStr(x, "s") < 1 Then x = x & "s"
        lst.Remove (eml)
        lst.add Array(lnm, fnm, eml, phn, x), eml
    Else
        lst.add Array(lnm, fnm, eml, phn, cat), eml
    End If
End Sub
' >>> get the list of banned emails as a string array
Private Function get_banned_mails() As String
    Dim arr() As String
    Dim itm
    arr = RangeToStrArr(Range(GRN_men_banned_mails))
    get_banned_mails = ""
    If Not IsStringArrayEmpty(arr) Then
        For Each itm In arr
            get_banned_mails = get_banned_mails + "[" + FixGmail(CStr(itm)) + "],"
        Next
    End If
End Function
' >>> write the CSV titles line
Private Sub WriteTitles(fn As Integer)
    Dim xx As String
    xx = "First Name,Last Name,E-mail Address,Mobile Phone,Categories"
    Print #fn, xx
End Sub
' >>> write a single CSV text line
Private Sub WriteContact(fn As Integer, lnm As String, fnm As String, eml As String, phn As String, cat As String)
    Dim xx As String
    xx = FixFld(lnm) & "," & FixFld(fnm) & "," & FixFld(eml) & "," & FixFld(phn) & "," & FixFld(cat)
    Print #fn, xx
End Sub
' >>> convert category codes to actual categories
Private Function GetActualCategory(cat As String) As String
    Dim x As String
    x = ""
    If InStr(cat, "+") > 0 And InStr(cat, "a") > 0 Then x = x & ";משתתפים 1"
    If InStr(cat, "+") > 0 And InStr(cat, "b") > 0 Then x = x & ";משתתפים 2"
    If InStr(cat, "+") > 0 Or Me.OptionAll.Value Then
        If InStr(cat, "1") > 0 Then x = x & ";שכבה א'"
        If InStr(cat, "2") > 0 Then x = x & ";שכבה ב'"
        If InStr(cat, "3") > 0 Then x = x & ";שכבה ג'"
        If InStr(cat, "4") > 0 Then x = x & ";שכבה ד'"
        If InStr(cat, "5") > 0 Then x = x & ";שכבה ה'"
        If InStr(cat, "6") > 0 Then x = x & ";שכבה ו'"
    End If
    If InStr(cat, "p") > 0 And InStr(cat, "+") < 1 Then x = x & ";לא משתתפים"
    If InStr(cat, "s") > 0 Then x = x & ";צוות"
    GetActualCategory = Mid(x, 2, Len(x))
End Function
' >>> fix a CSV field string to proper quotes
Private Function FixFld(x As String) As String
    FixFld = x
    If InStr(x, ",") > 0 Then
        FixFld = chr(34) & UTF16To8(FixFld) & chr(34)
    Else
        FixFld = UTF16To8(FixFld)
    End If
End Function
' >>> convert a string to UTF-8
Public Function UTF16To8(ByVal UTF16 As String) As String
    Dim sBuffer As String
    Dim lLength As Long
    If UTF16 <> "" Then
        #If VBA7 Then
            lLength = WideCharToMultiByte(CP_UTF8, 0, CLngPtr(StrPtr(UTF16)), -1, 0, 0, 0, 0)
        #Else
            lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, 0, 0, 0, 0)
        #End If
        sBuffer = Space$(lLength)
        #If VBA7 Then
            lLength = WideCharToMultiByte(CP_UTF8, 0, CLngPtr(StrPtr(UTF16)), -1, CLngPtr(StrPtr(sBuffer)), LenB(sBuffer), 0, 0)
        #Else
            lLength = WideCharToMultiByte(CP_UTF8, 0, StrPtr(UTF16), -1, StrPtr(sBuffer), LenB(sBuffer), 0, 0)
        #End If
        sBuffer = StrConv(sBuffer, vbUnicode)
        UTF16To8 = Left$(sBuffer, lLength - 1)
    Else
        UTF16To8 = ""
    End If
End Function
' >>> fix a gmail to not contain dots (.) before the @gmail.com
Public Function FixGmail(str As String) As String
    Dim x As String
    x = LCase(Trim(str))
    If Right(x, 10) = "@gmail.com" Then
        If InStr(x, "@") > 0 Then
            x = Replace(Left(x, InStr(x, "@") - 1), ".", "") & "@gmail.com"
        End If
    End If
    FixGmail = x
End Function


Attribute VB_Name = "PanelSelect"
Attribute VB_Base = "0{9DFEA5B3-28A4-4AA0-AF1E-E53C6E461E4E}{530EFFA6-8D99-4F85-BA7C-4EB31B44B638}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> set position on screen
Private Sub UserForm_Activate()
    Me.Left = 20
    Me.Top = Application.Top + Application.Height - 100
End Sub
' >>> select only visible cells
Private Sub Button_Click()
    Selection.SpecialCells(xlCellTypeVisible).Select
End Sub


Attribute VB_Name = "ModuleUtils"
Option Explicit
' >>> ------------------------- <<<
' >>> string enocding functions <<<
' >>> ------------------------- <<<
Public Const enc_trn_src As String = "abcdefghijklmnopqrstuvwxyzאבגדהוזחטיכךלמםנןסעפףצץקרשתABCDEFGHIJKLMNOPQRSTUVWXYZ`1234567890-=][\';/., ~!@#$%^&*()_+}{|"":?><"
Public Const enc_trn_trg As String = "000000000000000000000000001111111111111111111111111112222222222222222222222222233333333333333333333334444444444444444444444"
Public Const enc_trn_chr As String = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz{abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvabcdefghijklmnopqrstuv"
' >>> new version
Public Const enc_trn_trn As String = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
Public Const enc_trn_sr1 As String = "0123456789"", <{([u'n])}>*-:_#=+.;!אבגדהוזחטיכךלמםנןסעפףצץקרשת"
Public Const enc_trn_sr2 As String = "abcdefghijklmopqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`\/~@$%^&|?"
' >>> encode a string to be url safe (version 2)
Public Function EncStr2(str As String) As String
    Dim i As Integer, n As Integer
    EncStr2 = ""
    For n = 1 To Len(str)
        i = InStr(enc_trn_sr1, Mid(str, n, 1))
        If i > 0 Then
            EncStr2 = EncStr2 & Mid(enc_trn_trn, i, 1)
        Else
            i = InStr(enc_trn_sr2, Mid(str, n, 1))
            If i > 0 Then
                EncStr2 = EncStr2 & "-" & Mid(enc_trn_trn, i, 1)
            End If
        End If
    Next n
End Function
' >>> decode a url safe encoded string (version 2)
Public Function DecStr2(str As String) As String
    Dim i As Integer, n As Integer
    Dim c As String
    DecStr2 = ""
    For n = 1 To Len(str)
        c = Mid(str, n, 1)
        If c = "-" Then
            n = n + 1
            c = Mid(str, n, 1)
            i = InStr(enc_trn_trn, c)
            If i > 0 Then DecStr2 = DecStr2 & Mid(enc_trn_sr2, i, 1)
        Else
            i = InStr(enc_trn_trn, c)
            If i > 0 Then DecStr2 = DecStr2 & Mid(enc_trn_sr1, i, 1)
        End If
    Next n
End Function
' >>> encode a string to be url safe
Public Function EncStr(str As String) As String
    Dim i As Integer, n As Integer
    Dim c As String
    EncStr = ""
    For n = 1 To Len(str)
        i = InStr(enc_trn_src, Mid(str, n, 1))
        If i > 0 Then
            c = Mid(enc_trn_trg, i, 1)
            EncStr = EncStr & IIf(c <> "0", c, "") & Mid(enc_trn_chr, i, 1)
        End If
    Next n
End Function
' >>> decode a url safe encoded string
Public Function DecStr(str As String) As String
    Dim i As Integer, n As Integer
    Dim c As String
    DecStr = ""
    For n = 1 To Len(str)
        c = Mid(str, n, 1)
        If InStr(" 1234", c) > 0 Then
            n = n + 1
            i = Asc(Mid(str, n, 1)) - Asc("a") + 1 + IIf(c = "1", 26, 0) + IIf(c = "2", 53, 0) + IIf(c = "3", 79, 0) + IIf(c = "4", 101, 0)
            DecStr = DecStr & Mid(enc_trn_src, i, 1)
        Else
            DecStr = DecStr & c
        End If
    Next n
End Function
' >>> calculate an [fnv1a] hash of a string
Public Function HashFNV(str As String) As String
    Const prime As Long = 167 '77619
    Const max As Long = &H7FFFFFFF
    Dim hash As Double, i As Integer, x As Double
    hash = 2166136261#
    For i = 1 To Len(str)
        x = hash * prime
        x = x - 2147483647# * Int(x / 2147483647#)
        hash = CLng(x) Xor InStr(enc_trn_src, Mid(str, i, 1))
    Next
    HashFNV = Right("00000000" & Hex(hash), 8)
End Function
' >>> sign a string and return an hex signature
Public Function SignStr(str As String) As String
    Dim d As Integer
    d = (year(Now()) - 2000) * 380 + (Month(Now()) - 1) * 31 + day(Now()) - 1
    SignStr = HashFNV(str & "-trox7-" & CStr(d))
End Function
' >>> replace a normal double quote " with 2 single ''
Public Function FixDoubleQuote(str As String) As String
    FixDoubleQuote = Replace(str, """", "''")
End Function
' >>> ---------------- <<<
' >>> string functions <<<
' >>> ---------------- <<<
' >>> returns the string's section between to given substrings
Public Function StrBetween(str As String, sb1 As String, sb2 As String) As String
    Dim p1 As Long, p2 As Long
    StrBetween = ""
    p1 = InStr(str, sb1)
    If p1 >= 0 Then
        p1 = p1 + Len(sb1)
        p2 = InStr(p1, str, sb2)
        If p2 > 0 Then
            StrBetween = Mid(str, p1, p2 - p1)
        End If
    End If
End Function
' >>> -------- <<<
' >>> DataBass <<<
' >>> -------- <<<
' >>> query a MySql DB and return an array
Public Function mysql_query(sql, Optional srv As String = "*", Optional dbn As String = "*", Optional usr As String = "*", Optional pss As String = "*") As Variant()
    Static db_srv As String
    Static db_dbn As String
    Static db_usr As String
    Static db_pss As String
    Dim db_res As Object
    Dim db_con As Object
    If srv <> "*" Then db_srv = Trim(srv)
    If dbn <> "*" Then db_dbn = Trim(dbn)
    If usr <> "*" Then db_usr = Trim(usr)
    If pss <> "*" Then db_pss = Trim(pss)
' ---
    Set db_con = CreateObject("ADODB.Connection")
    db_con.Open "Driver={MySQL ODBC 5.1 Driver};Server=" & db_srv & ";Database=" & db_dbn & ";Uid=" & db_usr & ";Pwd=" & db_pss & ";OPTION=16427;"
    Set db_res = CreateObject("ADODB.Recordset")
    db_res.Open sql, db_con, 3
    mysql_query = db_res.GetRows()
' ---
    db_res.Close
    Set db_res = Nothing
    db_con.Close
    Set db_con = Nothing
End Function
' >>> query an access DB and return an array
Public Function access_query(sql, Optional mdb As String = "*", Optional pss As String = "*") As Variant()
    Static db_mdb As String
    Static db_pss As String
    Dim db_res As Object
    Dim db_con As Object
    If mdb <> "*" Then db_mdb = Trim(mdb)
    If pss <> "*" Then db_pss = Trim(pss)
' ---
    Set db_con = CreateObject("ADODB.Connection")
    db_con.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & db_mdb & ";Jet OLEDB:Database Password=" & db_pss & ";"
    Set db_res = db_con.Execute(sql)
    access_query = db_res.GetRows()
' ---
    db_res.Close
    Set db_res = Nothing
    db_con.Close
    Set db_con = Nothing
End Function
' >>> ------------------ <<< required references:
' >>> Internet Functions <<<     1. [Microsoft Internet Controls]
' >>> ------------------ <<<     2. [Microsoft HTML Object Library]
' >>> fetch html as string (browser mode)
'Function GetHTML(url As String) As String
'    Static oBrowser As InternetExplorer
'    Dim HTMLDoc As HTMLDocument
'    If url = "init" Then
'        Set oBrowser = New InternetExplorer
'        oBrowser.Silent = False
'        oBrowser.Visible = False
'        Application.Wait DateAdd("s", 1, Now)
'        Exit Function
'    End If
'    If url = "quit" Then
'        Application.Wait DateAdd("s", 1, Now)
'        oBrowser.Quit
'        Exit Function
'    End If
'    oBrowser.navigate url
'    Application.Wait DateAdd("s", 1, Now)
'    While oBrowser.Busy
'    Wend
'    Set HTMLDoc = oBrowser.Document
'    Application.Wait DateAdd("s", 1, Now)
'    GetHTML = HTMLDoc.DocumentElement.innerHTML
'    If InStr(GetHTML, "busName") = 0 Then GetHTML = ""
'End Function
' >>> fetch html as string (server mode)
'Function GetUrl(url As String) As String
'    Dim hReq As Object
'    Dim res As String
'    Dim ur As String
'    Set hReq = CreateObject("MSXML2.ServerXMLHTTP.6.0")
'    With hReq
'        .Open "GET", url, False
'        .setRequestHeader "Content-Type", "application/json"
'        .setRequestHeader "Accept", "application/json"
'        .send
'        res = .ResponseText
'    End With
'    GetUrl = res
'End Function
' >>> convert string to url codes
Public Function encodeURL(str As String)
    Dim ScriptEngine As Object
    Dim encoded As String
    Set ScriptEngine = CreateObject("scriptcontrol")
    ScriptEngine.Language = "JScript"
    encoded = ScriptEngine.Run("encodeURIComponent", str)
    encodeURL = encoded
End Function
' >>> -------------- <<< required references:
' >>> File Functions <<<     1. [Microsoft Shell Controls And Automation]
' >>> -------------- <<<
' >>> make a new folder
Public Function makeNewFolder(dr As String) As Boolean
    On Error GoTo CatchErr
    makeNewFolder = False
    If Len(dir(dr, vbDirectory)) = 0 Then
        On Error GoTo CatchErr
        MkDir dr
    End If
    If Len(dir(dr, vbDirectory)) <> 0 Then makeNewFolder = True
CatchErr:
End Function
' >>> unzip a file into a folder
'     Source -> https://exceloffthegrid.com/vba-cod-to-zip-unzip
Public Function Unzip(file As Variant, folder As Variant) As Boolean
    Dim ShellApp As Shell
    On Error GoTo CatchErr
    Unzip = False
    Set ShellApp = CreateObject("Shell.Application")
    ShellApp.Namespace(folder).CopyHere ShellApp.Namespace(file).Items, 16
    Unzip = True
CatchErr:
End Function
' >>> returns a unique random temp file name with temp path
Public Function fileTemp(Optional ex As String = "tmp") As String
    Dim fl As String
    fl = Environ("Temp") & "\temp_" & GetUniqueID() & "." & ex
    fileTemp = fl
End Function
' >>> save a string to a file
Public Function fileSave(fl As String, dt As String) As Boolean
    Dim f As Integer
    On Error GoTo CatchErr
    fileSave = False
    f = FreeFile
    Open fl For Binary Access Write As f
    Put f, 1, dt
    Close f
    fileSave = True
CatchErr:
End Function
' >>> delete a file
Public Function fileDelete(fl As String) As Boolean
    On Error GoTo CatchErr
    fileDelete = False
    Kill fl
    fileDelete = True
CatchErr:
End Function
' >>> move file to folder
Public Sub MoveFile(src As String, trg As String)
    Dim fso As Object
    On Error GoTo CatchErr
    Set fso = CreateObject("Scripting.FileSystemObject")
    fso.MoveFile src, trg
CatchErr:
End Sub
' >>> get file list in current folder
'     returns a list of full file names matching [match]
'     match = a full path + file name match string (e.g. "d:\00\*.jpg")
Public Function GetFileList(match As String) As String()
    Dim res() As String
    Dim file As String
    Dim i As Integer
    i = 0
    file = Trim(dir(match, vbDirectory))
    While file <> ""
        ReDim Preserve res(0 To i)
        res(i) = file
        file = Trim(dir)
        i = i + 1
    Wend
    If i < 1 Then
        ReDim Preserve res(0 To 0)
        res(0) = "*"
    End If
    GetFileList = res
End Function
' >>> ----------------- <<<
' >>> special functions <<<
' >>> ----------------- <<<
' >>> return a proper X position from a "x,y" string
Public Function GetPositionX(ctl As Object, pos As String) As Long
    GetPositionX = 0
    If InStr(pos, ",") > 0 Then
        GetPositionX = CInt(Left(pos, InStr(pos, ",") - 1))
        If GetPositionX < 0 Then GetPositionX = Application.Width + GetPositionX - ctl.Width
    End If
End Function
' >>> return a proper Y position from a "x,y" string
Public Function GetPositionY(ctl As Object, pos As String) As Long
    GetPositionY = 0
    If InStr(pos, ",") > 0 Then
        GetPositionY = CInt(Mid(pos, InStr(pos, ",") + 1))
        If GetPositionY < 0 Then GetPositionY = Application.Height + GetPositionY - ctl.Height
    End If
End Function
' >>> ------------------ <<<
' >>> autolock functions <<<
' >>> ------------------ <<<
' >>> init auto lock schedule
Public Sub InitAutoLock()
    Dim tx As String
    GBL_auto_lock = 0
    If Int(Range(GRN_def_auto_lock)) > 0 Then
        If Not ControlDefs.DefsCheckLock.Value Or Not ControlDefs.DefsCheckTabs.Value Or Not ControlDefs.DefsCheckPages.Value Or GBL_att_changed Or GBL_att_synced <> 100 Then
            tx = "00:" & Range(GRN_def_auto_lock) & ":00"
            GBL_auto_lock = (Now + TimeValue(tx))
        End If
    End If
End Sub
' >>> perform an auto file lock
Public Sub AutoLock()
    If Int(Range(GRN_def_auto_lock)) > 0 Then
        If Not ControlDefs.DefsCheckLock.Value Or Not ControlDefs.DefsCheckTabs.Value Or Not ControlDefs.DefsCheckPages.Value Then
            If Not ControlDefs.DefsCheckTabs.Value Then sheet1.Activate
            Range(GRN_def_development) = "לא" ' this locks everything
        End If
    End If
    GBL_do_lock = False
End Sub
' >>> ------------------ <<<
' >>> autosync functions <<<
' >>> ------------------ <<<
' >>> init auto lock schedule
Public Sub InitAutoSync(Optional redo As Integer = 0)
    Dim tx As String
    GBL_auto_sync = 0
    If Int(Range(GRN_def_auto_sync)) > 0 Then
        tx = "00:" & Range(GRN_def_auto_sync) & ":00"
        If redo > 0 Then tx = "00:" & redo & ":00"
        GBL_auto_sync = (Now + TimeValue(tx))
    End If
End Sub
' >>> perform an auto cloud sync
Public Sub DoAutoSync()
    GBL_auto_sync = 0
    DialogCloud.AutoSync ' issue an auto sync
    If GBL_auto_sync = 0 Then InitAutoSync ' set next auto sync unless redo
    GBL_do_sync = False
End Sub
' >>> ----------------------- <<<
' >>> version check functions <<<
' >>> ----------------------- <<<
' >>> init version check schedule
Public Sub InitVersionCheck(Optional redo As Integer = 0)
    Dim tx As String
    If GBL_auto_ver = 0 Or redo > 0 Or GBL_auto_ver > (Now + TimeValue("00:10:00")) Then
        GBL_auto_ver = 0
        If Int(Range(GRN_def_ver_check)) > 0 Then
            tx = "00:" & Range(GRN_def_ver_check) & ":00"
            If redo > 0 Then tx = "00:" & redo & ":00"
            GBL_auto_ver = (Now + TimeValue(tx))
        End If
    End If
End Sub
' >>> perform a version check
Public Sub DoVersionCheck()
    GBL_auto_ver = 0
    If Range(GRN_def_cloud_status) = CN_yes Then PanelVersion.DoVerCheck
    If GBL_auto_ver = 0 Then InitVersionCheck ' set next auto sync unless redo
    GBL_do_ver = False
End Sub
' >>> ------------------------- <<<
' >>> scheduled timer functions <<<
' >>> ------------------------- <<<
' >>> activate scheduled timer
Public Sub ActivateScheduledTimer()
    On Error Resume Next
    DeactivateScheduledTimer
    GBL_scheduled_timer = (Now + TimeValue(CN_timer_tick))
    Application.OnTime GBL_scheduled_timer, "ScheduledTimerTick"
End Sub
' >>> deactivate scheduled timer
Public Sub DeactivateScheduledTimer()
    On Error Resume Next
    If GBL_scheduled_timer > 0 Then
        Application.OnTime GBL_scheduled_timer, "ScheduledTimerTick", , False
        GBL_scheduled_timer = 0
    End If
End Sub
' >>> perform a scheduled timer function
Public Sub ScheduledTimerTick()
    ActivateScheduledTimer
' check for version check time
    If GBL_auto_ver > 0 And Now > GBL_auto_ver Then
        GBL_auto_ver = 0
        If IsFocus() Then
            DoVersionCheck
        Else
            GBL_do_ver = True
        End If
    End If
' check for auto lock time
    If GBL_auto_lock > 0 And Now > GBL_auto_lock Then
        GBL_auto_lock = 0
        If IsFocus() Then
            AutoLock
        Else
            GBL_do_lock = True
        End If
    End If
' check for auto synnc time
    If GBL_auto_sync > 0 And Now > GBL_auto_sync Then
        GBL_auto_sync = 0
        If IsFocus() Then
            DoAutoSync
        Else
            GBL_do_sync = True
        End If
    End If
End Sub
' >>> --------------- <<<
' >>> cloud functions <<<
' >>> --------------- <<<
' >>> get an item from cloud storage
Public Function GetCloudItem(itm As String) As String
    Dim url As String, res As String
    url = Trim(Range(GRN_def_cloud_store).Text) & "?item=" + itm + "&data=&hash=" & SignStr("")
    res = DoCloudTask(url)
    If Left(res, 1) = """" Then
        GetCloudItem = DecStr2(res)
    Else
        GetCloudItem = "*" & res
    End If
End Function
' >>> store an item in cloud storage
Public Function SetCloudItem(itm As String, str As String) As String
    Dim url As String
    url = Trim(Range(GRN_def_cloud_store).Text) & "?item=" + itm + "&data=" + EncStr2(str) + "&hash=" & SignStr(str)
    SetCloudItem = DoCloudTask(url)
End Function
' >>> get file version info from cloud storage
Public Function GetCloudVer() As String
    Dim url As String
    Dim str As String
    GetCloudVer = ""
    If Range(GRN_def_cloud_status) = CN_yes Then
        str = "{""do"":""get"",""user"":""" + FixDoubleQuote(GBL_current_user) + """}"
        url = Trim(Range(GRN_def_cloud_store).Text) & "?item=ver&data=" + EncStr2(str) + "&hash=" & SignStr(str)
        GetCloudVer = DoCloudTask(url)
    End If
End Function
' >>> set file version info in cloud storage
Public Function SetCloudVer(force As Boolean) As String
    Dim url As String
    Dim str As String
    Dim ver As String
    Dim ts As String
    Dim frc As String
    SetCloudVer = ""
    If Range(GRN_def_cloud_status) = CN_yes Then
        frc = IIf(force, "force", "set")
        ts = Format(Now, "dd/mm/yyyy hh:mm")
        ver = Range(GRN_def_data_ver).Text
' *** old    str = "{""do"":""set"",""ts"":""" + ts + """,""date"":""" + GBL_file_date + """,""time"":""" + GBL_file_ver + """,""ver"":""" + ver + """,""user"":""" + FixDoubleQuote(GBL_current_user) + """}"
        str = "{""do"":""" + frc + """,""ts"":""" + ts + """,""date"":""" + "0000_00_00" + """,""time"":""" + "000" + """,""ver"":""" + ver + """,""user"":""" + FixDoubleQuote(GBL_current_user) + """}"
        url = Trim(Range(GRN_def_cloud_store).Text) & "?item=ver&data=" + EncStr2(str) + "&hash=" & SignStr(str)
        SetCloudVer = DoCloudTask(url)
    End If
End Function
' >>> remove current user active mark from cloud storage
Public Function ExitCloudVer() As String
    Dim url As String
    Dim str As String
    ExitCloudVer = ""
    If Range(GRN_def_cloud_status) = CN_yes Then
        str = "{""do"":""exit"",""user"":""" + FixDoubleQuote(GBL_current_user) + """}"
        url = Trim(Range(GRN_def_cloud_store).Text) & "?item=ver&data=" + EncStr2(str) + "&hash=" & SignStr(str)
        ExitCloudVer = DoCloudTask(url, 300)
    End If
End Function
' >>> cloud communication
Public Function DoCloudTask(url As String, Optional tmo As Integer = 0) As String
    Dim res As String
    If xVerCheckHttp Is Nothing Then initVerCheckHttp
    xVerCheckHttp.Cancel
    xVerCheckHttp.TimeOut = Range(GRN_def_cloud_timeout)
    If tmo > 0 Then xVerCheckHttp.TimeOut = tmo
    xVerCheckHttp.Fetch url, True
    While xVerCheckHttp.Status = "working"
        WaitMillisec 250
    Wend
    If xVerCheckHttp.Success Then
        res = xVerCheckHttp.Response
        If InStr(res, "Failed Authentication") > 0 Then res = "שגיאת אימות"
        If InStr(res, "Item Not Found") > 0 Then res = "פריט לא נמצא"
        If InStr(res, "Finished") > 0 Then res = ""
    Else
        PanelVersion.ResetMsg
        If xVerCheckHttp.Error = "Canceled" Then
            res = "פעולה בוטלה"
        Else
            If InStr(xVerCheckHttp.Error, "resolved") > 0 Then
                res = "לא ניתן להתחבר לאינטרנט"
            Else
                If InStr(xVerCheckHttp.Error, "timed out") > 0 Then
                    res = "תם הזמן לפעולת ענן"
                Else
                    res = xVerCheckHttp.Error
                End If
            End If
        End If
    End If
    xVerCheckHttp.Cancel
    DoCloudTask = res
End Function
' >>> wait for # milliseconds
Public Sub WaitMillisec(n As Integer)
    Dim tm As Single
    tm = Timer() + n / 1000
    While Timer() < tm
        DoEvents
    Wend
End Sub
' >>> save cloud version
Public Sub SaveCloudVersion(force As Boolean)
    If Range(GRN_def_cloud_status) = CN_yes Then
        If Range(GRN_def_cloud_save) = CN_yes Then
            If GBL_file_is_latest > 0 Or force Then

                Dim sht As Worksheet
                Set sht = Application.ActiveSheet
                sheet5.Activate

                UpdatesOff
                Range(GRN_def_data_ver).Value = Range(GRN_def_data_ver).Value + 49
                PanelSave.ShowMsg "מעדכן גרסה בענן ...", 20
                If PanelVersion.DoVerSave(force) <> "" Then
                    Range(GRN_def_data_ver).Value = Range(GRN_def_data_ver).Value - 49
                    GBL_file_is_latest = -1
                    PanelSave.ShowMsg "הפעולה נכשלה !!!", 20, "err"
                    WaitMillisec 2500
                Else
                    PanelSave.ShowMsg "בוצע בהצלחה.", 100
                    GBL_file_is_latest = 1
                    DialogSave.OptionForce.Value = False
                End If
                WaitMillisec 500
                If PanelSave.Visible Then
                    PanelSave.hide
                End If
                UpdatesOn

                sht.Activate

            End If
        End If
    End If
End Sub


Attribute VB_Name = "DialogCloud"
Attribute VB_Base = "0{8EFEFFA2-2E41-4944-B827-539FB6892E4B}{5C998230-1D9E-4EC3-9D0A-737270D417FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> url async fetc object
Private xHttp As UrlFetch
' >>> private variables
Private initialized As Boolean
Private Busy As Boolean
Private stopped As Boolean
Private Cycles As Integer
' >>> program initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    Set xHttp = New UrlFetch
    xHttp.TimeOut = 15000
    Reset
    initialized = True
End Sub
' >>> panel activation
Private Sub UserForm_Activate()
    Busy = True
End Sub
' >>> panel deactivation
Private Sub UserForm_Deactivate()
    Busy = False
End Sub
' >>> record the window position
Private Sub UserForm_Layout()
' stub
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Cancel = True
End Sub
' >>> stop current operation
Private Sub BTstop_Click()
    xHttp.Cancel
    stopped = True
End Sub
' >>> reset everything
Private Sub Reset()
    xHttp.Cancel
    ProgBar 0
    BTstop.Enabled = True
    Text.Text = ""
    SetIcon ""
    stopped = False
End Sub
' >>> finish current task
Private Sub Finish()
    xHttp.Cancel
    Me.hide
End Sub
' >>> control the progress bar
Private Sub ProgBar(p As Integer)
    Me.ProgressBar.Width = 108 / 100 * p
    Me.ProgressText.Caption = p & "%"
End Sub
' >>> internal wait function maintaining visuals
Private Function WaitFor() As Boolean
    Static img As Integer
    Dim tm As Single
    If img = Empty Then img = 1
    tm = Timer()
    SetIcon img
    While (Timer() - tm) < 0.1
        DoEvents
    Wend
    img = IIf(img >= 6, 1, img + 1)
    WaitFor = xHttp.isRunning
End Function
' >>> show success or failure message and wait for a moment
Private Sub FinishStatus(stt As String, Optional dur As Integer = 2)
    Dim tm As Single
    tm = Timer() + dur
    ProgBar 100
    BTstop.Enabled = False
    SetIcon stt
    AddText (vbCrLf & IIf(stt = "ok", "הפעולה הושלמה בהצלחה.", IIf(stt = "can", "הפעולה הופסקה !", "הפעולה נכשלה !")))
    While Timer() < tm
        DoEvents
    Wend
End Sub
' >>> add a text message
Private Sub AddText(txt As String)
    Text.Text = Text.Text & vbCrLf & txt
    Text.SetFocus
    TextX.SetFocus
End Sub
' >>> control which icon is shown
Private Sub SetIcon(img As Variant)
    Dim x As String
    x = LCase(CStr(img))
    Me.ImgOK.Visible = (x = "ok")
    Me.ImgERR.Visible = (x = "err" Or x = "can")
    Me.Img1.Visible = (x = "1")
    Me.Img2.Visible = (x = "2")
    Me.Img3.Visible = (x = "3")
    Me.Img4.Visible = (x = "4")
    Me.Img5.Visible = (x = "5")
    Me.Img6.Visible = (x = "6")
End Sub
' >>> perform a single sync cycle
Private Function SyncCycle(c As Integer) As String
    Dim rsl As String, upd As String
    rsl = SyncImport()
    Me.Repaint
    If rsl <> "err" And rsl <> "can" Then
        upd = SyncCheck(rsl)
        Select Case upd
            Case "fri"
                AddText ("אי אפשר לבצע סנכרון לפי שבוצעה סגירה של יום שישי הקודם !")
                rsl = "err"
            Case ""
                rsl = "ok"
            Case Else
                rsl = SyncExport(upd)
        End Select
    End If
    SyncCycle = rsl
End Function
' >>> import data from cloud
Private Function SyncImport() As String
    Dim url As String
    url = Trim(Range(GRN_def_att_app_url).Text) & "?job=get&pass=sys&data=123&hash=" & SignStr("123")
    xHttp.Fetch url, True
    While xHttp.Status = "working"
        WaitFor
    Wend
    If xHttp.Success Then
        SyncImport = xHttp.Response
    Else
        SyncImport = IIf(xHttp.Error = "Canceled", "can", "err")
    End If
End Function
' >>> check cloud data and return an update string
Private Function SyncCheck(str As String) As String
    Dim upd As String, fdt As String
    UpdatesOff
    fdt = StrBetween(str, "dt" & Qstr(":"), Qstr(",") & "cls")
    fdt = Right(fdt, 2) & Mid(fdt, 5, 4) & Left(fdt, 4)
    If fdt = "" Or fdt = Format(GBL_att_friday, "dd/mm/yyyy") Then
        upd = "{"
        upd = ProcessClasses(StrBetween(str, Qstr("cls") & ":[", "]," & Qstr("fri")), upd, 5500)
        upd = ProcessKids(StrBetween(str, Qstr("fri") & ":[", "]}"), upd, 5500)
        upd = ProcessStats(upd, 5500)
        upd = upd & "}"
        SyncCheck = FixUpdateString(upd)
    Else
        SyncCheck = "fri"
    End If
    UpdatesOn
End Function
' >>> export data to cloud
Private Function SyncExport(str As String) As String
    Dim url As String
    url = Trim(Range(GRN_def_att_app_url).Text) & "?job=upd&pass=sys&data=" & EncStr2(str) & "&hash=" & SignStr(str)
'Worksheets("הגדרות").Range("C2") = url ' *******
'Worksheets("הגדרות").Range("C4") = str ' *********************
'Worksheets("הגדרות").Range("C6") = Len(url)
'SyncExport = "ok" ' ****************
'Exit Function ' *************
    xHttp.Fetch url, True
    While xHttp.Status = "working"
        WaitFor
    Wend
    If xHttp.Success Then
        SyncExport = ""
        If InStr(xHttp.Response, ">SyntaxError:") > 0 Then SyncExport = "syn"
    Else
        SyncExport = IIf(xHttp.Error = "Canceled", "can", "err")
    End If
End Function
' >>> parse a single data field
Private Function ParseField(s As String, k As String, t As String) As Variant
    Dim x As String
    Dim p As Integer
    x = chr(34) & k & chr(34) & ":"
    p = InStr(s, x)
    If p > 0 Then
        x = Mid(s, p + 4, Len(s))
        If Left(x, 1) = chr(34) Then
            p = InStr(2, x, chr(34))
            x = Mid(x, 2, p - 2)
        Else
            p = InStr(x, ",")
            If p = 0 Then p = Len(x) + 1
            x = Left(x, p - 1)
        End If
        If t = "e" Then x = DecStr2(x)
        ParseField = IIf(t = "i", ConvLong(x, 0), x)
    Else
        ParseField = IIf(t = "i", 0, "")
    End If
End Function
' >>> fix a string by removing reserved characters from it
Private Function SyncFixStr(s As String) As String
    Dim x As String
    x = Replace(s, "{", "[")
    x = Replace(s, "}", "]")
    x = Replace(s, chr(34), "'")
    x = Replace(s, ",", "-")
    x = Replace(s, "|", ":")
    SyncFixStr = Trim(x)
End Function
' >>> returns the given string in "quotes"
Private Function Qstr(s As String) As String
    Qstr = chr(34) & s & chr(34)
End Function
' >>> fix update string to "" if its should be empty
Private Function FixUpdateString(upd As String) As String
    Dim p1 As Long, p2 As Long
    p1 = InStr(upd, Qstr("upd") & ":[]},")
    p2 = InStr(p1 + 1, upd, Qstr("upd") & ":[]},")
    If p1 > 1 And p2 > 1 Then
        upd = ""
    End If
    FixUpdateString = upd
End Function
' >>> set the progress bar according to cycle
Private Function CalcCycles(pr, upd)
    Static prg As Integer
    Static inc As Integer
    If Cycles = 0 Then
        inc = pr
        prg = 0
    End If
    If inc > 0 Then
        prg = (99 * (inc - pr) / inc)
    Else
        prg = 99
    End If
    If prg > 99 Then prg = 99
    ProgBar (prg)
    Cycles = Cycles + 1
End Function
' >>> trim hours and grades off a class name
Private Function trimClassName(nm As String) As String
    Dim no As String
    no = Range(GRN_def_no_participation).Text
    trimClassName = nm
    If nm <> no Then trimClassName = TrimStr(nm, 2)
End Function
' >>> -------------------------- <<<
' >>> stats processing functions <<<
' >>> -------------------------- <<<
' >>> add a {stats} object to the update string
Private Function ProcessStats(upd As String, lmt As Integer) As String
    Dim ts As Worksheet
    upd = upd & "," & Qstr("stt") & ":{"
    If Len(upd) < lmt Then
        upd = upd & Qstr("tot") & ":" & Qstr(Worksheets("כיתות").Range("stt_tot_kids"))
    End If
    ProcessStats = upd & "}"
End Function
' >>> ---------------------------- <<<
' >>> classes processing functions <<<
' >>> ---------------------------- <<<
' >>> process classes string and return an update string
Private Function ProcessClasses(str As String, upd As String, lmt As Integer) As String
    Dim ts As Worksheet, pr As Integer, usd As String
    Set ts = MakeTempClassesSheet()
    Call BuildTempClassesList(ts, str)
    pr = ProcessClassesList(ts)
    If pr < 0 Then AddText ("נכשלה הוספת חוג !")
    upd = upd & Qstr("cls") & ":{"
    usd = BuildClassesUsedString(ts) & ","
    upd = upd & usd
    upd = BuildClassesUpdateString(ts, upd, lmt)
    ProcessClasses = upd & "}"
    DelTempSheet ts
End Function
' >>> make a temp sheet for classes processing
Private Function MakeTempClassesSheet() As Worksheet
    Dim ts As Worksheet, old As Worksheet
    Set old = Application.ActiveSheet
    Set ts = MakeTempSheet("temp_sheet_1")
    ts.Visible = xlSheetHidden
    ts.Cells(1) = "crtl"
    ts.Cells(2) = "row"
    ts.Cells(3) = "date"
    ts.Cells(4) = "used"
    ts.Cells(5) = "class"
    ts.Cells(6) = "hour"
    ts.Cells(7) = "hours"
    ts.Cells(8) = "void"
    old.Activate
    Set MakeTempClassesSheet = ts
End Function
' >>> parse a class string into a temp sheet
Private Function BuildTempClassesList(ts As Worksheet, str As String) As Integer
    Dim x As String, i As Integer, c As Integer
    c = 0
    Do While Len(str) > 0
        x = Mid(str, 2, InStr(str, "}") - 2)
        str = Mid(str, InStr(str, "}") + 2, Len(str))
        i = ParseField(x, "i", "i")
        ts.Cells(i + 2, 2) = i
        ts.Cells(i + 2, 3) = ParseField(x, "d", "s")
        ts.Cells(i + 2, 4) = ParseField(x, "v", "s")
        ts.Cells(i + 2, 5) = ParseField(x, "c", "e")
        ts.Cells(i + 2, 6) = ParseField(x, "l", "s")
        ts.Cells(i + 2, 7) = ParseField(x, "h", "s")
        ts.Cells(i + 2, 8) = ParseField(x, "u", "i")
        c = c + 1
    Loop
    BuildTempClassesList = c
End Function
' >>> process the classes list and decide what to sync
Private Function ProcessClassesList(ts As Worksheet) As Integer
    Dim clc As Integer, cll As Integer, cl1 As Integer, cl2 As Integer, cl3 As Integer, cl4 As Integer
    Dim cnm As String, cln As String, chr As String
    Dim rng As Range, row As Range
    Dim pr As Integer, x As String
    Dim arr As Collection
    Set arr = New Collection
    Set rng = Range(GRN_cls_all_classes)
    clc = Range(GRN_cls_all_classes).Column
    cll = Range(GRN_cls_length).Column
    cl1 = Range(GRN_cls_count_1).Column
    cl2 = Range(GRN_cls_count_2).Column
    cl3 = Range(GRN_cls_count_3).Column
    cl4 = Range(GRN_cls_count_4).Column
    pr = 0
    For Each row In rng.EntireRow
        cnm = SyncFixStr(row.Cells(clc))
        If cnm <> "" Then
            cln = Trim(row.Cells(cll))
            chr = IIf(Trim(row.Cells(cl1)) <> "", "1", "") & IIf(Trim(row.Cells(cl2)) <> "", "2", "") & IIf(Trim(row.Cells(cl3)) <> "", "3", "") & IIf(Trim(row.Cells(cl4)) <> "", "4", "")
            x = CheckClassStatus(ts, cnm, cln, chr)
            If x = "n" Then arr.add Array(cnm, cln, chr)
            If x = "u" Or x = "n" Then pr = pr + 1
        End If
    Next
    pr = pr + CleanClassesList(ts)
    ProcessClassesList = pr
    If arr.count > 0 Then
        If AddNewClasses(ts, arr) < 0 Then ProcessClassesList = -1
    End If
End Function
' >>> build the classes used string
Private Function BuildClassesUsedString(ts As Worksheet) As String
    Dim rng As Range, row As Range, cnt As Integer
    Dim upd As String
    Set rng = ts.Range("A2:H50")
    upd = Qstr("usd") & ":["
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(1) <> "e" And row.Cells(1) <> "-" Then
            upd = upd & IIf(cnt > 0, ",", "")
            upd = upd & CStr(row.Cells(2))
            cnt = cnt + 1
        End If
    Next
    BuildClassesUsedString = upd & "]"
End Function
' >>> build the classes update string
Private Function BuildClassesUpdateString(ts As Worksheet, upd As String, lmt As Integer) As String
    Dim rng As Range, row As Range, cnt As Integer
    Set rng = ts.Range("A2:H50")
    upd = upd & Qstr("upd") & ":["
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(1) <> "=" And row.Cells(1) <> "-" And (row.Cells(1) <> "" Or row.Cells(4) = "y") Then
            upd = upd & IIf(cnt > 0, ",", "")
            upd = upd & "[" & CStr(row.Cells(2))
            upd = upd & "," & Qstr(CStr(row.Cells(1)))
            upd = upd & "," & Qstr(CStr(row.Cells(5)))
            upd = upd & "," & Qstr(CStr(row.Cells(6)))
            upd = upd & "," & Qstr(CStr(row.Cells(7)))
            upd = upd & "]"
            cnt = cnt + 1
        End If
        If Len(upd) > lmt Then Exit For
    Next
    BuildClassesUpdateString = upd & "]"
End Function
' >>> check classes and update as necessary
Private Function CheckClassStatus(ts As Worksheet, nm As String, ln As String, hr As String) As String
    Dim rng As Range, row As Range
    Set rng = ts.Range("A2:H50")
    For Each row In rng.Rows
        If row.Cells(5) = nm Then
            If row.Cells(4) = "y" And row.Cells(6) = ln And row.Cells(7) = hr Then
                CheckClassStatus = "="
                row.Cells(1) = "="
            Else
                CheckClassStatus = "u"
                row.Cells(1) = "u"
                row.Cells(4) = "y"
                row.Cells(6) = ln
                row.Cells(7) = hr
            End If
            Exit Function
        End If
    Next
    CheckClassStatus = "n"
End Function
' >>> mark empty records for deletion
Private Function CleanClassesList(ts As Worksheet) As Integer
    Dim rng As Range, row As Range, cnt As Integer, max As Long
    Set rng = ts.Range("A2:H50")
    max = Application.WorksheetFunction.max(Intersect(rng, ts.Range("C:C")))
' ***   If max > 100 Then max = max - 31
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(1) = "" Then
            If row.Cells(5) <> "" Then
                If row.Cells(8) <> 1 Or CLng(row.Cells(3)) < max Then
                    row.Cells(1) = "e"
                    cnt = cnt + 1
                End If
            Else
                row.Cells(1) = "-"
            End If
        End If
    Next
    CleanClassesList = cnt
End Function
' >>> add missing classes to list
Private Function AddNewClasses(ts As Worksheet, ar As Collection) As Integer
    Dim cnt As Integer, i As Integer
    cnt = 0
    For i = 1 To ar.count
        If Not AddNewClass(ts, ar(i)(0), ar(i)(1), ar(i)(2)) Then
            AddNewClasses = -1
            Exit Function
        End If
    Next i
    AddNewClasses = cnt
End Function
' >>> add a class to list
Private Function AddNewClass(ts As Worksheet, ByVal nm As String, ByVal ln As String, ByVal hr As String) As Boolean
    Dim rng As Range, row As Range, pos As Range
    AddNewClass = False
    Set rng = ts.Range("A2:H50")
    Set pos = Nothing
    For Each row In rng.Rows
        If row.Cells(1) = "e" Then
            Set pos = row
            Exit For
        End If
    Next
    If pos Is Nothing Then
        For Each row In rng.Rows
            If row.Cells(1) = "-" Then
                Set pos = row
                Exit For
            End If
        Next
    End If
    If pos.Cells(1) = "e" Or pos.Cells(1) = "-" Then
        pos.Cells(1) = "n"
        pos.Cells(4) = "y"
        pos.Cells(5) = nm
        pos.Cells(6) = ln
        pos.Cells(7) = hr
        AddNewClass = True
    End If
End Function
' >>> ------------------------- <<<
' >>> kids processing functions <<<
' >>> ------------------------- <<<
' >>> process kids string and return an update string
Private Function ProcessKids(str As String, upd As String, lmt As Integer) As String
    Dim ts As Worksheet, pr As Integer, cnt As Integer
    Set ts = MakeTempKidsSheet()
    Call BuildTempKidsList(ts, str)
    pr = ProcessKidsList(ts)
    If pr < 0 Then AddText ("נכשלה הוספת ילד !")
    cnt = CountKidsRecords(ts)
    GBL_att_synced = CInt((cnt - pr) / cnt * 100)
    upd = upd & "," & Qstr("fri") & ":{"
    upd = upd & BuildKidsDateMarker() & ","
    upd = BuildKidsUpdateString(ts, upd, lmt)
    Call CalcCycles(pr, upd)
    ProcessKids = upd & "}"
    DelTempSheet ts
End Function
' >>> make a temp sheet for kids processing
Private Function MakeTempKidsSheet() As Worksheet
    Dim ts As Worksheet, old As Worksheet
    Set old = Application.ActiveSheet
    Set ts = MakeTempSheet("temp_sheet_2")
    ts.Visible = xlSheetHidden
    ts.Cells(1) = "crtl"
    ts.Cells(2) = "row"
    ts.Cells(3) = "type"
    ts.Cells(4) = "date"
    ts.Cells(5) = "id"
    ts.Cells(6) = "grade"
    ts.Cells(7) = "family"
    ts.Cells(8) = "private"
    ts.Cells(9) = "hour"
    ts.Cells(10) = "class"
    ts.Cells(11) = "double"
    ts.Cells(12) = "sensitivity"
    ts.Cells(13) = "void"
    old.Activate
    Set MakeTempKidsSheet = ts
End Function
' >>> parse a kids string into a temp sheet
Private Function BuildTempKidsList(ts As Worksheet, str As String) As Integer
    Dim x As String, i As Integer, c As Integer
    c = 0
    Do While Len(str) > 0
        x = Mid(str, 2, InStr(str, "}") - 2)
        str = Mid(str, InStr(str, "}") + 2, Len(str))
        i = ParseField(x, "i", "i")
        ts.Cells(i + 2, 2) = i
        ts.Cells(i + 2, 3) = ParseField(x, "t", "e")
        ts.Cells(i + 2, 4) = ParseField(x, "d", "s")
        ts.Cells(i + 2, 5) = ParseField(x, "z", "s")
        ts.Cells(i + 2, 6) = ParseField(x, "g", "e")
        ts.Cells(i + 2, 7) = ParseField(x, "f", "e")
        ts.Cells(i + 2, 8) = ParseField(x, "p", "e")
        ts.Cells(i + 2, 9) = ParseField(x, "h", "s")
        ts.Cells(i + 2, 10) = ParseField(x, "c", "e")
        ts.Cells(i + 2, 11) = ParseField(x, "b", "s")
        ts.Cells(i + 2, 12) = ParseField(x, "s", "e")
        ts.Cells(i + 2, 13) = ParseField(x, "u", "s")
        c = c + 1
    Loop
    BuildTempKidsList = c
End Function
' >>> count the number of kids records
Private Function CountKidsRecords(ts As Worksheet) As Integer
    Dim rng As Range, row As Range, cnt As Integer
    Set rng = ts.Range("A2:M3000")
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(3) <> "" Then cnt = cnt + 1
    Next
    CountKidsRecords = cnt
End Function
' >>> process the kids list and decide what to sync
Private Function ProcessKidsList(ts As Worksheet) As Integer
    Dim c_id As Integer, c_gr As Integer, c_nl As Integer, c_nf As Integer, c_c1 As Integer, c_c2 As Integer, c_c3 As Integer, c_c4 As Integer, c_sn As Integer
    Dim x_id As String, x_gr As String, x_nl As String, x_nf As String, x_c1 As String, x_c2 As String, x_c3 As String, x_c4 As String, x_sn As String
    Dim pr As Integer, x As String, xx As String, y As String, yy As String, st_id As String, st_cl As String
    Dim rng As Range, row As Range, idx As String
    Dim arr As Collection
    Set arr = New Collection
    Set rng = sheet1.Range(GRN_ppl_all_data)
    idx = BuildKidsIndexString(ts)
    c_id = Range(GRN_ppl_id).Column
    c_gr = Range(GRN_ppl_grade).Column
    c_nl = Range(GRN_ppl_name_last).Column
    c_nf = Range(GRN_ppl_name_first).Column
    c_c1 = Range(GRN_ppl_class_1).Column
    c_c2 = Range(GRN_ppl_class_2).Column
    c_c3 = Range(GRN_ppl_class_3).Column
    c_c4 = Range(GRN_ppl_class_4).Column
    c_sn = Range(GRN_ppl_sens).Column
    st_id = ""
    st_cl = ""
    pr = AddDayRecord(ts, arr, GetIndex(idx, "friday"))
    For Each row In rng.EntireRow
        x_id = Trim(row.Cells(c_id))
        x_gr = Trim(row.Cells(c_gr))
        x_nl = Trim(row.Cells(c_nl))
        x_nf = Trim(row.Cells(c_nf))
        x_c1 = Trim(row.Cells(c_c1))
        x_c2 = Trim(row.Cells(c_c2))
        x_c3 = Trim(row.Cells(c_c3))
        x_c4 = Trim(row.Cells(c_c4))
        x_sn = FixDoubleQuote(Trim(row.Cells(c_sn)))
        If x_id <> "" And x_gr <> "" And x_nl <> "" And x_nf <> "" And (x_c1 & x_c2 & x_c3 & x_c4) <> "" Then
            If InStr(st_id, x_id & ",") = 0 Then
                pr = pr + AddKidRecord(ts, arr, GetIndex(idx, x_id & "/0"), x_id, x_gr, x_nl, x_nf, CalcKidHours(x_c1, x_c2, x_c3, x_c4), x_sn)
                x = IIf(Right(x_c1, 2) = "12" And x_c2 = "", "y", "")
                If x_c1 <> "" Then
                    pr = pr + AddAttRecord(ts, arr, GetIndex(idx, x_id & "/1"), x_id, x_gr, x_nl, x_nf, "1", trimClassName(x_c1), x)
                    If InStr(st_cl, x_c1 & "|") = 0 Then
                        pr = pr + AddClsRecord(ts, arr, GetIndex(idx, trimClassName(x_c1) & "/1"), "1", trimClassName(x_c1), IIf(Right(x_c1, 2) = "12", "y", ""))
                        st_cl = st_cl & x_c1 & "|"
                    End If
                End If
                If x_c2 <> "" Or x = "y" Then
                    xx = IIf(x_c2 <> "", x_c2, x_c1)
' solve shift problem on some stats, hopefully doesn't break anything.
        x = IIf(x = "y" Or Right(x_c2, 2) = "12", "y", "")
                    pr = pr + AddAttRecord(ts, arr, GetIndex(idx, x_id & "/2"), x_id, x_gr, x_nl, x_nf, "2", trimClassName(xx), x)
                    y = IIf(Right(x_c2, 2) = "12", "y", "")
                    yy = IIf(y = "y", "1", "2")
                    If InStr(st_cl, x_c2 & "|") = 0 Then
                        pr = pr + AddClsRecord(ts, arr, GetIndex(idx, trimClassName(x_c2) & "/" + yy), yy, trimClassName(x_c2), y)
                        st_cl = st_cl & x_c2 & "|"
                    End If
                End If
                x = IIf(Right(x_c3, 2) = "34" And x_c4 = "", "y", "")
                If x_c3 <> "" Then
                    pr = pr + AddAttRecord(ts, arr, GetIndex(idx, x_id & "/3"), x_id, x_gr, x_nl, x_nf, "3", trimClassName(x_c3), x)
                    If InStr(st_cl, x_c3 & "|") = 0 Then
                        pr = pr + AddClsRecord(ts, arr, GetIndex(idx, trimClassName(x_c3) & "/3"), "3", trimClassName(x_c3), IIf(Right(x_c3, 2) = "34", "y", ""))
                        st_cl = st_cl & x_c3 & "|"
                    End If
                End If
                If x_c4 <> "" Or x = "y" Then
                    xx = IIf(x_c4 <> "", x_c4, x_c3)
' solve shift problem on some stats, hopefully doesn't break anything.
        x = IIf(x = "y" Or Right(x_c4, 2) = "34", "y", "")
                    pr = pr + AddAttRecord(ts, arr, GetIndex(idx, x_id & "/4"), x_id, x_gr, x_nl, x_nf, "4", trimClassName(xx), x)
                    y = IIf(Right(x_c4, 2) = "34", "y", "")
                    yy = IIf(y = "y", "3", "4")
                    If InStr(st_cl, x_c4 & "|") = 0 Then
                        pr = pr + AddClsRecord(ts, arr, GetIndex(idx, trimClassName(x_c4) & "/" + yy), yy, trimClassName(x_c4), y)
                        st_cl = st_cl & x_c4 & "|"
                    End If
                End If
                st_id = st_id & x_id & ","
            End If
        End If
    Next
    pr = pr + CleanKidsList(ts)
    ProcessKidsList = pr
    If arr.count > 0 Then
        If AddNewKidsRecords(ts, arr) < 0 Then ProcessKidsList = -1
    End If
End Function
' >>> add/update a [attendance] record
Private Function AddAttRecord(ts As Worksheet, ByRef arr As Collection, row As Integer, xid As String, xgr As String, xnl As String, xnf As String, xhr As String, xcl As String, xdb As String) As Integer
    Dim dt As String, typ As String
    Dim s1 As String, s2 As String
    Dim cl As Collection
    Dim zdb As String
    AddAttRecord = 0
    dt = Format(GBL_att_friday, "dd/mm/yyyy")
    typ = "נכח"
    zdb = IIf(xdb = "y", IIf(xhr = "2", "1", IIf(xhr = "4", "3", xhr)), xhr)
    If row > 0 Then
        If ts.Cells(row, 1) = "" Then
            s1 = ts.Cells(row, 3) & ts.Cells(row, 4) & ts.Cells(row, 5) & ts.Cells(row, 6) & ts.Cells(row, 7) & ts.Cells(row, 8) & ts.Cells(row, 9) & ts.Cells(row, 10) & ts.Cells(row, 11)
            s2 = typ & dt & xid & xgr & xnl & xnf & xhr & xcl & zdb
            If s1 <> s2 Then
                ts.Cells(row, 1) = "u"
                ts.Cells(row, 3) = typ
                ts.Cells(row, 4) = dt
                ts.Cells(row, 5) = xid ' id
                ts.Cells(row, 6) = xgr ' grade
                ts.Cells(row, 7) = xnl ' last name
                ts.Cells(row, 8) = xnf ' first name
                ts.Cells(row, 9) = xhr ' hour
                ts.Cells(row, 10) = xcl ' class
                ts.Cells(row, 11) = zdb ' double
                ts.Cells(row, 12) = "" ' sensitivity
                AddAttRecord = 1
            Else
                ts.Cells(row, 1) = "="
            End If
        End If
    Else
        Set cl = New Collection
        cl.add typ, "t" ' type
        cl.add dt, "d" ' date
        cl.add xid, "z" ' id
        cl.add xgr, "g" ' grade
        cl.add xnl, "l" ' last name
        cl.add xnf, "f" ' first name
        cl.add xhr, "h" ' hour
        cl.add xcl, "c" ' class
        cl.add zdb, "b" ' double
        cl.add "", "s" ' sensitivity
        arr.add cl
        AddAttRecord = 1
    End If
End Function
' >>> returns a string describing the class hours a kid participate in
Private Function CalcKidHours(c1 As String, c2 As String, c3 As String, c4 As String) As String
    Dim hr As String, no As String
    no = Range(GRN_def_no_participation).Text
    hr = ""
    hr = hr & IIf(c1 <> "", IIf(c1 <> no, "1", "x"), "-")
    hr = hr & IIf((c2 <> "" Or Right(c1, 2) = "12"), IIf(c2 <> no, "2", "x"), "-")
    hr = hr & IIf(c3 <> "", IIf(c3 <> no, "3", "x"), "-")
    hr = hr & IIf((c4 <> "" Or Right(c3, 2) = "34"), IIf(c4 <> no, "4", "x"), "-")
    CalcKidHours = hr & "*"
End Function
' >>> add/update a [kids] record
Private Function AddKidRecord(ts As Worksheet, ByRef arr As Collection, row As Integer, xid As String, xgr As String, xnl As String, xnf As String, xhr As String, xsn As String) As Integer
    Dim dt As String, typ As String
    Dim s1 As String, s2 As String
    Dim cl As Collection
    AddKidRecord = 0
    dt = Format(GBL_att_friday, "dd/mm/yyyy")
    typ = "ילד"
    If row > 0 Then
        If ts.Cells(row, 1) = "" Then
            s1 = ts.Cells(row, 3) & ts.Cells(row, 4) & ts.Cells(row, 5) & ts.Cells(row, 6) & ts.Cells(row, 7) & ts.Cells(row, 8) & ts.Cells(row, 9) & ts.Cells(row, 12)
            s2 = typ & dt & xid & xgr & xnl & xnf & xhr & xsn
            If s1 <> s2 Then
                ts.Cells(row, 1) = "u"
                ts.Cells(row, 3) = typ
                ts.Cells(row, 4) = dt
                ts.Cells(row, 5) = xid ' id
                ts.Cells(row, 6) = xgr ' grade
                ts.Cells(row, 7) = xnl ' last name
                ts.Cells(row, 8) = xnf ' first name
                ts.Cells(row, 9) = xhr ' hour (special = hours participating)
                ts.Cells(row, 10) = "" ' class
                ts.Cells(row, 11) = "" ' double
                ts.Cells(row, 12) = xsn ' sensitivity
                AddKidRecord = 1
            Else
                ts.Cells(row, 1) = "="
            End If
        End If
    Else
        Set cl = New Collection
        cl.add typ, "t" ' type
        cl.add dt, "d" ' date
        cl.add xid, "z" ' id
        cl.add xgr, "g" ' grade
        cl.add xnl, "l" ' last name
        cl.add xnf, "f" ' first name
        cl.add xhr, "h" ' hour
        cl.add "", "c" ' class
        cl.add "", "b" ' double
        cl.add xsn, "s" ' sensitivity
        arr.add cl
        AddKidRecord = 1
    End If
End Function
' >>> add/update a [class] record
Private Function AddClsRecord(ts As Worksheet, ByRef arr As Collection, row As Integer, xhr As String, xcl As String, xdb As String) As Integer
    Dim dt As String, typ As String
    Dim s1 As String, s2 As String
    Dim cl As Collection
    AddClsRecord = 0
    dt = Format(GBL_att_friday, "dd/mm/yyyy")
    typ = "חוג"
    If row > 0 Then
        If ts.Cells(row, 1) = "" Then
            s1 = ts.Cells(row, 3) & ts.Cells(row, 4) & ts.Cells(row, 9) & ts.Cells(row, 10) & ts.Cells(row, 11)
            s2 = typ & dt & xhr & xcl & xdb
            If s1 <> s2 Then
                ts.Cells(row, 1) = "u"
                ts.Cells(row, 3) = typ
                ts.Cells(row, 4) = dt
                ts.Cells(row, 5) = "" ' id
                ts.Cells(row, 6) = "" ' grade
                ts.Cells(row, 7) = "" ' last name
                ts.Cells(row, 8) = "" ' first name
                ts.Cells(row, 9) = xhr ' hour
                ts.Cells(row, 10) = xcl ' class
                ts.Cells(row, 11) = xdb ' double
                ts.Cells(row, 12) = "" ' sensitivity
                AddClsRecord = 1
            Else
                ts.Cells(row, 1) = "="
            End If
        End If
    Else
        Set cl = New Collection
        cl.add typ, "t" ' type
        cl.add dt, "d" ' date
        cl.add "", "z" ' id
        cl.add "", "g" ' grade
        cl.add "", "l" ' last name
        cl.add "", "f" ' first name
        cl.add xhr, "h" ' hour
        cl.add xcl, "c" ' class
        cl.add xdb, "b" ' double
        cl.add "", "s" ' sensitivity
        arr.add cl
        AddClsRecord = 1
    End If
End Function
' >>> add/update a [friday] record
Private Function AddDayRecord(ts As Worksheet, ByRef arr As Collection, row As Integer) As Integer
    Dim dt As String, typ As String
    Dim s1 As String, s2 As String
    Dim cl As Collection
    AddDayRecord = 0
    dt = Format(GBL_att_friday, "dd/mm/yyyy")
    typ = "יום"
    If row > 0 Then
        If ts.Cells(row, 1) = "" Then
            s1 = ts.Cells(row, 3) & ts.Cells(row, 4)
            s2 = typ & dt
            If s1 <> s2 Then
                ts.Cells(row, 1) = "u"
                ts.Cells(row, 3) = typ
                ts.Cells(row, 4) = dt
                ts.Cells(row, 5) = "" ' id
                ts.Cells(row, 6) = "" ' grade
                ts.Cells(row, 7) = "" ' last name
                ts.Cells(row, 8) = "" ' first name
                ts.Cells(row, 9) = "" ' hour
                ts.Cells(row, 10) = "" ' class
                ts.Cells(row, 11) = "" ' double
                ts.Cells(row, 12) = "" ' sensitivity
                AddDayRecord = 1
            Else
                ts.Cells(row, 1) = "="
            End If
        End If
    Else
        Set cl = New Collection
        cl.add typ, "t" ' type
        cl.add dt, "d" ' date
        cl.add "", "z" ' id
        cl.add "", "g" ' grade
        cl.add "", "l" ' last name
        cl.add "", "f" ' first name
        cl.add "", "h" ' hour
        cl.add "", "c" ' class
        cl.add "", "b" ' double
        cl.add "", "s" ' sensitivity
        arr.add cl
        AddDayRecord = 1
    End If
End Function
' >>> build an index string of row numbers
Private Function BuildKidsIndexString(ts As Worksheet) As String
    Dim rng As Range, row As Range, idx As String
    Set rng = ts.Range("A2:M3000")
    idx = ""
    For Each row In rng.Rows
        Select Case row.Cells(3)
            Case "נכח" ' attendance - ID/HOUR:row,...
                Call UpdateIndexString(idx, row.Cells(5) & "/" & row.Cells(9), row.row)
            Case "ילד" ' kid        - ID/0:row,...
                Call UpdateIndexString(idx, row.Cells(5) & "/0", row.row)
            Case "חוג" ' class      - "CLASS/HOUR":row,...
                Call UpdateIndexString(idx, row.Cells(10) & "/" & row.Cells(9), row.row)
            Case "יום" ' day        - friday:row
                Call UpdateIndexString(idx, "friday", row.row)
        End Select
    Next
    BuildKidsIndexString = idx
End Function
' >>> update the kids index string
Private Function UpdateIndexString(ByRef str As String, idx As String, row As Integer)
    Dim i As Long ' fix for overflow 19/09/2021
    i = GetIndex(str, idx)
    If i < 1 Then
        str = str & idx & ":" & CStr(row) & ","
    End If
End Function
' >>> get the row numbers of given index or (0) for none
Private Function GetIndex(ByRef str As String, idx As String) As Integer
    Dim p As Long, x As String ' fix for overflow 19/09/2021
    GetIndex = 0
    x = idx & ":"
    p = InStr(str, x)
    If p > 0 Then
        x = Mid(str, p + Len(x), 9)
        p = InStr(x, ",")
        If p > 0 Then
            x = Left(x, InStr(x, ",") - 1)
            GetIndex = CInt(x)
        End If
    End If
End Function
' >>> build the kids date marker
Private Function BuildKidsDateMarker() As String
    BuildKidsDateMarker = Qstr("dt") & ":[" & year(GBL_att_friday) & "," & Month(GBL_att_friday) & "," & day(GBL_att_friday) & "]"
End Function
' >>> build the kids update string
Private Function BuildKidsUpdateString(ts As Worksheet, upd As String, lmt As Integer) As String
    Dim rng As Range, row As Range, cnt As Integer
    Set rng = ts.Range("A2:M3000")
    upd = upd & Qstr("upd") & ":["
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(1) <> "=" And row.Cells(1) <> "-" Then
            upd = upd & IIf(cnt > 0, ",", "")
            upd = upd & "[" & CStr(row.Cells(2)) ' row
            upd = upd & "," & Qstr(CStr(row.Cells(1))) ' ctrl
            upd = upd & "," & Qstr(CStr(row.Cells(3))) ' type
            upd = upd & "," & Qstr(CStr(row.Cells(5))) ' id
            upd = upd & "," & Qstr(CStr(row.Cells(6))) ' grade
            upd = upd & "," & Qstr(CStr(row.Cells(7))) ' family name
            upd = upd & "," & Qstr(CStr(row.Cells(8))) ' first name
            upd = upd & "," & Qstr(CStr(row.Cells(9))) ' hour
            upd = upd & "," & Qstr(CStr(row.Cells(10))) ' class
            upd = upd & "," & Qstr(CStr(row.Cells(11))) ' double
            upd = upd & "," & Qstr(CStr(row.Cells(12))) ' sensitivity
            upd = upd & "]"
            cnt = cnt + 1
        End If
        If Len(upd) > lmt Then Exit For
    Next
    BuildKidsUpdateString = upd & "]"
End Function
' >>> mark empty records for deletion
Private Function CleanKidsList(ts As Worksheet) As Integer
    Dim rng As Range, row As Range, cnt As Integer
    Set rng = ts.Range("A2:M3000")
    cnt = 0
    For Each row In rng.Rows
        If row.Cells(1) = "" Then
            If row.Cells(3) <> "" Then
                If row.Cells(13) <> 1 Then
                    row.Cells(1) = "e"
                    cnt = cnt + 1
                End If
            Else
                row.Cells(1) = "-"
            End If
        End If
    Next
    CleanKidsList = cnt
End Function
' >>> add missing kids to list
Private Function AddNewKidsRecords(ts As Worksheet, ar As Collection) As Integer
    Dim cnt As Integer, i As Integer
    Dim lst As String, row As String
    lst = GetKidsEmptyList(ts)
    cnt = 0
    For i = 1 To ar.count
        row = Left(lst, InStr(lst, ",") - 1)
        lst = Mid(lst, InStr(lst, ",") + 1, Len(lst))
        If lst <> "" Then
            If Not AddNewKidRecord(ts, CInt(row), ar(i)) Then
                AddNewKidsRecords = -1
                Exit Function
            End If
        Else
            AddNewKidsRecords = -1
            Exit Function
        End If
    Next i
    AddNewKidsRecords = cnt
End Function
' >>> get a list (as comma delimited string) of empty kids rows
Private Function GetKidsEmptyList(ts As Worksheet) As String
    Dim rng As Range, row As Range, lst As String
    Set rng = ts.Range("A2:M3000")
    lst = ""
    For Each row In rng.Rows
        If row.Cells(1) = "e" Then lst = lst & CStr(row.row) & ","
    Next
    For Each row In rng.Rows
        If row.Cells(1) = "-" Then lst = lst & CStr(row.row) & ","
    Next
    GetKidsEmptyList = lst
End Function
' >>> add a kid record to list
Private Function AddNewKidRecord(ts As Worksheet, rw As Integer, ByVal ar As Collection) As Boolean
    Dim rng As Range, row As Range
    Set rng = ts.Range("A1:M3000")
    Set row = rng.Rows(rw)
    AddNewKidRecord = False
    If row.Cells(1) = "e" Or row.Cells(1) = "-" Then
        row.Cells(1) = "n"
        row.Cells(3) = ar("t")
        row.Cells(4) = ar("d")
        row.Cells(5) = ar("z")
        row.Cells(6) = ar("g")
        row.Cells(7) = ar("l")
        row.Cells(8) = ar("f")
        row.Cells(9) = ar("h")
        row.Cells(10) = ar("c")
        row.Cells(11) = ar("b")
        row.Cells(12) = ar("s")
        AddNewKidRecord = True
    End If
End Function
' >>> --------------------- <<<
' >>> public user functions <<<
' >>> --------------------- <<<
' >>> download & unzip support files into support folder
Public Sub DownloadFiles(url As String, fld As String, Optional siz As Long = 20000000)
    Dim ml As Single, tm As String, er As Boolean
    Reset
    Me.Show (False)
    AddText ("מוריד קבצים.")
    er = True
    xHttp.Fetch url, True
    ml = siz / 100
    While xHttp.Status = "working"
        WaitFor
        ProgBar (Len(xHttp.Response) / ml)
        Me.Repaint
    Wend
    If xHttp.Success Then
        AddText ("פותח קבצים.")
        tm = fileTemp("zip")
        If fileSave(tm, xHttp.Response) Then
            If Unzip(tm, fld) Then er = False
            fileDelete (tm)
        End If
    End If
    FinishStatus IIf(er, IIf(xHttp.Error = "Canceled", "can", "err"), "ok")
    Finish
End Sub
' >>> open the webapp page in browser (try chrome, try firefox, try deault)
Public Function OpenUrl(url As String) As Boolean
    Dim path As String
    OpenUrl = False
    On Error GoTo UrlFail
    If InStr(url, "://") = 0 Then url = "http://" & url
    path = "C:\Program Files\Google\Chrome\Application\chrome.exe"
    If dir(path) = "" Then path = Replace(path, "Program Files\", "Program Files (x86)\")
    If dir(path) = "" Then path = "C:\Program Files\Mozilla Firefox\firefox.exe"
    If dir(path) = "" Then path = Replace(path, "Program Files\", "Program Files (x86)\")
    If dir(path) = "" Then
        ActiveWorkbook.FollowHyperlink (url)
    Else
        Shell """" & path & """" & " -new-tab " & url, vbHide
    End If
    OpenUrl = True
UrlFail:
End Function
' >>> the auto sync triggered by the timer
Public Sub AutoSync()
    If ControlDefs.DefsAttAuto.Value Then
        Call SyncFriday
    End If
End Sub
' >>> do a full sync
Public Function SyncFriday() As Boolean
    Dim err As String, cyc As Integer
    Reset
    Me.Show (False)
    AddText ("מתחיל סינכרון.")
    err = ""
    Cycles = 0
    cyc = 0
    While cyc < 37 And err = ""
        err = SyncCycle(cyc)
        cyc = cyc + 1
        If err <> "ok" Then AddText ("מחזור סנכרון מס' " & cyc & IIf(err <> "", IIf(err = "syn", " נכשל (בעיית קוד) !", " נכשל !!!"), " הושלם בהצלחה."))
        If err = "ok" And Cycles = 1 Then AddText ("הכל כבר מסונכרן.")
        GBL_att_last_sync = Now()
        ControlDefs.PaintSyncData
    Wend
    GBL_att_last_sync = Now()
    If err = "" Then
        AddText ("לא הושלם לאחר 37 מחזורים.")
        err = "err"
    End If
    If err = "ok" Then
        GBL_att_synced = 100
        GBL_att_changed = False
    End If
    If err <> "ok" Then InitAutoSync 1 ' resync in 1 minute
    ControlDefs.PaintSyncData
    FinishStatus err, 5
    Finish
    ControlDefs.PaintSyncData
    SyncFriday = IIf(err = "ok", True, False)
End Function
' >>> close a friday
Public Function NextFriday() As Boolean
    Dim url As String, er As Boolean
    url = Trim(Range(GRN_def_att_app_url).Text) & "?job=nxt&pass=sys&data=123&hash=" & SignStr("123")
    Reset
    Me.Show (False)
    AddText ("סוגר יום שישי.")
    er = True
    xHttp.Fetch url, True
    While xHttp.Status = "working"
        WaitFor
        Me.Repaint
    Wend
    If xHttp.Success Then

        If Mid(xHttp.Response, 2, 5) = "Wait:" Then
          AddText ("יש להמתין לפחות דקה לפני ניסיון סגירה נוסף.")
        Else
            If Mid(xHttp.Response, 2, 5) = "Empty" Then
                Range(GRN_def_att_app_last) = Mid(xHttp.Response, 8, 10)
                AddText ("לא בוצע סגירה מאחר ויום שישי הקודם כבר סגור.")
            Else
                If Mid(xHttp.Response, 2, 5) = "Done:" Then
                    Range(GRN_def_att_app_last) = Mid(xHttp.Response, 7, 10)
                    AddText ("בוצעה סגירת יום שישי.")
                    er = False
                Else
                    AddText ("שגיאה: " & xHttp.Response)
                End If
            End If
        End If

'        If Mid(xHttp.Response, 2, 5) <> "Empty" Then
'            Range(GRN_def_att_app_last) = Mid(xHttp.Response, 2, 10)
'            AddText ("בוצעה סגירת יום שישי.")
'            er = False
'        Else
'            If Mid(xHttp.Response, 2, 5) = "Empty" Then
'                Range(GRN_def_att_app_last) = Mid(xHttp.Response, 8, 10)
'                AddText ("לא בוצע סגירה מאחר ויום שישי הקודם כבר סגור.")
'            Else
'                AddText ("שגיאה: " & xHttp.Response)
'            End If
'        End If

    End If
    FinishStatus IIf(er, IIf(xHttp.Error = "Canceled", "can", "err"), "ok"), 5
    Finish
    NextFriday = Not er
End Function
' >>> return [busy] status
Public Function IsBusy() As Boolean
    IsBusy = Busy
End Function


Attribute VB_Name = "UrlFetch"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' SOURCE: http://exceldevelopmentplatform.blogspot.com/2018/01/vba-winhttprequest-no-asynchronous.html
' Tools->References -> Microsoft WinHTTP Services, version 5.1 -> (C:\WINDOWS\system32\winhttpcom.dll)
Private WithEvents xHttp As WinHttp.WinHttpRequest
Attribute xHttp.VB_VarHelpID = -1
Private xTimeOut As Integer
Private xUrl As String
Private xTime As Single
Private xResponse As String
' >>> public properties
Public Response As String
Public isStarted As Boolean
Public isRunning As Boolean
Public isFinished As Boolean
Public Success As Boolean
Public Status As String ' ("ready", "working", "error", "success")
Public Error As String
Public Time As Long
' >>> class initialization
Private Sub Class_Initialize()
    Set xHttp = New WinHttp.WinHttpRequest
    xTimeOut = 5000
    Reset
End Sub
' >>> class termination
Private Sub Class_Terminate()
    Set xHttp = Nothing
End Sub
' >>> reset everything
Private Sub Reset()
    xHttp.abort
    xUrl = ""
    SetStatus "0000"
    Response = ""
    xResponse = ""
    Error = ""
    Time = 0
End Sub
' >>> cancel current request
Public Sub Cancel()
    Reset
    Error = "Canceled"
End Sub
' >>> main fech function
Public Sub Fetch(ByVal url As String, async As Boolean)
    On Error GoTo ErrHandler
    xTime = Timer()
    Reset
    SetStatus "11**"
    xHttp.Open method:="GET", url:=url, async:=async
    xHttp.SetTimeouts xTimeOut, xTimeOut, xTimeOut, xTimeOut
    xHttp.setRequestHeader "Content-type", "application/x-www-form-urlencoded" ' handle post content type
    xHttp.Option(0) = "Shachaf VBA HTTP Bot v0.1" ' set user agent
    xHttp.Option(4) = 13056 ' set ssl ignore errors
    xHttp.Option(6) = True ' set redirects
    xHttp.Option(12) = True ' allow http to redirect to https
    xHttp.send
    Exit Sub
ErrHandler:
    Error = "(" & err.Number & ") " & err.Description
    xHttp.abort
    SetStatus "*010"
End Sub
' >>> data response handling
Private Sub xHttp_OnResponseDataAvailable(Data() As Byte)
    Dim chunk As String
    chunk = StrConv(Data(), vbUnicode)
' ******* new code start - fix slowdown in download
    xResponse = xResponse & chunk
    If Len(xResponse) > 500000 Then ResponseSegment
' ******* new code end
' ******* old code    Response = Response & chunk
End Sub
' >>> error handling
Private Sub xHttp_OnError(ByVal ErrNum As Long, ByVal ErrDsc As String)
    Error = "(" & ErrNum & ") " & ErrDsc
    SetStatus "*010"
End Sub
' >>> request finish handling
Private Sub xHttp_OnResponseFinished()
    ResponseSegment ' ******* new code - fix slowdown in download
    SetStatus "*011"
End Sub
' >>> request start handling
Private Sub xHttp_OnResponseStart(ByVal Status As Long, ByVal ContentType As String)
    SetStatus "1***"
End Sub
' >>> add response segment to main response
Private Sub ResponseSegment()
    If xResponse <> "" Then
        Response = Response & xResponse
        xResponse = ""
    End If
End Sub
' >>> set statuses:
'        1st char = started (0/1) or "*" to ignore
'        2nd char = running (0/1) or "*" to ignore
'        3rd char = finished (0/1) or "*" to ignore
'        4th char = success (0/1) or "*" to ignore
Private Sub SetStatus(stt As String)
    Dim s As String
    s = Mid(stt, 1, 1)
    If s = "0" Or s = "1" Then isStarted = IIf(s = "1", True, False)
    s = Mid(stt, 2, 1)
    If s = "0" Or s = "1" Then isRunning = IIf(s = "1", True, False)
    s = Mid(stt, 3, 1)
    If s = "0" Or s = "1" Then isFinished = IIf(s = "1", True, False)
    s = Mid(stt, 4, 1)
    If s = "0" Or s = "1" Then Success = IIf(s = "1", True, False)
    Status = IIf(Success, "success", IIf(Error <> "", "error", IIf(isRunning, "working", "ready")))
    If isFinished Then Time = CLng((Timer() - xTime) * 1000)
End Sub
' >>> get timeout value (100-30000)
Property Get TimeOut() As Integer
    TimeOut = xTimeOut
End Property
' >>> set timeout value (100-30000)
Property Let TimeOut(v As Integer)
    If v < 100 Then v = 100
    If v > 30000 Then v = 30000
    xTimeOut = v
End Property


Attribute VB_Name = "sheet93"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



Attribute VB_Name = "DialogSMS"
Attribute VB_Base = "0{F81CF06D-1C62-43E3-8382-8C9F02DBB807}{E27FB9E4-A976-4198-B35F-517147E2D3AF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> constants
Private Const CN_limit = 5800
Private Const CN_separator = "|||"
Private Const CN_tabs_count = 9 ' max amount of tabs
Private Const CN_allow_prefix = 3 ' min length of allowed phone prefix
' >>> variables
Private smsMsgFile As String
Private smsMsgKeys() As String
Private smsMsgList As Collection
Private smsMsgCnt As Integer
Private smsMsgLen As Long
Private smsCurKey As String
Private smsCurTmp As String
Private smsLoaded As Boolean
Private smsTabCount(CN_tabs_count) As Integer
Private smsTabPhones(CN_tabs_count) As String
Private isSaved As Boolean
Private jobSelect As String
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    smsMsgFile = ""
    smsLoaded = False
End Sub
' >>> do this every time dialog pops
Private Sub UserForm_Activate()
    jobSelect = ""
    ProgressBar.Visible = False
    If Not smsLoaded Then
        NewSmsUIControl False
        SmsUIControl False
        Me.EditSMS.Text = ""
        Me.ListSMS.Clear
        ResetOptionsUI
        SMSLoadFile
    End If
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'    Cancel = True
End Sub
' >>> mark SMS file as unsaved
Private Sub MarkAsUnsaved()
    isSaved = False
    FixSmsUI
End Sub
' >>>>>>> ----------------- <<<<<<<
' >>>>>>> SMS list creation <<<<<<<
' >>>>>>> ----------------- <<<<<<<
' >>> produce the SMS list
Private Sub MakeSMSList()
    Dim lst() As String, opt As String, msg As String
    Dim z As String, q As Boolean
    Dim wb As Workbook
    opt = GetOptionsString
    msg = FixSMSChars(Me.EditSMS.Text, "m")
    z = "שבלונה זאת מכילה פיצ'רים המיועדים למשלוח הודעות פר ילד, אבל הגדרת את הפקת האסמסים פר טלפון, האם להמשיך ?"
    q = True
    If IsPerKidSMSPerPhone(opt, msg) Then q = (AskDialog(z, "yn") = "y")
    z = "עדיין לא שמרת שינויים שבצעת, האם להמשיך ?"
    If q Then
        q = True
        If Not isSaved Then q = (AskDialog(z, "yn") = "y")
        If q Then
            SMSShowMsg "מיצר רשימת ילדים"
            lst = GetKidsDataByFilter(Mid(opt, 1, 1))
            SMSShowMsg "מיצר קובץ אסמסים"
            ProgressBar.Visible = True
            ProgressBar.Width = 5
            If Not IsStringArrayEmpty(lst) Then
                Set wb = CreateSMSFile(lst, opt, msg)
                SMSShowMsg "הכנת הקובץ הסתיימה"
                ProgressBar.Width = 108
                z = "הקובץ נוצר אבל לא נשמר, האם ברצונך לעבור אליו ?"
                If AskDialog(z, "yn") = "y" Then
                    wb.Activate
                End If
            Else
                z = "לא ניתן ליצר קובץ ללא רשומות !!!"
                z = AskDialog(z, "y")
            End If
            SMSShowMsg ""
            ProgressBar.Visible = False
        End If
    End If
End Sub
' >>> tests if an advanced per kid message is sent per phone
Private Function IsPerKidSMSPerPhone(opt As String, msg As String) As Boolean
    Dim i As Integer
    Dim arr
    arr = Array("[תז]", "[ת.ז]", "[שכבה]", "[כיתה]", "[שם]", "[משפחה]", "[פרטי]", "[מגדר]", "[לידה]", "[גיל]", "[טל_ילד]", "[אם]", "[טל_אם]", "[אב]", "[טל_אב]", "[חוג1]", "[חוג2]", "[חוג3]", "[חוג4]", "[חדר1]", "[חדר2]", "[חדר3]", "[חדר4]", "[אורך1]", "[אורך2]", "[אורך3]", "[אורך4]")
    IsPerKidSMSPerPhone = False
    If Mid(opt, 7, 1) <> "k" Then
        For i = LBound(arr) To UBound(arr)
            If InStr(msg, arr(i)) > 0 Then IsPerKidSMSPerPhone = True
        Next i
    End If
End Function
' >>> create the SMS message workbook
Private Function CreateSMSFile(lst() As String, opt As String, msg As String) As Workbook
    Dim cwb As Workbook, nwb As Workbook
    Dim who As String, ph_mth As String, ph_fth As String, ph_kid As String
    Dim op_per As String, op_onl As Boolean, op_brk As Boolean
    Dim sms As String, bnd As String
    Dim i As Integer, c As Integer
    Set cwb = ThisWorkbook
    UpdatesOff
    ResetSMSTabs
    bnd = get_banned_phones()
    op_per = Mid(opt, 7, 1)
    op_onl = (Mid(opt, 8, 1) = "1")
    op_brk = (Mid(opt, 9, 1) = "1")
    Set nwb = CreateSMSWorkbook(op_onl)
    c = UBound(lst) - LBound(lst) + 1
    For i = LBound(lst) To UBound(lst)
        ph_mth = GetFieldFromString(lst(i), "mother_phone")
        ph_fth = GetFieldFromString(lst(i), "father_phone")
        ph_kid = GetFieldFromString(lst(i), "kid_phone")
        who = CalcWhatPhoneToUse(opt, ph_mth, ph_fth, ph_kid)
        If who <> "" Then
            sms = MakeSMSMessage(msg, lst(i))
            If InStr(sms, "{בטל}") < 1 Then
                If InStr(who, "m") > 0 Then AddSMSRecord nwb, ph_mth, sms, op_per, op_onl, op_brk, bnd
                If InStr(who, "f") > 0 Then AddSMSRecord nwb, ph_fth, sms, op_per, op_onl, op_brk, bnd
                If InStr(who, "k") > 0 Then AddSMSRecord nwb, ph_kid, sms, op_per, op_onl, op_brk, bnd
            End If
        End If
        ProgressBar.Width = (5 + i / c * 100)
        If i Mod 5 = 0 Then Me.Repaint
    Next i
    nwb.Sheets(1).Activate
    cwb.Activate
    UpdatesOn
    Set CreateSMSFile = nwb
End Function
' >>> build the SMS message
Private Function MakeSMSMessage(tmp As String, kid As String) As String
    Dim id As String, grd As String, grade As String, last As String, first As String, name As String
    Dim gender As String, birth As String, age As String, kid_ph As String
    Dim mother_nm As String, mother_ph As String, father_nm As String, father_ph As String
    Dim class_1 As String, class_2 As String, class_3 As String, class_4 As String
    Dim room_1 As String, room_2 As String, room_3 As String, room_4 As String
    Dim len_1 As String, len_2 As String, len_3 As String, len_4 As String
    Dim dt As String, yr As String, yr_heb As String, tm As String
    Dim sms As String
    id = GetFieldFromString(kid, "id")
    grade = GetFieldFromString(kid, "grade")
    grd = Left(grade, 2)
    last = GetFieldFromString(kid, "last")
    first = GetFieldFromString(kid, "first")
    name = GetFieldFromString(kid, "name")
    gender = GetFieldFromString(kid, "gender")
    birth = GetFieldFromString(kid, "birth")
    age = GetFieldFromString(kid, "age")
    kid_ph = GetFieldFromString(kid, "kid_phone")
    mother_nm = GetFieldFromString(kid, "mother_name")
    mother_ph = GetFieldFromString(kid, "mother_phone")
    father_nm = GetFieldFromString(kid, "father_name")
    father_ph = GetFieldFromString(kid, "father_phone")
    class_1 = GetFieldFromString(kid, "class_1")
    class_2 = GetFieldFromString(kid, "class_2")
    class_3 = GetFieldFromString(kid, "class_3")
    class_4 = GetFieldFromString(kid, "class_4")
    room_1 = GetFieldFromString(kid, "room_1")
    room_2 = GetFieldFromString(kid, "room_2")
    room_3 = GetFieldFromString(kid, "room_3")
    room_4 = GetFieldFromString(kid, "room_4")
    len_1 = GetFieldFromString(kid, "len_1")
    len_2 = GetFieldFromString(kid, "len_2")
    len_3 = GetFieldFromString(kid, "len_3")
    len_4 = GetFieldFromString(kid, "len_4")
    dt = Format(Now(), "dd/mm/yyyy")
    yr = Format(Now(), "yyyy")
    yr_heb = GetHebrewYear(CInt(yr))
    tm = Format(Now(), "hh:mm")
    sms = tmp
    sms = Replace(Replace(sms, "[ת.ז]", id), "[תז]", id)
    sms = Replace(sms, "[תאריך]", dt)
    sms = Replace(sms, "[לועזי]", yr)
    sms = Replace(sms, "[עברי]", yr_heb)
    sms = Replace(sms, "[זמן]", tm)
    sms = Replace(sms, "[שכבה]", grd)
    sms = Replace(sms, "[כיתה]", grade)
    sms = Replace(sms, "[שם]", name)
    sms = Replace(sms, "[משפחה]", last)
    sms = Replace(sms, "[פרטי]", first)
    sms = Replace(sms, "[מגדר]", gender)
    sms = Replace(sms, "[לידה]", birth)
    sms = Replace(sms, "[גיל]", age)
    sms = Replace(sms, "[טל_ילד]", kid_ph)
    sms = Replace(sms, "[אם]", mother_nm)
    sms = Replace(sms, "[טל_אם]", mother_ph)
    sms = Replace(sms, "[אב]", father_nm)
    sms = Replace(sms, "[טל_אב]", father_ph)
    sms = Replace(sms, "[חוגים]", class_1 & " " & class_2 & " " & class_3 & " " & class_4)
    sms = Replace(sms, "[חוג1]", class_1)
    sms = Replace(sms, "[חוג2]", class_2)
    sms = Replace(sms, "[חוג3]", class_3)
    sms = Replace(sms, "[חוג4]", class_4)
    sms = Replace(sms, "[חדרים]", room_1 & " " & room_2 & " " & room_3 & " " & room_4)
    sms = Replace(sms, "[חדר1]", room_1)
    sms = Replace(sms, "[חדר2]", room_2)
    sms = Replace(sms, "[חדר3]", room_3)
    sms = Replace(sms, "[חדר4]", room_4)
    sms = Replace(sms, "[אורך1]", len_1)
    sms = Replace(sms, "[אורך2]", len_2)
    sms = Replace(sms, "[אורך3]", len_3)
    sms = Replace(sms, "[אורך4]", len_4)
    MakeSMSMessage = FixSMSLogicals(sms)
End Function
' >>> fix logical conditions in sms message
Private Function FixSMSLogicals(sms As String) As String
    Dim p As Long, e As Long, str As String, mrk As Boolean
' resolve {ifs} controls
    p = 1
    Do While p > 0
        p = FindInnermostIf(sms)
        If p > 0 Then
            e = InStr(p, sms & "{סוף}", "{סוף}") + 4
            e = IIf(e > Len(sms), Len(sms), e)
            str = ResolveLogicalCondition(Mid(sms, p, e - p + 1))
            sms = Left(sms, p - 1) & str & Mid(sms, e + 1, Len(sms))
        End If
    Loop
' resolve {mark} controls
    mrk = False
    If InStr(sms, "{סמן}") > 0 Then
        sms = Replace(sms, "{סמן}", "")
        mrk = True
    End If
' resolve{cancel if yes} control
    If InStr(sms, "{בטל אם כן}") > 0 Then
        sms = Replace(sms, "{בטל אם כן}", "")
        If mrk Then sms = sms & "{בטל}"
    End If
' resolve{cancel if not} control
    If InStr(sms, "{בטל אם לא}") > 0 Then
        sms = Replace(sms, "{בטל אם לא}", "")
        If Not mrk Then sms = sms & "{בטל}"
    End If
' finish
    FixSMSLogicals = sms
End Function
' >>> resolve the logical condition and return either true or false part
Private Function ResolveLogicalCondition(str As String) As String
    Dim p As Long, e As Long, q As Boolean, prt_t As String, prt_f As String
    ResolveLogicalCondition = ""
    e = InStr(str, "}")
    If e > 0 Then
        q = TestLogicCondition(Left(str, e))
        p = e + 1
        prt_t = Mid(str, p, Len(str))
        If Right(prt_t, 5) = "{סוף}" Then prt_t = Left(prt_t, Len(prt_t) - 5)
        prt_f = ""
        p = InStr(prt_t, "{אחרת}")
        If p > 0 Then
            prt_f = Mid(prt_t, p + 6, Len(prt_t))
            prt_t = Left(prt_t, p - 1)
        End If
        ResolveLogicalCondition = IIf(q, prt_t, prt_f)
    End If
End Function
' >>> test an SMS logic and return true or false
Private Function TestLogicCondition(str As String) As Boolean
    Dim q As Boolean, p As Long, e As Long, x As String
    str = "(" & Trim(Mid(str, 4, Len(str) - 4)) & ")"
    p = 1
    Do While p > 0
        p = FindInnermostPar(str)
        If p > 0 Then
            e = InStr(p, str & ")", ")")
            e = IIf(e > Len(str), Len(str), e)
            x = ResolveParentheses(Mid(str, p, e - p + 1))
            str = Left(str, p - 1) & x & Mid(str, e + 1, Len(str))
        End If
    Loop
    q = (str = "1")
    TestLogicCondition = q
End Function
' >>> resolve a single set of parentheses
Private Function ResolveParentheses(str As String) As String
    Dim p As Long, pp As Long, x As String
    Dim op As String, res As Integer, zand As Integer
    res = 0
    zand = 1
    str = Trim(Mid(str, 2, Len(str) - 2))
    Do While Len(str) > 0
        p = InStr(str, "|")
        pp = InStr(str, "&")
        If p = 0 Or (pp > 0 And pp < p) Then p = pp
        op = ""
        x = str
        If p > 0 Then
            op = Mid(str, p, 1)
            x = Left(str, p - 1)
        Else
            str = ""
        End If
        str = Mid(str, p + 1, Len(str))
        zand = zand * TestSingleCondition(x)
        If op <> "&" Then
            res = IIf(res + zand > 0, 1, 0)
            zand = 1
        End If
    Loop
    ResolveParentheses = IIf(res = 1, "1", "0")
End Function
'>>> test a single condition and return true or false
Private Function TestSingleCondition(str As String) As Integer
    Dim p As Integer, q As Boolean, c As String, x As String, z As String
    q = False
    p = InStr(str, "<>")
    p = IIf(p > 0, p, InStr(str, "><"))
    p = IIf(p > 0, p, InStr(str, ">="))
    p = IIf(p > 0, p, InStr(str, "<="))
    p = IIf(p > 0, p, InStr(str, "=>"))
    p = IIf(p > 0, p, InStr(str, "=<"))
    p = IIf(p > 0, p, InStr(str, "="))
    p = IIf(p > 0, p, InStr(str, "<"))
    p = IIf(p > 0, p, InStr(str, ">"))
    p = IIf(p > 0, p, InStr(str, "@"))
    If p > 0 Then
        c = Mid(str, p, 2)
        c = IIf(c = "<>" Or c = "><" Or c = ">=" Or c = "<=" Or c = "=>" Or c = "=<", c, Left(c, 1))
        x = Trim(Left(str, p - 1))
        z = Trim(Mid(str, p + Len(c), Len(str)))
        If c = "<>" Or c = "><" Then q = (x <> z)
        If c = ">=" Or c = "=>" Then q = (x >= z)
        If c = "<=" Or c = "=<" Then q = (x <= z)
        If c = "=" Then q = (x = z)
        If c = "<" Then q = (x < z)
        If c = ">" Then q = (x > z)
        If c = "@" Then q = (InStr(x, z) > 0)
    Else
        If str = "1" Then q = True
    End If
    TestSingleCondition = IIf(q, 1, 0)
End Function
' >>> find the innermost (...) substring
Private Function FindInnermostPar(str As String) As Long
    Dim p As Long, e As Long, pp As Long
    p = 1
    Do While p > 0
        p = InStr(p, str, "(")
        If p > 0 Then
            e = InStr(p, str, ")")
            e = IIf(e > 0, e, Len(str))
            pp = InStr(p + 1, str, "(")
            If pp = 0 Or pp > e Then Exit Do
            p = pp
        End If
    Loop
    FindInnermostPar = p
End Function
' >>> find the innermost {if}...{end} condition
Private Function FindInnermostIf(str As String) As Long
    Dim p As Long, e As Long, pp As Long
    p = 1
    Do While p > 0
        p = InStr(p, str, "{אם")
        If p > 0 Then
            If InStr(p + 1, str, "}") = 0 Then
                FindInnermostIf = 0
                Exit Function
            End If
            e = InStr(p, str, "{סוף}")
            e = IIf(e > 0, e, Len(str))
            pp = InStr(p + 1, str, "{אם")
            If pp = 0 Or pp > e Then Exit Do
            p = pp
        End If
    Loop
    FindInnermostIf = p
End Function
' >>> add a record to an SMS workbook (creating tabs as needed)
Private Sub AddSMSRecord(wb As Workbook, phone As String, sms As String, per As String, onl As Boolean, brk As Boolean, bnd As String)
    Dim sht As Worksheet, used As Boolean, ind As Integer
    If InStr(bnd, StrCleanNum(phone)) < 1 Then
        used = (InStr(smsTabPhones(1), phone) > 0)
        If Not used Or per = "k" Then ' only if per kid or phone not used yet
            Set sht = GetProperWorksheet(wb, phone, brk, onl)
            ind = CInt(Right(sht.name, 1))
            sht.Cells(smsTabCount(ind) + 2, 1) = phone
            If Not onl Then sht.Cells(smsTabCount(ind) + 2, 2) = sms
            smsTabCount(ind) = smsTabCount(ind) + 1
            smsTabPhones(ind) = smsTabPhones(ind) & ":" & phone
        End If
    End If
End Sub
' >>> get the worksheet for which a new record should be placed
Private Function GetProperWorksheet(wb As Workbook, phone As String, brk As Boolean, onl As Boolean) As Worksheet
    Dim nm As String, sht As Worksheet
    Dim i As Integer
    Set sht = wb.Sheets(1)
    nm = "אסמסים 1"
    If brk Then
        For i = 1 To CN_tabs_count
            If smsTabCount(i) < 0 Then Exit For
            If (InStr(smsTabPhones(i), phone) < 1) Then
                nm = "אסמסים " & CStr(i)
                Exit For
            End If
        Next i
        If smsTabCount(i) < 0 Then
            Set sht = CreateSMSSheet(wb, i, onl)
            nm = "אסמסים " & CStr(i)
        End If
    End If
    For i = 1 To wb.Sheets.count
        If wb.Sheets(i).name = nm Then
            Set sht = wb.Sheets(i)
            Exit For
        End If
    Next i
    Set GetProperWorksheet = sht
End Function
' >>> reset the SMS file tabs to zero data
Private Sub ResetSMSTabs()
    Dim i As Integer
    For i = 1 To CN_tabs_count
        smsTabCount(i) = -1
        smsTabPhones(i) = ""
    Next i
End Sub
' >>> returns a string with the phone codes to use (k = kid , m = mother , f = father)
Private Function CalcWhatPhoneToUse(opt As String, mth As String, fth As String, kid As String) As String
    Dim u_m As Boolean, u_f As Boolean, u_k As Boolean, p As Integer
    p = InStr(mth, "-")
    u_m = (p > CN_allow_prefix And Mid(opt, 2, 1) = "1")
    p = InStr(fth, "-")
    u_f = (p > CN_allow_prefix And Mid(opt, 3, 1) = "1")
    p = InStr(kid, "-")
    u_k = (p > CN_allow_prefix And Mid(opt, 4, 1) = "1")
    If Mid(opt, 5, 1) = "1" Then ' only mother
        If u_m Then
            u_f = False
            u_k = False
        Else
            If u_f Then u_k = False
        End If
    End If
    If Mid(opt, 6, 1) = "1" Then ' only kid
        If u_k Then
            u_m = False
            u_f = False
        Else
            If u_m Then u_f = False
        End If
    End If
    CalcWhatPhoneToUse = IIf(u_m, "m", "") & IIf(u_f, "f", "") & IIf(u_k, "k", "")
End Function
' >>> create a new SMS sheet in an SMS workbook
Private Function CreateSMSSheet(wb As Workbook, ind As Integer, Optional onl As Boolean = False) As Worksheet
    Dim sht As Worksheet
    Set sht = wb.Sheets.add(After:=wb.Worksheets(wb.Worksheets.count))
    sht.name = "אסמסים " & CStr(ind)
    sht.DisplayRightToLeft = True
    sht.Cells(1, 1) = "טלפון"
    sht.Cells(1, 1).ColumnWidth = 12
    sht.Cells(1, 1).EntireColumn.HorizontalAlignment = xlHAlignCenter
    If Not onl Then
        sht.Cells(1, 2) = "הודעה"
        sht.Cells(1, 2).ColumnWidth = 60
        sht.Cells(1, 2).EntireColumn.HorizontalAlignment = xlHAlignRight
        sht.Cells(1, 2).EntireColumn.WrapText = True
    End If
    smsTabCount(ind) = 0
    smsTabPhones(ind) = ""
End Function
' >>> make a new SMS workbook
Private Function CreateSMSWorkbook(Optional onl As Boolean = False) As Workbook
    Dim wb As Workbook, sht As Worksheet
    Dim i As Integer
    Set wb = Workbooks.add
    Application.DisplayAlerts = False
    Set sht = CreateSMSSheet(wb, 1, onl)
    Do While wb.Sheets.count > 1
        For i = 1 To wb.Sheets.count
            Set sht = wb.Sheets(i)
            If Left(sht.name, 6) <> "אסמסים" Then
                sht.Delete
                Exit For
            End If
        Next i
    Loop
    Application.DisplayAlerts = True
    Set CreateSMSWorkbook = wb
End Function
' >>>>>>> --------------------- <<<<<<<
' >>>>>>> Options UI operations <<<<<<<
' >>>>>>> --------------------- <<<<<<<
' >>> get options as string
'     opt format :
'       pos 01 = list to send to (a=all , s=shachaf , f=filtered , c=changed)
'       pos 02 = send to mother
'       pos 03 = send to father
'       pos 04 = send to kid
'       pos 05 = send to only mother
'       pos 06 = send to only kid
'       pos 07 = per what (k=kid , p=phone)
'       pos 08 = phones only
'       pos 09 = break lists
'       pos 10..12 = future use
Private Function GetOptionsString() As String
    Dim opt As String, x As String
    x = IIf(Me.WhoSchool.Value, "a", IIf(Me.WhoShachaf.Value, "s", IIf(Me.WhoFilter.Value, "f", IIf(Me.WhoChanged.Value, "c", "-"))))
    opt = opt + x ' pos 01
    opt = opt + IIf(Me.WhoMother.Value, "1", "0") ' pos 02
    opt = opt + IIf(Me.WhoFather.Value, "1", "0") ' pos 03
    opt = opt + IIf(Me.WhoKid.Value, "1", "0") ' pos 04
    opt = opt + IIf(Me.WhoOnlyMother.Value, "1", "0") ' pos 05
    opt = opt + IIf(Me.WhoOnlyKid.Value, "1", "0") ' pos 06
    x = IIf(Me.OptionPerKid.Value, "k", IIf(Me.OptionPerPhone.Value, "p", "-"))
    opt = opt + x ' pos 07
    opt = opt + IIf(Me.OptionPhoneOnly.Value, "1", "0") ' pos 08
    opt = opt + IIf(Me.OptionBreak.Value, "1", "0") ' pos 09
    opt = opt + "---" ' pos 10-12 for future use
    GetOptionsString = opt
End Function
' >>> set options from template
Private Sub SetOptions(opt As String)
    Dim x As String
    ResetOptionsUI
    x = Mid(opt, 1, 1)
    If x = "a" Then Me.WhoSchool.Value = True
    If x = "s" Then Me.WhoShachaf.Value = True
    If x = "f" Then Me.WhoFilter.Value = True
    If x = "c" Then Me.WhoChanged.Value = True
    x = Mid(opt, 2, 1)
    If x = "1" Or x = "0" Then Me.WhoMother.Value = (x = "1")
    x = Mid(opt, 3, 1)
    If x = "1" Or x = "0" Then Me.WhoFather.Value = (x = "1")
    x = Mid(opt, 4, 1)
    If x = "1" Or x = "0" Then Me.WhoKid.Value = (x = "1")
    x = Mid(opt, 5, 1)
    If x = "1" Or x = "0" Then Me.WhoOnlyMother.Value = (x = "1")
    x = Mid(opt, 6, 1)
    If x = "1" Or x = "0" Then Me.WhoOnlyKid.Value = (x = "1")
    x = Mid(opt, 7, 1)
    If x = "k" Then Me.OptionPerKid.Value = True
    If x = "p" Then Me.OptionPerPhone.Value = True
    x = Mid(opt, 8, 1)
    If x = "1" Or x = "0" Then Me.OptionPhoneOnly.Value = (x = "1")
    x = Mid(opt, 9, 1)
    If x = "1" Or x = "0" Then Me.OptionBreak.Value = (x = "1")
' ******* add more here
End Sub
' >>> reset options UI
Private Sub ResetOptionsUI()
    Me.WhoShachaf.Value = True
    Me.WhoFather.Value = True
    Me.WhoMother.Value = True
    Me.WhoKid.Value = True
    Me.WhoOnlyKid.Value = False
    Me.WhoOnlyMother.Value = False
    Me.OptionPerPhone.Value = True
    Me.OptionPhoneOnly.Value = False
    Me.OptionBreak.Value = False
' ******* add more here
End Sub
' >>>>>>> ---------------------- <<<<<<<
' >>>>>>> SMS message operations <<<<<<<
' >>>>>>> ---------------------- <<<<<<<
' >>> issue the new template operation
Private Sub IssueNewSMSTemplate()
    NewSmsUIControl True
    Me.TitleSMS.SetFocus
End Sub
' >>> create a new template
Private Sub CreateNewSMSTemplate()
    Dim k As String
    k = Format(Now(), "yy/MM/dd hh:mm") & " - " & Me.TitleSMS.Text
    AddNewSMSTemplate k
    PopItemList
    Me.ListSMS.Text = k
    NewSmsUIControl False
    Me.EditSMS.SetFocus
    SMSShowLimit
End Sub
' >>> cancel new template
Private Sub CancelNewSMSTemplate()
    NewSmsUIControl False
End Sub
' >>> issue a title edit
Private Sub IssueTitleEdit()
    NewSmsUIControl True
    Me.TitleSMS.SetFocus
End Sub
' >>> rename template title
Private Sub RenameTemplateTitle()
    Dim k As String, x As String
    k = Left(Me.ListSMS.Text, 17) & Me.TitleSMS.Text
    x = smsMsgList(Me.ListSMS.Text)
    DelSMSTemplate Me.ListSMS.Text
    AddNewSMSTemplate k, x
    PopItemList
    Me.ListSMS.Text = k
    NewSmsUIControl False
    Me.EditSMS.SetFocus
    SMSShowLimit
End Sub
' >>> maintenance for changing SMS message
Private Sub UpdateSMSInFocus()
    ResaveSms
    smsCurKey = Me.ListSMS.Text
    If keyExists(smsMsgList, smsCurKey) Then
        smsCurTmp = smsMsgList(smsCurKey)
    Else
        smsCurTmp = ""
    End If
    SetCurrTemplate smsCurTmp
End Sub
' >>> delete a template SMS message
Private Sub DeleteSMSTemplate()
    Dim x As String
    x = "האם את/ה בטוח ?"
    If AskDialog(CN_sure, "yn") = "y" Then
        x = Me.ListSMS.Text
        DelSMSTemplate x
        PopItemList
        If smsMsgCnt > 0 Then Me.ListSMS.ListIndex = 0
    End If
End Sub
' >>> save changed templaye in SMS list
Private Sub ResaveSms()
    If smsCurKey <> "" Then
        If keyExists(smsMsgList, smsCurKey) Then
            If smsMsgList(smsCurKey) <> GetCurrTemplate() Then
                smsMsgList.Remove (smsCurKey)
                smsMsgList.add GetCurrTemplate, smsCurKey
            End If
        End If
    End If
End Sub
' >>> get current template + options as string
Private Function GetCurrTemplate() As String
    GetCurrTemplate = GetOptionsString
    GetCurrTemplate = GetCurrTemplate + CN_separator
    GetCurrTemplate = GetCurrTemplate + Me.EditSMS.Text
End Function
' >>> set current template + options from string
Private Sub SetCurrTemplate(str As String)
    Dim p As Long, x As String
    p = InStr(str, CN_separator)
    If p > 0 Then
        x = Left(str, p - 1)
        SetOptions x
        x = Mid(str, p + 3, Len(str))
    Else
        ResetOptionsUI
        x = str
    End If
    Me.EditSMS.Text = x
End Sub
' >>> populate list box with item titles
Private Sub PopItemList()
    Dim i As Integer
    Me.ListSMS.Clear
    If smsMsgCnt > 0 Then
        For i = LBound(smsMsgKeys) To UBound(smsMsgKeys)
            Me.ListSMS.AddItem smsMsgKeys(i)
        Next i
        Me.ListSMS.ListIndex = 0
    End If
End Sub
' >>> prevent entering too many characters
Private Sub EditSMS_Enter()
    Me.EditSMS.MaxLength = Len(Me.EditSMS.Text) + CN_limit - smsMsgLen
End Sub
' >>> update character limit display
Private Sub EditSMS_Change()
    Dim x As String
    SMSShowLimit
    If Not SMSValidChars() Then
        SMSShowMsg "יש תווים אסורים בטקסט"
    Else
        x = SMSValidPar()
        Me.LabelParLft.Caption = x
        Me.LabelParRgt.Caption = x
        Me.LabelParLft.Visible = (x = "(" Or x = "{")
        Me.LabelParRgt.Visible = (x = ")" Or x = "}")
        SMSShowMsg ""
    End If
    MarkAsUnsaved
    FixSmsUI
End Sub
' >>> update SMS data when exiting editor
Private Sub EditSMS_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    ResaveSms
End Sub
' >>>>>>> ----------------- <<<<<<<
' >>>>>>> messages & errors <<<<<<<
' >>>>>>> ----------------- <<<<<<<
' >>> show character limit
Private Sub SMSShowLimit()
    CalcTempLength
    Dim l As Long
    l = CN_limit - smsMsgLen
    If l <> CN_limit Then
        Me.LabelLimit.Caption = IIf(l > 0, l, "נגמר !")
        Me.LabelLimit.ForeColor = vbBlue
        Me.LabelLimit.Visible = True
    Else
        Me.LabelLimit.Visible = False
    End If
End Sub
' >>> show a message / error
Private Sub SMSShowMsg(msg As String)
    Me.LabelMessage.Caption = msg
    Me.LabelMessage.ForeColor = vbRed
    Me.LabelMessage.Visible = (msg <> "")
    Me.Repaint
End Sub
' >>>>>>> ----------------- <<<<<<<
' >>>>>>> sms file handling <<<<<<<
' >>>>>>> ----------------- <<<<<<<
' >>> read the SMS file from cloud
Private Sub SMSLoadFile()
    Dim res As String
    SmsUIControl False
    SMSShowMsg "המתן: טוען הודעות מהענן ..."
    res = GetCloudItem("sms")
    If Left(res, 1) <> "*" Then
        smsCurKey = ""
        smsCurTmp = ""
        smsMsgFile = Trim(FixSMSChars(res, "l"))
        SmsUIControl True
        SMSShowMsg ""
        smsMsgKeys = ExtractKeys()
        Set smsMsgList = ExtractItems()
        smsMsgCnt = smsMsgList.count
        PopItemList
        isSaved = True
        smsLoaded = True
        FixSmsUI
        If smsMsgCnt > 0 Then Me.ListSMS.SetFocus
    Else
        SMSShowMsg (Mid(res, 2, Len(res)))
        SMSTryReload
    End If
End Sub
' >>> issue a reload process
Private Sub SMSTryReload()
    SmsUIControl False
    Me.ButtonExit.Enabled = True
    Me.ButtonSaveSMS.Visible = False
    Me.ButtonReload.Visible = True
End Sub
' >>> read the SMS file from cloud
Private Sub SMSSaveFile()
    Dim res As String
    res = ""
    RebuildMsgFile
    SMSShowMsg "המתן: שומר הודעות בענן ..."
    res = SetCloudItem("sms", FixSMSChars(smsMsgFile, "s"))
    If res = "" Then
        SmsUIControl True
        SMSShowMsg ""
        isSaved = True
    Else
        SMSTryResave res
    End If
End Sub
' >>> rebuild the SMS message file string
Private Sub RebuildMsgFile()
    Dim i As Integer, k As String
    smsMsgFile = " "
    If Not IsStringArrayEmpty(smsMsgKeys) Then
        smsMsgFile = ""
        For i = LBound(smsMsgKeys) To UBound(smsMsgKeys)
            k = smsMsgKeys(i)
            smsMsgFile = smsMsgFile & "[[[" & k & "]]]" & smsMsgList(k)
        Next i
    End If
End Sub
' >>> issue a reload process
Private Sub SMSTryResave(err As String)
    SmsUIControl False
    Me.ButtonExit.Enabled = True
    Me.EditSMS.Enabled = True
    Me.ButtonSaveSMS.Enabled = True
    SMSShowMsg "נכשל: " + (err)
End Sub
' >>>>>>> ----------- <<<<<<<
' >>>>>>> UI controls <<<<<<<
' >>>>>>> ----------- <<<<<<<
' >>> turn the main UI on or off
Private Sub SmsUIControl(x As Boolean)
    Me.EditSMS.Enabled = x
    Me.ListSMS.Enabled = x
    Me.ButtonMakeSMS.Enabled = x
    Me.ButtonSaveSMS.Enabled = x
    Me.ButtonRename.Enabled = x
    Me.ButtonDelSMS.Enabled = x
    Me.ButtonMake.Enabled = x
    Me.ButtonReload.Visible = False
    OptionsUIControl x
End Sub
' >>> turn the new-sms UI on or off
Private Sub NewSmsUIControl(x As Boolean)
    SmsUIControl Not x
    If jobSelect = "a" Then Me.EditSMS.Visible = Not x
    If jobSelect = "r" Then Me.EditSMS.Enabled = Not x
    Me.ListSMS.Visible = Not x
    Me.TitleSMS.Visible = x
    Me.TitleSMS.Text = IIf(jobSelect = "r", Mid(Me.ListSMS.Text, 18, 99), "")
    Me.ButtonMakeSMS.Visible = Not x
    Me.ButtonRename.Visible = Not x
    Me.ButtonDelSMS.Visible = Not x
    Me.ButtonSaveSMS.Visible = Not x
    Me.ButtonNewYes.Visible = x
    Me.ButtonNewNo.Visible = x
    Me.ButtonNewYes.Enabled = (Len(Me.TitleSMS.Value) > 4)
End Sub
' >>> turn options UI on/off
Private Sub OptionsUIControl(x As Boolean)
    Me.WhoSchool.Enabled = x
    Me.WhoShachaf.Enabled = x
    Me.WhoFilter.Enabled = x
    Me.WhoChanged.Enabled = x
    Me.WhoFather.Enabled = x
    Me.WhoMother.Enabled = x
    Me.WhoKid.Enabled = x
    Me.WhoOnlyKid.Enabled = x
    Me.WhoOnlyMother.Enabled = x
    Me.OptionPerKid.Enabled = x
    Me.OptionPerPhone.Enabled = x
    Me.OptionPhoneOnly.Enabled = x
    Me.OptionBreak.Enabled = x
' ******* add more here
End Sub
' >>> fix the UI to show proper bottons
Private Sub FixSmsUI()
    Me.ButtonMakeSMS.Enabled = (CN_limit - smsMsgLen > 200)
    Me.ButtonSaveSMS.Visible = True
    Me.ButtonMake.Enabled = (Me.ListSMS.Text <> "")
    Me.ListSMS.Enabled = (Me.ListSMS.Text <> "")
    Me.EditSMS.Enabled = (Me.ListSMS.Text <> "")
    Me.ButtonDelSMS.Enabled = (Me.ListSMS.Text <> "")
    Me.ButtonRename.Enabled = (Me.ListSMS.Text <> "")
    OptionsUIControl (smsMsgCnt > 0)
    FixSaveButton
End Sub
' >>> turn save button on/off if saved/unsaved
Private Sub FixSaveButton()
    Me.ButtonSaveSMS.Enabled = Not isSaved
End Sub
' >>>>>>> ----------------------- <<<<<<<
' >>>>>>> buttons & change events <<<<<<<
' >>>>>>> ----------------------- <<<<<<<
' >>> make SMS file (or files)
Private Sub ButtonMake_Click()
    ResaveSms
    MakeSMSList
    FixSmsUI
End Sub
' >>> exit action
Private Sub ButtonExit_Click()
    ResaveSms
    Me.hide
End Sub
' >>> save all SMS templates to cloud
Private Sub ButtonSaveSMS_Click()
    ResaveSms
    SMSSaveFile
    FixSmsUI
End Sub
' >>> make a new empty SMS template
Private Sub ButtonMakeSMS_Click()
    ResaveSms
    jobSelect = "a"
    IssueNewSMSTemplate
End Sub
' >>> rename the title of an SMS template
Private Sub ButtonRename_Click()
    ResaveSms
    jobSelect = "r"
    IssueTitleEdit
End Sub
Private Sub ButtonDelSMS_Click()
    DeleteSMSTemplate
    FixSmsUI
    SMSShowLimit
End Sub
' >>> create a new SMS template
Private Sub ButtonNewYes_Click()
    If jobSelect = "a" Then CreateNewSMSTemplate
    If jobSelect = "r" Then RenameTemplateTitle
    FixSmsUI
End Sub
' >>> cancel new SMS template
Private Sub ButtonNewNo_Click()
    CancelNewSMSTemplate
    FixSmsUI
End Sub
' >>> reload sms templates from cloud
Private Sub ButtonReload_Click()
    SMSLoadFile
End Sub
' >>> show relevant help for this panel
Private Sub SMSHelp_Click()
    PanelHelp.ShowHelp ("הפקת-אסמסים")
End Sub
' >>> change selected message
Private Sub ListSMS_Change()
    UpdateSMSInFocus
    FixSmsUI
End Sub
' >>> prevent up/down arrows from exiting field
Private Sub ListSMS_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 38 And Me.ListSMS.ListIndex < 1 Then KeyCode = False
    If KeyCode = 40 And Me.ListSMS.ListIndex >= (Me.ListSMS.ListCount - 1) Then KeyCode = False
End Sub
' >>> prevent up arrow from exiting field
Private Sub EditSMS_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 38 And Me.EditSMS.CurLine = 0 Then KeyCode = False
    If KeyCode = 40 And Me.EditSMS.CurLine >= (Me.EditSMS.LineCount - 1) Then KeyCode = False
End Sub
' >>> limit new message title to 5 chars minimum
Private Sub TitleSMS_Change()
    Me.ButtonNewYes.Enabled = (Len(Me.TitleSMS.Value) > 4)
End Sub
' >>> set unsaved on click
Private Sub WhoShachaf_Click()
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub WhoFilter_Click()
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub WhoChanged_Click()
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub WhoSchool_Click()
    MarkAsUnsaved
End Sub
' >>> ensure only mother option isn't on if mother option is off
Private Sub WhoMother_Click()
    If Me.WhoMother.Value = False Then
        Me.WhoOnlyMother.Value = False
    End If
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub WhoFather_Click()
    MarkAsUnsaved
End Sub
' >>> ensure only kid option isn't on if kid option is off
Private Sub WhoKid_Click()
    If Me.WhoKid.Value = False Then
        Me.WhoOnlyKid.Value = False
    End If
    MarkAsUnsaved
End Sub
' >>> ensure kid option is on if kid only option is on
Private Sub WhoOnlyKid_Click()
    If Me.WhoOnlyKid.Value = True Then
        Me.WhoKid.Value = True
        Me.WhoOnlyMother = False
    End If
    MarkAsUnsaved
End Sub
' >>> ensure mother option is on if mother only option is on
Private Sub WhoOnlyMother_Click()
    If Me.WhoOnlyMother.Value = True Then
        Me.WhoMother.Value = True
        Me.WhoOnlyKid = False
    End If
    MarkAsUnsaved
End Sub
' >>> turn break option off if send per phone
Private Sub OptionPerPhone_Click()
    If Me.OptionPerPhone.Value = True Then
        Me.OptionBreak.Enabled = False
        Me.OptionBreak.Value = False
    End If
    MarkAsUnsaved
End Sub
' >>> turn break option on if send per kid
Private Sub OptionPerKid_Click()
    If Me.OptionPerKid.Value = True Then
        Me.OptionBreak.Enabled = True
        Me.OptionBreak.Value = True
    End If
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub OptionPhoneOnly_Click()
    MarkAsUnsaved
End Sub
' >>> set unsaved on click
Private Sub OptionBreak_Click()
    MarkAsUnsaved
End Sub
' >>>>>>> ----------------------- <<<<<<<
' >>>>>>> low level functionality <<<<<<<
' >>>>>>> ----------------------- <<<<<<<
' >>> add a new template
Private Sub AddNewSMSTemplate(x As String, Optional z As String = "")
    ReDim Preserve smsMsgKeys(smsMsgCnt)
    smsMsgKeys(smsMsgCnt) = x
    SortStrArray smsMsgKeys, "d"
    smsMsgList.add z, x
    smsMsgCnt = smsMsgList.count
    MarkAsUnsaved
End Sub
' >>> delete a template
Private Sub DelSMSTemplate(x As String)
    Dim c As Integer, i As Integer, arr() As String
    If smsMsgCnt > 1 Then
        ReDim arr(smsMsgCnt - 2)
        c = 0
        For i = LBound(smsMsgKeys) To UBound(smsMsgKeys)
            If smsMsgKeys(i) <> x Then
                arr(c) = smsMsgKeys(i)
                c = c + 1
            End If
        Next i
        SortStrArray arr, "d"
    End If
    smsMsgKeys = arr
    smsMsgList.Remove x
    smsMsgCnt = smsMsgList.count
    MarkAsUnsaved
End Sub
' >>> extract messages keys from raw file
Private Function ExtractKeys() As String()
    Dim c As Integer, p As Long, k As String
    Dim arr() As String
    c = 0
    p = 1
    Do While p > 0
        p = InStr(p, smsMsgFile, "[[[")
        If p > 0 Then
            k = Mid(smsMsgFile, p + 3, Len(smsMsgFile)) & "]]]"
            k = Left(k, InStr(k, "]]]") - 1)
            ReDim Preserve arr(c)
            arr(c) = k
            c = c + 1
            p = p + Len(k)
        End If
    Loop
    SortStrArray arr, "d"
    ExtractKeys = arr
End Function
' >>> extract convert the actual items from the raw file
Private Function ExtractItems() As Collection
    Dim i As Integer, p As Long, k As String, x As String
    Dim cl As Collection
    Set cl = New Collection
    If Len(smsMsgFile) > 0 Then
        For i = LBound(smsMsgKeys) To UBound(smsMsgKeys)
            k = smsMsgKeys(i)
            p = InStr(smsMsgFile, "[[[" & k & "]]]")
            If p > 0 Then
                x = Mid(smsMsgFile, p + Len(k) + 6, Len(smsMsgFile)) & "[[["
                x = Left(x, InStr(x, "[[[") - 1)
                cl.add x, k
            End If
        Next i
    End If
    Set ExtractItems = cl
End Function
' >>> test if there are only valid character in SMS message
Private Function SMSValidChars() As Boolean
    SMSValidChars = (DecStr2(EncStr2(FixSMSChars(Me.EditSMS.Text, "s"))) = FixSMSChars(Me.EditSMS.Text, "s"))
End Function
' >>> test if there are uneven count of parenthesis or brackets
Private Function SMSValidPar() As String
    Dim c1 As Integer, c2 As Integer
    SMSValidPar = ""
    c1 = Len(Me.EditSMS.Text) - Len(Replace(Me.EditSMS.Text, "(", ""))
    c2 = Len(Me.EditSMS.Text) - Len(Replace(Me.EditSMS.Text, ")", ""))
    SMSValidPar = ""
    If c1 <> c2 Then
        SMSValidPar = IIf(c1 > c2, ")", "(")
    Else
        c1 = Len(Me.EditSMS.Text) - Len(Replace(Me.EditSMS.Text, "{", ""))
        c2 = Len(Me.EditSMS.Text) - Len(Replace(Me.EditSMS.Text, "}", ""))
        If c1 <> c2 Then SMSValidPar = IIf(c1 > c2, "}", "{")
    End If
End Function
' >>> recalc the total templates file length
Private Sub CalcTempLength()
    Dim i As Integer, k As String
    smsMsgLen = 0
    If smsMsgCnt > 0 Then
        For i = LBound(smsMsgKeys) To UBound(smsMsgKeys)
            k = smsMsgKeys(i)
            smsMsgLen = smsMsgLen + Len(k) + Len(smsMsgList(k)) + 6
        Next i
        If Me.ListSMS.Text <> "" Then smsMsgLen = smsMsgLen + Len(Me.EditSMS.Text) + 15 - Len(smsCurTmp)
    End If
End Sub
' >>> fix an sms message to either:
'     typ = s : to be saved (convert enter to ~~)
'     typ = l : to be loaded (convert ~~ to enter)
'     typ = m : make sms file (convert enter to space)
Private Function FixSMSChars(str As String, typ As String) As String
    Dim x As String
    Select Case typ
        Case "s"
            x = Replace(str, chr(13) & chr(10), "~~")
        Case "l"
            x = Replace(str, "~~", chr(13) & chr(10))
        Case Else
            x = Replace(str, chr(13) & chr(10), "")
    End Select
    FixSMSChars = x
End Function
' >>> get the list of banned phones as a string array (phones are fixed to numbers only)
Private Function get_banned_phones() As String
    Dim arr() As String
    Dim itm
    arr = RangeToStrArr(Range(GRN_men_banned_phones))
    get_banned_phones = ""
    If Not IsStringArrayEmpty(arr) Then
        For Each itm In arr
            get_banned_phones = get_banned_phones + "[" + StrCleanNum(CStr(itm)) + "],"
        Next
    End If
End Function


Attribute VB_Name = "ModuleUtils64"
Option Explicit
' >>> system functions that require distinction between 32 & 64 bit
#If VBA7 Then
    Private Declare PtrSafe Function GetSystemMetrics Lib "USER32" (ByVal nIndex As Long) As Long
#Else
    Private Declare Function GetSystemMetrics Lib "User32.dll" (ByVal nIndex As Long) As Long
#End If
' >>> functions that utilize system functions <<<
' >>> --------------------------------------- <<<
' >>> get the screen width
Public Function GetScreenWidth() As Long
    GetScreenWidth = GetSystemMetrics(0)
End Function
' >>> get the screen width
Public Function GetScreenHeight() As Long
    GetScreenHeight = GetSystemMetrics(1)
End Function


Attribute VB_Name = "DialogSave"
Attribute VB_Base = "0{22B98BCE-3F3A-4DF2-8123-ECE210933357}{0387EED8-B7DB-4FD7-AB86-A92A0C00CFAB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> do this every time dialog pops
Private Sub UserForm_Activate()
    Me.OptionFolder.Enabled = False
    Me.OptionNewVer.Value = False
    Me.OptionFolder.Value = False
    Me.OptionForce.Visible = IIf(Range(GRN_def_cloud_status) = CN_yes And GBL_file_is_latest < 1, True, False)
    Me.OptionForce.Value = False
End Sub
' >>> perform save operation
Private Sub ButtonSaveEna_Click()
    SaveWorkFile 0
End Sub
' >>> maintenance for selecting new version
Private Sub OptionNewVer_Click()
    Me.OptionFolder.Enabled = Me.OptionNewVer.Value
    If Not Me.OptionFolder.Enabled Then Me.OptionFolder.Value = False
End Sub
' >>> maintenance for forcing version as last
Private Sub OptionForce_Click()
    Dim tx As String
    tx = "בחירה באופציה זאת תגדיר את הגרסה הנוכחית שאת/ה שומר עכשיו כגרסה העדכנית ביותר, האם את/ה בטוח ?"
    If Me.OptionForce.Value Then
        If MsgBox(tx, vbYesNo, "Confirm") <> vbYes Then Me.OptionForce.Value = False
    End If
End Sub
' >>> save file according to options
Public Sub SaveWorkFile(ctl As Integer)
    Dim file As String, path As String, name As String
    Dim zver As Boolean, zfld As Boolean
    Dim p As Integer
    path = ActiveWorkbook.path
    name = ActiveWorkbook.name
    zver = Me.OptionNewVer.Value
    zfld = Me.OptionFolder.Value
    If ctl > 0 Then
        zver = True
        zfld = False
    End If
    If zver Then
        name = CalcNewVerName()
        file = path & "\" & name
        If zfld Then
            file = SelectFolder(name)
        End If
        If file <> "" Then
            file = FixOverwriteIssue(file)
            On Error Resume Next
            Application.ActiveWorkbook.SaveAs fileName:=file, CreateBackup:=False
            SetFileVerInfo
            GBL_Is_saved = True
        End If
    Else
        ThisWorkbook.save
        GBL_Is_saved = True
    End If
    Me.hide
End Sub
' >>> calc new version
Function CalcNewVerName() As String
    Dim y1 As String, m1 As String, d1 As String, vv As String
    Dim y2 As String, m2 As String, d2 As String
    Dim name As String
    y1 = Left(GBL_file_date, 4)
    m1 = Mid(GBL_file_date, 6, 2)
    d1 = Right(GBL_file_date, 2)
    vv = GBL_file_ver
    y2 = Format(Now(), "YYYY")
    m2 = Format(Now(), "MM")
    d2 = Format(Now(), "DD")
    If y2 > y1 Or (y2 = y1 And m2 > m1) Or (y2 = y1 And m2 = m1 And d2 > d1) Then
        y1 = y2
        m1 = m2
        d1 = d2
        vv = "100"
    Else
        vv = CStr(CInt(vv) + 1)
    End If
    name = Replace(CN_file_template, "YYYY", y1)
    name = Replace(name, "MM", m1)
    name = Replace(name, "DD", d1)
    name = Replace(name, "VVV", vv)
    CalcNewVerName = name
End Function
' >>> fix possible file overwrite issue by increasing ver
Function FixOverwriteIssue(file As String) As String
    Dim p As Integer, n As Integer, x As String
    p = InLastStr(file, "\")
    p = p + InStr(CN_file_template, "vVVV")
    n = 5
    Do While FileExists(file) And n > 0
        x = Mid(file, p, 10)
        x = Left(x, NotInStr(x, "0123456789", 2) - 1)
        file = Replace(file, x, Left(x, 1) & CStr(CInt(Mid(x, 2, 9) + 20)))
        n = n - 1
    Loop
    FixOverwriteIssue = file
End Function
' >>> select a folder
Function SelectFolder(file) As String
    Dim res
    Dim ext As String
    ext = Right(CN_file_template, 9)
    ext = Mid(ext, InStr(ext, "."), 9)
    res = Application.GetSaveAsFilename(FileFilter:="Excel Binary Macro Enabled (*" & ext & "), *" & ext, InitialFileName:=file)
    If res = False Then res = ""
    SelectFolder = res
End Function


Attribute VB_Name = "PanelVersion"
Attribute VB_Base = "0{BF313BAA-B0EC-4FE6-AE31-CB871FC250CF}{1A069CFB-25CE-403A-861C-BD59124F62B1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> constants
Private Const CN_Err = "קובץ עדכני יותר ([ver]) מתאריך: [date] נמצא אצל [user]."
Private Const CN_Wrn = "על הקובץ כרגע: [who]."
' >>> initialization
Private Sub UserForm_Initialize()
    Me.StartUpPosition = 0
    Me.RightToLeft = True
    Me.Left = Application.Width / 2 - Me.Width / 2
    Me.Top = 1
End Sub
' >>> do when panel is shown
Private Sub UserForm_Activate()
    Me.Top = 1
End Sub
Private Sub UserForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    FixHeight
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Me.Height > 21 And Me.ErrText.Caption <> "" Then
        Me.Height = 21
        Cancel = True
    End If
End Sub
' >>> fix panel height
Public Sub FixHeight()
    Me.WrnText.Top = IIf(Me.ErrText.Caption = "", 5, 33)
    Me.ImageWrn.Top = Me.WrnText.Top
    Me.Height = 75 - IIf(Me.ErrText.Caption = "", 23, IIf(Me.WrnText.Caption = "", 18, 0))
End Sub
' >>> reset message window
Public Sub ResetMsg()
    If Not Me.Visible Or Me.Height < 25 Then GBL_message_backup = "*****"
End Sub
' >>> display a system error / warning
Public Sub ShowMsg(err As String, wrn As String)
    If err <> "" Or wrn <> "" Then
        If GBL_message_backup <> err & " / " & wrn Then
            Me.ErrText.Caption = err
            Me.WrnText.Caption = wrn
            GBL_message_backup = err & " / " & wrn
            Me.ErrText.Visible = (err <> "")
            Me.ImageErr.Visible = Me.ErrText.Visible
            Me.WrnText.Visible = (wrn <> "")
            Me.ImageWrn.Visible = Me.WrnText.Visible
            FixHeight
            Me.Top = 1
            On Error Resume Next
            If Not GBL_new_year_on Then
                Me.Show
            End If
            If Me.Top <> 1 Then Me.Top = 1
        End If
    Else
        If Me.Visible Then
            Me.hide
        End If
    End If
End Sub
' >>> activate version check
Public Sub DoVerCheck()
    Dim res As String, err As String, wrn As String
    Dim ts As String, dt As String, tm As String, vr As String, usr As String
    Dim who As String, ver As String
    Dim p As Integer
    res = GetCloudVer()
    err = ""
    wrn = ""
    If Left(res, 1) = "{" Then
        ver = Range(GRN_def_data_ver).Text
        ts = StrBetween(res, "ts"":""", """")
        dt = StrBetween(res, "date"":""", """")
        If dt = "0000_00_00" Then dt = GBL_file_date ' fix for checking only data version
        tm = StrBetween(res, "time"":""", """")
        If tm = "000" Then tm = GBL_file_ver ' fix for checking only data version
        vr = StrBetween(res, "ver"":""", """")
        usr = DecStr2(StrBetween(res, "user"":""", """"))
        who = DecStr2(StrBetween(res, "users"":""", """"))
        If who <> "" Then wrn = Replace(CN_Wrn, "[who]", who)
        If dt > GBL_file_date Or (dt = GBL_file_date And tm > GBL_file_ver) Or (dt = GBL_file_date And tm = GBL_file_ver And vr > ver) Then
            err = Replace(Replace(Replace(CN_Err, "[date]", ts), "[user]", usr), "[ver]", vr)
            GBL_file_is_latest = -1
        Else
            GBL_file_is_latest = 1
            If wrn = "" Then wrn = "זאת גרסת קובץ עדכנית."
        End If
        ShowMsg err, wrn
    Else
        If Range(GRN_def_cloud_debug) = CN_yes Then
            Range(GRN_def_cloud_debug_msg) = res
        End If
        ShowMsg res, wrn
        InitVersionCheck 1
    End If
End Sub
' >>> activate version update
Public Function DoVerSave(force As Boolean) As String
    Dim res As String, err As String
    Dim ts As String, usr As String
    DoVerSave = ""
    res = SetCloudVer(force)
    err = IIf(Left(res, 1) <> "{", res, "")
    If InStr(res, "failed") > 0 Then
        ts = StrBetween(res, "ts"":""", """")
        usr = DecStr2(StrBetween(res, "user"":""", """"))
        err = Replace(Replace(Replace(CN_Err, "[date]", ts), "[user]", usr), "([ver])", "")
        DoVerSave = "failed"
    End If
    ShowMsg err, ""
End Function


Attribute VB_Name = "PanelSave"
Attribute VB_Base = "0{B3A20F72-C583-44BD-8FA3-DD80D6EF9F27}{8B94E2E5-14A7-4F7D-92AF-C27936532C68}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> variables to keep panel from moving
Private pos_top
Private pos_left
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> do when panel is shown
Private Sub UserForm_Activate()
    pos_top = Me.Top
    pos_left = Me.Left
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'    Cancel = True
End Sub
' >>> prevent moving panel
Private Sub UserForm_Layout()
    If Not IsEmpty(pos_top) Then Me.Move pos_left, pos_top
End Sub
' >>> display a text message and move progress bar
Public Sub ShowMsg(txt As String, prg As Integer, Optional col As String = "")
    Me.MsgBox.Text = txt
    ProgBar prg
    If col = "red" Then Me.MsgBox.ForeColor = vbRed
    Select Case col
        Case "ok"
            Me.MsgBox.ForeColor = vbGreen
        Case "err"
            Me.MsgBox.ForeColor = vbRed
        Case "wrn"
            Me.MsgBox.ForeColor = vbBlue
        Case Else
            Me.MsgBox.ForeColor = vbBlack
    End Select
    If Not GBL_new_year_on Then
        Me.Show
    End If
End Sub
' >>> control the progress bar
Private Sub ProgBar(p As Integer)
    Me.ProgressBar.Width = p * (Me.ProgressBack.Width - 2) / 100
    Me.ProgressText.Caption = CStr(p) & "%"
End Sub


Attribute VB_Name = "DialogInitAssign"
Attribute VB_Base = "0{CED22BD2-5CDE-4B58-965D-08E6270D985F}{417A958A-1FEB-43F5-BD1D-E68397B0D16A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> constants
Private Const CN_sheet = "sheet93"
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> do this every time dialog pops
Private Sub UserForm_Activate()
    SetModeButton
    SetUtilButton
    SetAltsButton
End Sub
' >>> prevent form from closing
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'    Cancel = True
End Sub
' >>> show relevant help for this panel
Private Sub AssignHelp_Click()
    PanelHelp.ShowHelp ("תלמידים-שיבוץ")
End Sub
' >>> set mode button status to on/off
Private Sub SetModeButton()
    Dim stt As String
    stt = Range("pupils_ass_mode")
    Me.ButtonControl.Caption = IIf(stt <> "", "הפסק", "הפעל")
    Me.ButtonControl.ControlTipText = IIf(stt <> "", "הפסק את מצב השיבוץ הראשוני", "הפעל את מצב השיבוץ הראשוני")
End Sub
' >>> set utility data button status to on/off
Private Sub SetUtilButton()
    Me.ButtonDelUtil.Enabled = TestAssignData()
End Sub
' >>> set atl classes data button status to on/off
Private Sub SetAltsButton()
    Dim c As Integer
    c = CInt(Range("pupils_alt_count"))
    Me.ButtonDelMinor.Enabled = (c > 0)
End Sub
' >>>>>>> ------------------------- <<<<<<<
' >>>>>>> Initial Class Assignments <<<<<<<
' >>>>>>> ------------------------- <<<<<<<
Private Sub ButtonControl_Click()
    Dim stt As Boolean
    stt = (Me.ButtonControl.Caption = "הפעל")
    TurnAssignModeOnOff stt
End Sub
' >>> turn initial assign mode on or off
Private Sub TurnAssignModeOnOff(stt As Boolean)
    Dim ws As Worksheet
    SetModeButton
    Set ws = GetSheetByCodename(CN_sheet)
    If stt Then TurnAssignModeOn Else TurnAssignModeOff
    Me.hide
End Sub
' >>> maintenance for initial assign mode is on
Private Sub TurnAssignModeOn()
    Dim ws As Worksheet
    Set ws = GetSheetByCodename(CN_sheet)
    If Not TestAssignData() Then MakeInitAssignData
    ws.Visible = True
    Range("pupils_ass_mode") = "מצב שיבוץ"
End Sub
' >>> maintenance for initial assign mode is off
Private Sub TurnAssignModeOff()
    Dim ws As Worksheet, q As Boolean
    Set ws = GetSheetByCodename(CN_sheet)
    q = (ActiveWorkbook.ActiveSheet.CodeName = CN_sheet)
    ws.Visible = False
    If q Then
        Set ws = GetSheetByCodename("sheet1")
        ws.Activate
    End If
    Range("pupils_ass_mode") = ""
End Sub
' >>>>>>> ------------ <<<<<<<
' >>>>>>> Data Buildup <<<<<<<
' >>>>>>> ------------ <<<<<<<
' >>> create all data in the "assign" tab
Private Sub MakeInitAssignData()
    Dim rng As Range
    UpdatesOff
    FilterPupils "", "", "" ' cancel filter
    PupilsSort "תלמיד" ' main sort
    Range("assign_formula").Copy ' copy formulas
    Range("assign_data").PasteSpecial xlPasteFormulas
    Set rng = Intersect(Range(GRN_ppl_all_data), Range(GRN_ppl_id).EntireColumn)
    rng.Copy
    Range("assign_kids").Cells(1).PasteSpecial xlPasteValues
    Set rng = Intersect(Range(GRN_ppl_all_data), Range(GRN_ppl_name_last).EntireColumn)
    rng.Copy
    Range("assign_kids").Cells(2).PasteSpecial xlPasteValues
    Set rng = Intersect(Range(GRN_ppl_all_data), Range(GRN_ppl_name_first).EntireColumn)
    rng.Copy
    Range("assign_kids").Cells(3).PasteSpecial xlPasteValues
    Set rng = Intersect(Range(GRN_ppl_all_data), Range(GRN_ppl_grade).EntireColumn)
    rng.Copy
    Range("assign_kids").Cells(4).PasteSpecial xlPasteValues
    Range(GRN_ppl_cls_data).Copy
    Range("assign_major").PasteSpecial xlPasteValues
    Range(GRN_ppl_cls_alts).Copy
    Range("assign_minor").PasteSpecial xlPasteValues
    UpdatesOn
End Sub
' >>> test if assign data exists in assign tab
Private Function TestAssignData() As Boolean
    Dim c As Integer
    c = CInt(Range("assign_count"))
    TestAssignData = (c > 0)
End Function
' >>>>>>> ------------ <<<<<<<
' >>>>>>> Data Removal <<<<<<<
' >>>>>>> ------------ <<<<<<<
' >>> delete all utility values from both pupils tab and assign tab
Private Sub ButtonDelUtil_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        UpdatesOff
        CleanRange Range("assign_data")
        UpdatesOn
        SetUtilButton
    End If
End Sub
' >>> delete all minor class selections from pupils tab
Private Sub ButtonDelMinor_Click()
    AskReset
    If AskDialog(CN_sure, "yn") = "y" Then
        UpdatesOff
        CleanRange Range(GRN_ppl_cls_alts)
        UpdatesOn
        SetAltsButton
    End If
End Sub


Attribute VB_Name = "PanelNewYear"
Attribute VB_Base = "0{7809940F-3D5A-4969-ACAD-D5DD8B73B5C7}{14C767EA-CBB3-454D-A773-282930185BD8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> global suspend event indicator
Private events_on As Boolean
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
    events_on = True
    reset_fields
End Sub
' >>> show info panel
Private Sub UserForm_Activate()
    events_on = True
    Me.ProcessText.Visible = False
    Me.ProcessText.Text = ""
    Me.Ny_Ok.Visible = False
    Me.ImgOK.Visible = False
    checks_maintenance
    verify_yearbox
    verify_namebox
    do_progress -1
End Sub
' >>> cancel year move
Private Sub Ny_Cancel_Click()
    Me.hide
End Sub
' >>> finished
Private Sub Ny_Ok_Click()
    enable_panel
    Me.ProcessText.Visible = False
    Me.Ny_Ok.Visible = False
    Me.ImgOK.Visible = False
    do_progress 0
    Me.hide
End Sub
' >>> execute year move
Private Sub Ny_Exec_Click()
    exec_newyear
End Sub
' >>> enable/disable new year box
Private Sub Ny_Def_Year_Click()
    verify_yearbox
End Sub
' >>> fix year box
Private Sub Ny_Year_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim yr As Long
    If IsNumeric(Me.Ny_Year.Value) Then
        yr = Int(Me.Ny_Year.Value)
        If yr < 100 Then yr = yr + 2000
        Me.Ny_Year.Value = Trim(str(yr))
    End If
End Sub
' >>> verify year box validity
Private Sub Ny_Year_Change()
    verify_yearbox
End Sub
' >>> verify year validity
Private Sub verify_yearbox()
    Dim chk As Boolean, yr As Long
    If IsNumeric(Me.Ny_Year.Value) Then
        yr = Int(Me.Ny_Year.Value)
        If yr < 100 Then yr = yr + 2000
    Else: yr = 0
    End If
    chk = (yr > 2000 And yr < 2100)
    Me.Ny_Year.Enabled = Me.Ny_Def_Year.Value
    Me.Ny_Year.ForeColor = IIf(Me.Ny_Year.Enabled And Not chk, &HFF&, &H80000008)
    Me.Ny_Year.BorderColor = IIf(Me.Ny_Year.Enabled And Not chk, &HFF&, &H80000008)
    fix_exec
End Sub
' >>> handle special move class click
Private Sub Ny_Grd_Move_Click()
    If Not Me.Ny_Grd_Move.Value Then
        Me.Ny_Grd_Names.Value = False
    End If
End Sub
' >>> enable/disable the class names text boxes
Private Sub Ny_Grd_Names_Click()
    verify_namebox
End Sub
' >>> verify name box 1
Private Sub Ny_Cnm1_Change()
    verify_namebox
End Sub
' >>> verify name box 2
Private Sub Ny_Cnm2_change()
    verify_namebox
End Sub
' >>> verify name box 3
Private Sub Ny_Cnm3_Change()
    verify_namebox
End Sub
' >>> verify name box 4
Private Sub Ny_Cnm4_Change()
    verify_namebox
End Sub
' >>> verify name box 5
Private Sub Ny_Cnm5_Change()
    verify_namebox
End Sub
' >>> maintenance for name boxes
Private Sub verify_namebox()
    Dim nm1 As Integer, nm2 As Integer, nm3 As Integer, nm4 As Integer, nm5 As Integer
    Dim chk As Boolean, err As Boolean
    chk = Me.Ny_Grd_Names.Value
    Me.Ny_Cnm1.Enabled = chk
    Me.Ny_Cnm2.Enabled = chk
    Me.Ny_Cnm3.Enabled = chk
    Me.Ny_Cnm4.Enabled = chk
    Me.Ny_Cnm5.Enabled = chk
    nm1 = Len(Me.Ny_Cnm1.Value)
    nm2 = Len(Me.Ny_Cnm2.Value)
    nm3 = Len(Me.Ny_Cnm3.Value)
    nm4 = Len(Me.Ny_Cnm4.Value)
    nm5 = Len(Me.Ny_Cnm5.Value)
    err = (chk And (nm1 = 1 Or (nm1 = 0 And nm2 + nm3 + nm4 + nm5 > 0)))
    Me.Ny_Cnm1.ForeColor = IIf(err, &HFF&, &H80000008)
    Me.Ny_Cnm1.BorderColor = IIf(err, &HFF&, &H80000008)
    err = (chk And (nm2 = 1 Or (nm2 = 0 And nm3 + nm4 + nm5 > 0)))
    Me.Ny_Cnm2.ForeColor = IIf(err, &HFF&, &H80000008)
    Me.Ny_Cnm2.BorderColor = IIf(err, &HFF&, &H80000008)
    err = (chk And (nm3 = 1 Or (nm3 = 0 And nm4 + nm5 > 0)))
    Me.Ny_Cnm3.ForeColor = IIf(err, &HFF&, &H80000008)
    Me.Ny_Cnm3.BorderColor = IIf(err, &HFF&, &H80000008)
    err = (chk And (nm4 = 1 Or (nm4 = 0 And nm5 > 0)))
    Me.Ny_Cnm4.ForeColor = IIf(err, &HFF&, &H80000008)
    Me.Ny_Cnm4.BorderColor = IIf(err, &HFF&, &H80000008)
    err = (chk And nm5 = 1)
    Me.Ny_Cnm5.ForeColor = IIf(err, &HFF&, &H80000008)
    Me.Ny_Cnm5.BorderColor = IIf(err, &HFF&, &H80000008)
    fix_exec
End Sub
' >>> enable/disable exec button
Private Sub fix_exec()
    Dim x As Boolean
    x = True
    If Me.Ny_Year.ForeColor = &HFF& Then x = False
    If Me.Ny_Cnm1.ForeColor = &HFF& Then x = False
    If Me.Ny_Cnm2.ForeColor = &HFF& Then x = False
    If Me.Ny_Cnm3.ForeColor = &HFF& Then x = False
    If Me.Ny_Cnm4.ForeColor = &HFF& Then x = False
    If Me.Ny_Cnm5.ForeColor = &HFF& Then x = False
    Me.Ny_Exec.Enabled = x
End Sub
' >>> enable/disable all kids tasks
Private Sub Ny_Del_Kids_Click()
    Dim chk As Boolean
    If events_on Then
        chk = Me.Ny_Del_Kids.Value
        events_on = False
        Me.Ny_Del_Kids_Cls = chk
        Me.Ny_Del_Kids_Pay = chk
        Me.Ny_Del_Kids_Misc = chk
        events_on = True
    End If
End Sub
' >>> enable/disable all classes tasks
Private Sub Ny_Del_Classes_Click()
    Dim chk As Boolean
    If events_on Then
        chk = Me.Ny_Del_Classes.Value
        events_on = False
        Me.Ny_Del_Classes_Asn = chk
        Me.Ny_Del_Classes_Room = chk
        Me.Ny_Del_Classes_Hours = chk
        events_on = True
    End If
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Kids_Cls_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Kids_Pay_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Kids_Misc_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Classes_Asn_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Classes_Room_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub Ny_Del_Classes_Hours_Click()
    checks_maintenance
End Sub
' >>> maintenance for special checks
Private Sub checks_maintenance()
    If events_on Then
        events_on = False
        If Me.Ny_Del_Kids_Cls.Value Or Me.Ny_Del_Kids_Pay Or Me.Ny_Del_Kids_Misc Then Me.Ny_Del_Kids.Value = True
        If Not Me.Ny_Del_Kids_Cls.Value And Not Me.Ny_Del_Kids_Pay And Not Me.Ny_Del_Kids_Misc Then Me.Ny_Del_Kids.Value = False
        If Me.Ny_Del_Classes_Asn.Value Or Me.Ny_Del_Classes_Room Or Me.Ny_Del_Classes_Hours Then Me.Ny_Del_Classes.Value = True
        If Not Me.Ny_Del_Classes_Asn.Value And Not Me.Ny_Del_Classes_Room And Not Me.Ny_Del_Classes_Hours Then Me.Ny_Del_Classes.Value = False
        events_on = True
    End If
End Sub
' >>> reset all fields
Private Sub reset_fields()
    Dim i As Integer, yr As String, cnm(4) As String
' init checks ...
    Me.Ny_New_Ver.Value = True
    Me.Ny_Def_Year.Value = True
    Me.Ny_Grd_Move.Value = True
    Me.Ny_Grd_Names.Value = True
    Me.Ny_Del_Kids.Value = True
    Me.Ny_Del_Classes.Value = True
    Me.Ny_Del_Events.Value = True
    Me.Ny_Del_Payments.Value = True
    Me.Ny_Del_Changes.Value = True
    Me.Ny_Del_Wait.Value = True
' init year
    yr = year(Now())
    Ny_Year.Value = Trim(str(yr))
' init class names
    cnm(0) = Intersect(Range(GRN_grd_data), Range("grade_name_1").EntireColumn).Cells(1, 1).Value
    cnm(1) = Intersect(Range(GRN_grd_data), Range("grade_name_2").EntireColumn).Cells(1, 1).Value
    cnm(2) = Intersect(Range(GRN_grd_data), Range("grade_name_3").EntireColumn).Cells(1, 1).Value
    cnm(3) = Intersect(Range(GRN_grd_data), Range("grade_name_4").EntireColumn).Cells(1, 1).Value
    cnm(4) = Intersect(Range(GRN_grd_data), Range("grade_name_5").EntireColumn).Cells(1, 1).Value
    For i = 0 To 4
        If cnm(i) = "" Then cnm(i) = "תתתתתתת"
    Next i
    SortStrArray cnm, "a"
    For i = 0 To 4
        If cnm(i) = "תתתתתתת" Then cnm(i) = ""
    Next i
    Ny_Cnm1.Text = cnm(0)
    Ny_Cnm2.Text = cnm(1)
    Ny_Cnm3.Text = cnm(2)
    Ny_Cnm4.Text = cnm(3)
    Ny_Cnm5.Text = cnm(4)
End Sub
' >>> control the progress bar
Private Sub do_progress(n As Integer)
    If n > 0 Then
        Me.ProgressBack.Visible = True
        Me.ProgressText.Visible = True
        Me.ProgressBar.Visible = True
        Me.ProgressText = str(n) & "%"
        Me.ProgressBar.Width = Int((Me.ProgressBack.Width - 2) * n / 100)
        Me.Repaint
        Me.ProcessText.SetFocus
    Else
        Me.ProgressBack.Visible = False
        Me.ProgressText.Visible = False
        Me.ProgressBar.Visible = False
    End If
End Sub
' >>> enable everything
Private Sub enable_panel()
    Dim obj As Control
    For Each obj In Me.Controls
        obj.Visible = True
    Next
End Sub
' >>> disable everything
Private Sub disable_panel()
    Dim obj As Control
    For Each obj In Me.Controls
        obj.Visible = False
    Next
End Sub
' >>> add a line to message box
Private Sub add_msg(txt As String)
    Dim x As String
    x = Trim(Me.ProcessText.Text)
    If x <> "" Then x = x + vbCr
    Me.ProcessText.Text = x + txt
    Me.ProcessText.SetFocus
End Sub
' >>> perform the new year process
Private Sub exec_newyear()
    GBL_new_year_on = True
    disable_panel
    Me.ProcessText.Visible = True
    add_msg "מתחיל בביצוע מעבר לשנה חדשה - נא להמתין."
    add_msg ""
    do_progress 0
    do_step_backup ' do backup
    do_progress 10
    do_step_fix_year ' do new year
    do_progress 20
    do_step_fix_grd ' do grades move
    do_progress 30
    do_step_new_grd ' do new grades
    do_progress 40
    do_step_del_kids ' do kids delete
    do_progress 48
    do_step_del_class ' do classes delete
    do_progress 56
    do_step_del_events ' do events delete
    do_progress 64
    do_step_del_payments ' do payments delete
    do_progress 72
    do_step_del_changes ' do changes delete
    do_progress 80
    do_step_del_wait ' do waiting delete
    do_progress 90
    sheet4.Activate
    do_step_save ' do final save
    do_progress 100
    add_msg "יש לבצע ידנית עידכון תלמידים חדשים / תלמידים שעזבו."
    add_msg "יש לבצע ידנית עידכון חוגים חדשים / חוגים שבוטלו."
    add_msg "יש לבצע ידנית עידכון אנשי צוות."
    Me.Ny_Ok.Visible = True
    Me.ImgOK.Visible = True
    GBL_new_year_on = False
    add_msg ""
    add_msg "התהליך הסתיים."
End Sub
' >>> perform a backup
Private Sub do_step_backup()
    If Me.Ny_New_Ver.Value Then
        DialogSave.SaveWorkFile 1
        add_msg "גיבוי הקובץ בוצע בהצלחה."
    Else
        add_msg "!!! לא בוצע גיבוי."
    End If
End Sub
' >>> perform a new year change
Private Sub do_step_fix_year()
    Dim x As String
    If Me.Ny_Def_Year.Value Then
        x = Me.Ny_Year.Text & "-" & Right(str(Int(Me.Ny_Year.Text) + 1), 2)
        Range("defs_cal_year").Value = x
        add_msg "שנת הלימודים עודכנה ל- " & x & "."
    Else
        add_msg "!!! לא בוצע עדכון שנת הלימודים."
    End If
End Sub
' >>> perform a move of grades
Private Sub do_step_fix_grd()
    If Me.Ny_Grd_Move.Value Then
        If Any6thGraders() Then
            Del6thGraders
            Del6thGrade
            add_msg "ילדי כיתות ו' משנה קודמת נמחקו מהקובץ."
            MoveGradesUp
            add_msg "כיתות ותלמידים הוזזו שנה אחת קדימה."
        Else
            add_msg "*** שגיאה - לא בוצעה הזזת כיתות מאחר ולא קיימים ילדי כיתה ו'."
        End If
    Else
        add_msg "!!! לא בוצעה הזזת כיתות שנה קדימה."
    End If
End Sub
' >>> perform an update of first grade names
Private Sub do_step_new_grd()
    Dim rng As Range
    If Me.Ny_Grd_Names.Value Then
        Set rng = Intersect(Range(GRN_grd_data), Range("grade_name_1").EntireColumn).Cells(1, 1)
        rng.Value = Trim(Ny_Cnm1.Text)
        Set rng = Intersect(Range(GRN_grd_data), Range("grade_name_2").EntireColumn).Cells(1, 1)
        rng.Value = Trim(Ny_Cnm2.Text)
        Set rng = Intersect(Range(GRN_grd_data), Range("grade_name_3").EntireColumn).Cells(1, 1)
        rng.Value = Trim(Ny_Cnm3.Text)
        Set rng = Intersect(Range(GRN_grd_data), Range("grade_name_4").EntireColumn).Cells(1, 1)
        rng.Value = Trim(Ny_Cnm4.Text)
        Set rng = Intersect(Range(GRN_grd_data), Range("grade_name_5").EntireColumn).Cells(1, 1)
        rng.Value = Trim(Ny_Cnm5.Text)
        add_msg "שמות כיתות א' חדשות עודכנו."
    Else
        add_msg "!!! לא בוצע עדכון שמות כיתות א' חדשות"
    End If
End Sub
' >>> perform delete of kids data
Private Sub do_step_del_kids()
    If Me.Ny_Del_Kids.Value Then
        If Me.Ny_Del_Kids_Cls.Value Then
            ControlPupils.init_tab "c"
            add_msg "הצבות חוגים בטאב תלמידים משנה קודמת נמחקו מהקובץ."
        End If
        If Me.Ny_Del_Kids_Pay.Value Then
            ControlPupils.init_tab "p"
            add_msg "נתוני תשלומים בטאב תלמידים משנה קודמת נמחקו מהקובץ."
        End If
        If Me.Ny_Del_Kids_Misc.Value Then
            ControlPupils.init_tab "m"
            add_msg "נתוני שונות בטאב תלמידים משנה קודמת נמחקו מהקובץ."
        End If
    Else
        add_msg "!!! לא בוצעה מחיקת נתוני שנה קודמת בטאב תלמידים."
    End If
End Sub
' >>> perform delete of classes data
Private Sub do_step_del_class()
    If Me.Ny_Del_Classes.Value Then
        If Me.Ny_Del_Classes_Asn.Value Then
            ControlClasses.init_tab "a"
            add_msg "הצבות כיתות בטאב חוגים משנה קודמת נמחקו מהקובץ."
        End If
        If Me.Ny_Del_Classes_Room.Value Then
            ControlClasses.init_tab "r"
            add_msg "מיקומים (חדרים) בטאב חוגים משנה קודמת נמחקו מהקובץ."
        End If
        If Me.Ny_Del_Classes_Hours.Value Then
            ControlClasses.init_tab "h"
            add_msg "נתוני override שעתיים בטאב חוגים משנה קודמת נמחקו מהקובץ."
        End If
    Else
        add_msg "!!! לא בוצעה מחיקת נתוני שנה קודמת בטאב חוגים."
    End If
End Sub
' >>> perform delete of events records
Private Sub do_step_del_events()
    If Me.Ny_Del_Events.Value Then
        ControlEvents.init_tab
        add_msg "רשומות אירועים של שנה קודמת נמחקו מהקובץ."
    Else
        add_msg "!!! לא בוצעה מחיקת אירועים של שנה קודמת."
    End If
End Sub
' >>> perform delete of payments records
Private Sub do_step_del_payments()
    If Me.Ny_Del_Payments.Value Then
        ControlExpenses.init_tab
        add_msg "רשומות תשלומים של שנה קודמת נמחקו מהקובץ."
    Else
        add_msg "!!! לא בוצעה מחיקת תשלומים של שנה קודמת."
    End If
End Sub
' >>> perform delete of changes records
Private Sub do_step_del_changes()
    If Me.Ny_Del_Changes.Value Then
        ControlChanges.init_tab
        add_msg "שינויים בהצבות חוגים משנה קודמת נמחקו מהקובץ."
    Else
        add_msg "!!! לא בוצעה מחיקת שינויים בהצבות חוגים משנה קודמת."
    End If
End Sub
' >>> perform delete of wait list records
Private Sub do_step_del_wait()
    If Me.Ny_Del_Wait.Value Then
        ControlWait.init_tab
        add_msg "רשימות המתנה של שנה קודמת נמחקו מהקובץ."
    Else
        add_msg "!!! לא בוצעה מחיקת רשימת המתנה של שנה קודמת."
    End If
End Sub
' >>> perform a final save
Private Sub do_step_save()
    If Me.Ny_New_Ver.Value Then
        ThisWorkbook.save
        GBL_Is_saved = True
        add_msg "שמירת הקובץ בוצעה בחצלחה."
    Else
        add_msg "!!! לא בוצע שמירת קובץ."
    End If
End Sub


Attribute VB_Name = "PanelSetUser"
Attribute VB_Base = "0{9BD9D9B3-4D5D-4214-AAC4-2A093BE0C571}{6C74F2E8-0981-4FB1-9CF8-9879DED26BA5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
' >>> initialization
Private Sub UserForm_Initialize()
    Me.RightToLeft = True
End Sub
' >>> show info panel
Private Sub UserForm_Activate()
    Me.ImgOK.Visible = False
    Me.UserBox.SetFocus
    get_user_name
    verify_user
End Sub
' >>> verify user name length
Private Sub verify_user()
    Dim c As Boolean
    c = (Len(Me.UserBox.Text) > 3)
    Me.Bt_Save.Enabled = c
    Me.UserBox.ForeColor = IIf(Not c, &HFF&, &H80000008)
    Me.UserBox.BorderColor = IIf(Not c, &HFF&, &H80000008)
End Sub
' >>> handle name change
Private Sub UserBox_Change()
    verify_user
End Sub
' >>> execute user name change
Private Sub Bt_Save_Click()
    set_user_name
    Me.ImgOK.Visible = True
    Me.Bt_Save.Enabled = False
    Me.Bt_Cancel.Enabled = False
    Application.Wait (Now() + TimeValue("00:00:02"))
    Me.hide
End Sub
' >>> cancel operation
Private Sub Bt_Cancel_Click()
    Me.hide
End Sub
' >>> get current user from file
Private Sub get_user_name()
    Dim file As String
    Dim fno As Integer
    file = Range(GRN_def_img_dir) & "/user.txt"
    fno = FreeFile
    Me.UserBox.Text = ""
    If FileExists(file) Then
        Open file For Input As #fno
            Me.UserBox.Text = Application.Clean(Trim(Input$(LOF(fno), fno)))
        Close #fno
    End If
End Sub
' >>> set new user to file
Private Sub set_user_name()
    Dim file As String
    Dim fno As Integer
    file = Range(GRN_def_img_dir) & "/user.txt"
    fno = FreeFile
    GBL_current_user = Trim(Me.UserBox.Text)
    Open file For Output As #fno
        Print #fno, Trim(Me.UserBox.Text)
    Close #fno
End Sub


